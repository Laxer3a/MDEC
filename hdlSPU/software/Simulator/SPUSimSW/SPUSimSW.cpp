// GPUSimSW.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <stdio.h>
#include <memory.h>

#define DUMPWAV

#include <inttypes.h>
typedef struct wavfile_header_s {
	char ChunkID[4];   /*  4   */
	int32_t ChunkSize; /*  4   */
	char Format[4];    /*  4   */

	char Subchunk1ID[4];   /*  4   */
	int32_t Subchunk1Size; /*  4   */
	int16_t AudioFormat;   /*  2   */
	int16_t NumChannels;   /*  2   */
	int32_t SampleRate;    /*  4   */
	int32_t ByteRate;      /*  4   */
	int16_t BlockAlign;    /*  2   */
	int16_t BitsPerSample; /*  2   */

	char Subchunk2ID[4];
	int32_t Subchunk2Size;
} wavfile_header_t;

/*Standard values for CD-quality audio*/
#define SUBCHUNK1SIZE (16)
#define AUDIO_FORMAT (1) /*For PCM*/
#define NUM_CHANNELS (2)
#define SAMPLE_RATE (44100)

#define BITS_PER_SAMPLE (16)

#define BYTE_RATE (SAMPLE_RATE * NUM_CHANNELS * BITS_PER_SAMPLE / 8)
#define BLOCK_ALIGN (NUM_CHANNELS * BITS_PER_SAMPLE / 8)

// #include "sample.h"

/*Return 0 on success and -1 on failure*/
int write_PCM16_stereo_header(FILE* file_p, int32_t SampleRate, int32_t FrameCount) {
	int ret;

	wavfile_header_t wav_header;
	int32_t subchunk2_size;
	int32_t chunk_size;

	size_t write_count;

	subchunk2_size = FrameCount * NUM_CHANNELS * BITS_PER_SAMPLE / 8;
	chunk_size = 4 + (8 + SUBCHUNK1SIZE) + (8 + subchunk2_size);

	wav_header.ChunkID[0] = 'R';
	wav_header.ChunkID[1] = 'I';
	wav_header.ChunkID[2] = 'F';
	wav_header.ChunkID[3] = 'F';

	wav_header.ChunkSize = chunk_size;

	wav_header.Format[0] = 'W';
	wav_header.Format[1] = 'A';
	wav_header.Format[2] = 'V';
	wav_header.Format[3] = 'E';

	wav_header.Subchunk1ID[0] = 'f';
	wav_header.Subchunk1ID[1] = 'm';
	wav_header.Subchunk1ID[2] = 't';
	wav_header.Subchunk1ID[3] = ' ';

	wav_header.Subchunk1Size = SUBCHUNK1SIZE;
	wav_header.AudioFormat = AUDIO_FORMAT;
	wav_header.NumChannels = NUM_CHANNELS;
	wav_header.SampleRate = SampleRate;
	wav_header.ByteRate = BYTE_RATE;
	wav_header.BlockAlign = BLOCK_ALIGN;
	wav_header.BitsPerSample = BITS_PER_SAMPLE;

	wav_header.Subchunk2ID[0] = 'd';
	wav_header.Subchunk2ID[1] = 'a';
	wav_header.Subchunk2ID[2] = 't';
	wav_header.Subchunk2ID[3] = 'a';
	wav_header.Subchunk2Size = subchunk2_size;

	write_count = fwrite(&wav_header, sizeof(wavfile_header_t), 1, file_p);

	ret = (1 != write_count) ? -1 : 0;

	return ret;
}

/*Data structure to hold a single frame with two channels*/
typedef struct PCM16_stereo_s {
	int16_t left;
	int16_t right;
} PCM16_stereo_t;


class VSPU_IF;
#include "../../../rtl/obj_dir/VSPU_IF.h"

// class VADSRCycleCountModule;
// #include "../../../rtl/obj_dir/VADSRCycleCountModule.h"

// My own scanner to generate VCD file.
#define VCSCANNER_IMPL
#include "VCScanner.h"


VSPU_IF* mod = NULL;

void validateUpload  (VSPU_IF* mod, bool useCPU, VCScanner* pScan, int* time);
void validateDownload(VSPU_IF* mod, VCScanner* pScan, int* time);

extern void registerVerilatedMemberIntoScanner(VSPU_IF* mod, VCScanner* pScan);

void processUpload(VSPU_IF* mod);
void SPUBootSound(bool uploadSamples, bool fillZeros);
void uploadData();
void check(bool isTrue);
int  Adr(int Adr);
// Sample Rd(int Adr);

int reverbCurrentAdrByte;

uint32_t wrapOriginal(uint16_t baseReg, uint32_t addressByte) {
	addressByte += reverbCurrentAdrByte;
	uint32_t addressWord = addressByte >> 1;
	const uint32_t reverbBaseWord = baseReg * 4;

	uint32_t rel = addressWord /* - reverbBaseWord : NOT NECESSARY */;
	rel = rel % (262144 - reverbBaseWord); // Size in Word

	return (reverbBaseWord + rel);
}

int gBaseReg;

void SetAdrWork(int base, int counterByte) {
	gBaseReg = base;
	reverbCurrentAdrByte = counterByte;
}

int AdrWord(int AdrByte) {
	return wrapOriginal(gBaseReg, AdrByte);
}

int Adr(int AdrByte) {
	// To byte from word.
	return AdrWord(AdrByte) << 1;
}

void check(bool ok) {
	/*
	if (!ok) {
		printf("ERROR\n");
		while (true) {
			printf("");
		}
	}
	*/
}

u16 SPU_SW_RAM[262144];

/*
Sample Rd(int adressByte) {
	int wordAdr = AdrWord(adressByte);
	u16 d0 = SPU_SW_RAM[wordAdr];
	
	u16 l = mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramL[wordAdr];
	u16 m = mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramM[wordAdr];

	u16 d1 = l | (m << 8);
	check(d1 == d0);

	return d0;
}

void Wr(int adressByte, Sample v) {
	int wordAdr = AdrWord(adressByte);
	if (mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__i_we != 0) {
		SPU_SW_RAM[wordAdr] = v;
	}
}
*/

struct PushInfo {
	bool isWait;
	u16  addr;
	u16  value;
	const char* str;
};

PushInfo	gArray[100000];
int			gArraySize = 0;
int			gArrayCurr = 0;
int			gWaitCounter = 0;
bool		gWait = false;

#include <math.h>

/*
void W(uint32_t addr, uint16_t data) {
    delay();

    if (addr == SPUCNT) {
        // Dismiss dma write attempts
        const uint16_t MODE_MASK = 0x30;
        const uint16_t DMA_WRITE = 2;
        if (((data & MODE_MASK) >> 4) == DMA_WRITE) {
            return;
        }
    }
    write16(addr, data);
}
*/

int bytesWritten  = 0;
int ptrData = 0;
int ptrDataEnd = 0;
int uploadSize = 0;
int uploadPtr  = 0;
int vsyncCounter = 0;
bool upload;
u8*  spu_dump_bin;

enum PlayerState {
	WRITE_REG,
	WAIT_VSYNC,
	UPLOAD_DATA,
	UPLOAD_DIGEST,
	UPLOAD_DIGEST2,
	UPLOAD_WRITEMODE,
};

PlayerState pState;

void loader(const char* fileSPUDump) {
	ptrData		= 0;
	ptrDataEnd	= 0;
	pState		= pState;
	vsyncCounter= 0;

	FILE* source = fopen(fileSPUDump, "rb");

	if (source) {
		fseek(source,0,SEEK_END);
		ptrDataEnd  = ftell(source);
		fseek(source,0,SEEK_SET);
		spu_dump_bin = new u8[ptrDataEnd];
		fread(spu_dump_bin,1,ptrDataEnd,source);

		fclose(source);
	} else {
		printf(" CAN NOT OPEN FILE %s\n",fileSPUDump);
	}
}

void ResetPins() {
	mod->SPUCS   = 0;
	mod->SPUDREQ = 0;
	mod->SPUDACK = 0;
	mod->SRD     = 0;
	mod->SWRO    = 0;
	mod->addr    = 0; // 10 bit.
	mod->dataIn  = 0;
}

void W(int addr, int data) {
	mod->SPUCS   = 1;
//	mod->SPUDREQ = 0;
//	mod->SPUDACK = 0;
//	mod->SRD     = 0;
	mod->SWRO    = 1;
	printf("WRITE [%08x] = %04x\n",addr,data);
	mod->addr    = addr - 0x1f801c00; // 10 bit.
	mod->dataIn	 = data;
}

void WU(int addr, int data) {
	mod->SPUCS   = 1;
//	mod->SPUDREQ = 0;
//	mod->SPUDACK = 0;
//	mod->SRD     = 0;
	mod->SWRO    = 1;
	mod->addr    = addr - 0x1f801c00; // 10 bit.
	mod->dataIn	 = data;
}

void R(int addr) {
	mod->SPUCS   = 1;
//	mod->SPUDREQ = 0;
//	mod->SPUDACK = 0;
	mod->SRD     = 1;
//	mod->SWRO    = 0;
	mod->addr    = addr - 0x1f801c00; // 10 bit.
	mod->eval();

	/*
	// BAD HACK
	mod->i_clk	= 0;
	mod->eval();
	mod->i_clk  = 1;
	mod->eval();
	*/
}

u16 lastSPUSetup = 0;

void interpreter(int counter) {
//    for (uint32_t ptr = 0;ptr < sizeof(spu_dump_bin);) {
	ResetPins();

	if (ptrData < ptrDataEnd) {
		switch (pState) {
		case WRITE_REG:
			{
				uint8_t opcode = spu_dump_bin[ptrData++];
				if (opcode == 'X') {
					// if (ptrData>1) return;
				}else if (opcode == 'V') {
					printf("VSYNC WAIT STARTED @clk %i\n",counter);
					pState = WAIT_VSYNC;
				}else if (opcode == 'W') {
					uint32_t addr = 0;
					addr |= spu_dump_bin[ptrData++];
					addr |= spu_dump_bin[ptrData++]<<8;
					addr |= spu_dump_bin[ptrData++]<<16;
					addr |= spu_dump_bin[ptrData++]<<24;

					uint16_t data = 0;
					data |= spu_dump_bin[ptrData++];
					data |= spu_dump_bin[ptrData++]<<8;
					if (addr == 0x1F801DAA) {
						// FORBID DMA SETUP !!!!
						// 5-4   Sound RAM Transfer Mode (0=Stop, 1=ManualWrite, 2=DMAwrite, 3=DMAread))
						int mode = (data>>4) & 3;
						lastSPUSetup = data & (~(3<<4)); // Setup without transfer mode.
						printf("  Transfer mode:%i (0=Stop, 1=ManualWrite, 2=DMAwrite, 3=DMAread)\n",mode);
					}
					W(addr, data);
				}else if (opcode == 'F') {
					uint16_t size = 0;
					size |= spu_dump_bin[ptrData++]; 
					size |= spu_dump_bin[ptrData++]<<8;

					uploadSize = size;
					uploadPtr  = 0;
					bytesWritten = 0;
					printf("UPLOAD START @clk %i\n",counter);
					pState = UPLOAD_DATA;
				} else {
					printf("Unknown opcode %c (%d) @ 0x%x, breaking\n", opcode, opcode, ptrData-1);
					return;
				}
			}
			break;
		case UPLOAD_DATA:
			{
				uint16_t data = 0;
				data |= spu_dump_bin[ptrData++];
				data |= spu_dump_bin[ptrData++]<<8;
                
				WU(0x1F801DA8 /*SPU_FIFO*/, data);
				uploadPtr++;

				bytesWritten += 2;
				if (bytesWritten % 32 == 0 || (uploadPtr == uploadSize)) { // 32 item or block is smaller than 32
					printf("UPLOAD PAUSE @clk %i\n",counter);
					pState = UPLOAD_WRITEMODE;
				}
			}
			break;
		// Ended block
		case UPLOAD_WRITEMODE:
			WU(0x1F801DAA,lastSPUSetup | (1<<4));
			pState = UPLOAD_DIGEST;
			break;
		// Wait block complete...
		case UPLOAD_DIGEST:
			// KEEP READING EACH CYCLE
			R(0x1F801DAE);
			pState = UPLOAD_DIGEST2;
			break;
		case UPLOAD_DIGEST2:
			if ((mod->dataOut & (1<<10)) == 0) { // PREVIOUS READ RESULT
				printf("UPLOAD CONTINUE @clk %i\n",counter);
				if (uploadPtr < uploadSize) {
					// Still block to do...
					pState = UPLOAD_DATA;
				} else {
					pState = WRITE_REG;
				}
			} else {
				pState = UPLOAD_DIGEST;
			}
			break;
		case WAIT_VSYNC:
			//
			// If upload takes too long, VSync may be shifted of a few frames...
			//
			if (vsyncCounter == 0) {
				printf("VSYNC WAIT ENDED @clk %i\n",counter);
				pState = WRITE_REG;
			}
			break;
		}
	}

	vsyncCounter++;
	if (vsyncCounter==563333) {
		vsyncCounter = 0;
	}
}

int main()
{

//
// Test Decoder for Shift and dec.
//
#if 0
	VADSRCycleCountModule* modAdsr = new VADSRCycleCountModule();
	int test = 0;
	for (int useExpDecr =0; useExpDecr < 1; useExpDecr++)
	for (int AdsrLevel = 0; AdsrLevel <= 0x7FFF; AdsrLevel++) {

		for (int envshift = 0; envshift <= 11; envshift++) {
			for (int bStep = 4; bStep <= 7; bStep++) {
				modAdsr->i_EnvStep      = bStep & 0xF;
				modAdsr->i_step2ExpDecr = useExpDecr;
				modAdsr->i_adsrLevel    = AdsrLevel;
				modAdsr->i_EnvShift     = envshift;
				//	VL_OUT16(o_AdsrStep, 14, 0);
				//	VL_OUT(o_CycleCount, 22, 0);


				modAdsr->eval();
				int HWAdsrStep = ((int)(modAdsr->o_AdsrStep << 17)) >> 17;

				int step = bStep << (11 - envshift);
				int NoCashAdsrStep = useExpDecr ? ((step * AdsrLevel) / 0x8000) : step;

				if (HWAdsrStep != NoCashAdsrStep) {
					printf("%i, %i, %i, %i\n", AdsrLevel, step, NoCashAdsrStep, HWAdsrStep);
				}
				test++;
			}
		}
	}
	delete modAdsr;
#endif


	// ------------------------------------------------------------------
	// SETUP : Export VCD Log for GTKWave ?
	// ------------------------------------------------------------------
	const bool	useScan					= true;
	const int   useScanRange			= false;
	const int	scanStartCycle			= 30;
	const int	scanEndCycle			= 50;

	// ------------------------------------------------------------------
	// Fake SPU RAM PSX.
	// ------------------------------------------------------------------
	unsigned short* buffer = new unsigned short[1024*256];
	memset(buffer,0,1024*256*sizeof(short));

	// ------------------------------------------------------------------
	// [Instance of verilated GPU & custom VCD Generator]
	// ------------------------------------------------------------------
	mod = new VSPU_IF();
	VCScanner*	pScan = new VCScanner();
				pScan->init(2000,false);

	// SPU RAM ADR = VALUE !!! LOL.
	for (int n = 0; n < 262144; n++) {
		mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramL[n] = 0; // n & 0xFF;
		mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramM[n] = 0;
	}

	registerVerilatedMemberIntoScanner(mod,pScan);

	// Associate my VCD Scanner to the verilated object.
	if (useScan) {
		pScan->addPlugin(new ValueChangeDump_Plugin("spuLogREAD.vcd"));
	}

	// ------------------------------------------------------------------
	// Reset the chip for a few cycles at start...
	// ------------------------------------------------------------------
	int clockCnt = 0;
	mod->n_rst = 0;
	for (int n=0; n < 10; n++) {
		mod->i_clk = 0; mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
		mod->i_clk = 1; mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
	}
	mod->n_rst = 1;
	mod->i_clk = 0; mod->eval();
	if (useScan) { pScan->eval(clockCnt); }


	validateDownload(mod,pScan, &clockCnt);

	// WRITE
	for (int n=0; n < 1024; n++) {
		mod->i_clk = 0; mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
		mod->i_clk = 1; mod->eval();
		if ((n & 1) == 0) {
			mod->SPUCS  = 1;
			mod->SRD    = 0;
			mod->SWRO   = 1;
			mod->addr	= n;
			mod->dataIn = n+1;
		} else {
			mod->SPUCS = 0;
			mod->SRD    = 0;
			mod->SWRO   = 0;
			mod->addr	= 0;
		}
		mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
	}

	// READ
	for (int n=0; n < 1024; n++) {
		mod->i_clk = 0; mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
		mod->i_clk = 1; mod->eval();
		if ((n & 1) == 0) {
			mod->SPUCS  = 1;
			mod->SRD    = 1;
			mod->SWRO   = 0;
			mod->addr	= n;
		} else {
			mod->SRD   = 0;
			mod->SPUCS = 0;
			mod->addr	= 0;
		}
		mod->eval();
		if (useScan) { pScan->eval(clockCnt); }
		clockCnt++;
	}

#if 0
	// Wait for all writes to SPU complete...
	bool uploadDataBefore = true;
	if (uploadDataBefore) {
		uploadData();
	}

	while (gArrayCurr < gArraySize) {
		mod->i_clk = 1;
		mod->eval();
		processUpload(mod);
		mod->i_clk = 0;
		mod->eval();
//		clockCnt += 2;
	}

	SPUBootSound(!uploadDataBefore,false);
#endif

	// ------------------------------------------------------------------
	// MAIN LOOP
	// ------------------------------------------------------------------
	int waitCount = 0;
// 	int scanFrom = 768 * 270;

	bool scanConstraint = false;

	loader("E:\\ff7-101-the-prelude.spudump");
#define SAMPLE_COUNT	(10)

#ifdef DUMPWAV
	FILE* dumpWav = fopen("e:\\testSimSingleB.wav", "wb");
	write_PCM16_stereo_header(dumpWav, 44100, SAMPLE_COUNT);
#endif

	int StartRecord = 0;

	while ((waitCount < 768* SAMPLE_COUNT)					// If GPU stay in default command wait mode for more than 20 cycle, we stop simulation...
		//	&& (clockCnt < (350*2))			// ADDITION TEST IF GPU GET STUCK TO EXIT : GLOBAL COUNTER.
		) {


		if ((waitCount & 0x1FFFFF) == 0) {
			printf("Output sample : %i\n", (waitCount / 768));
		}

		/*
		if (mod->gpu__DOT__currState == 0) {
			waitCount++; 
		} else {
			waitCount = 0; 
		}*/

		// -----------------------------------------
		//   [REGISTER SETUP OF GPU FROM BUS]
		// -----------------------------------------

		mod->i_clk    = 1;
		mod->eval();

		scanConstraint = waitCount >= StartRecord; // mod->SPU_IF__DOT__SPU_instance__DOT__currVoice >= 24 /* (waitCount > scanFrom)*/
					  /* && (mod->SPU__DOT__PValidSample) */;

#ifdef DUMPWAV
		/*
		if (mod->SPU__DOT__currVoice == 0) { // newSampleReady
			static u16 lastVoice  = 0;
			static u16 lastInterp = 0;
			if (mod->SPU__DOT__newSampleReady) {
				lastVoice = mod->SPU__DOT__sampleOutADPCM;
			}
			if (mod->SPU__DOT__validSampleStage2) {
				lastInterp = mod->SPU__DOT__voiceSample;
			}

			if (mod->SPU__DOT__validSampleStage2) {
				PCM16_stereo_t buffer_p;
				buffer_p.left = mod->SPU__DOT__vxOut;
				buffer_p.right = mod->SPU__DOT__vxOut;
				int ret = fwrite(&buffer_p, sizeof(PCM16_stereo_t), 1, dumpWav);
			}
		}*/
		if (mod->VALIDOUT) { // newSampleReady
			/**
			static u16 lastVoice  = 0;
			static u16 lastInterp = 0;
			if (mod->SPU__DOT__newSampleReady) {
				lastVoice = mod->SPU__DOT__sampleOutADPCM;
			}
			if (mod->SPU__DOT__validSampleStage2) {
				lastInterp = mod->SPU__DOT__voiceSample;
			}
			*/
			PCM16_stereo_t buffer_p;
			buffer_p.left  = mod->AOUTL;
			buffer_p.right = mod->AOUTR;
			// printf("%x\n", mod->SPU__DOT__reg_adpcmCurrAdr[0]);
			int ret = fwrite(&buffer_p, sizeof(PCM16_stereo_t), 1, dumpWav);
		}

#endif

		interpreter(waitCount);
		//processUpload(mod);
#if 0
		if (mod->SPU__DOT__SPU_RAM_FPGAInternal__DOT__i_we) {
			int adr = mod->SPU__DOT__SPU_RAM_FPGAInternal__DOT__i_wordAddr * 2;
			if (adr < 0x1000) {
				int part = adr >> 10;
				switch (part & 3) {
				case 0: printf("CD ROM LEFT (%i)\n", (adr & 0x3FF) >> 1); break;
				case 1: printf("CD ROM RIGT (%i)\n", (adr & 0x3FF) >> 1); break;
				case 2: printf("VOICE1      (%i)\n", (adr & 0x3FF) >> 1); break;
				case 3: printf("VOICE3      (%i)\n", (adr & 0x3FF) >> 1); break;
				}
			} else {
				if (adr < 0x70000) {
					printf("@%x = %x\n", adr, mod->SPU__DOT__SPU_RAM_FPGAInternal__DOT__i_data);
				}
			}
		}
#endif

// Generate VCD if needed

		if (useScan && scanConstraint) {
			pScan->eval(clockCnt);
			clockCnt++;
		}

		//-------------------------------------------------------------------------------------
		// SIMULATED VRAM READ/WRITE
		// Very basic and stupid protocol :
		// Cycle 1. REQ is detected -> We set ACK, and get the number of BURST we want to read.
		// Cycle 2. Read 4 byte until counter reach 0.
		//			Set ACK to ZERO when reach last element.
		//-------------------------------------------------------------------------------------

		mod->i_clk = 0;
		mod->eval();
		if (useScan && scanConstraint) {
			pScan->eval(clockCnt);
			clockCnt++;
		}

#if 0
		int revCounter = mod->SPU_IF__DOT__SPU_instance__DOT__reverbCnt;
		int reg_ReverbEnable = mod->SPU_IF__DOT__SPU_instance__DOT__reg_ReverbEnable;

		if (reg_ReverbEnable && revCounter >= 0 && ((mod->SPU_IF__DOT__SPU_instance__DOT__currVoice6Bit & 0x1F) >= 24)) {
			static bool first = true;
			if (first) {
				first = false;
				for (int adsp = 0; adsp < 262144; adsp++) {
					u16 l = mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramL[adsp];
					u16 m = mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__ramM[adsp];
					
					SPU_SW_RAM[adsp] = l | (m<<8);
				}
			}

			// TO BYTE
			u32 HW_ram_adr = mod->SPU_IF__DOT__SPU_RAM_FPGAInternal__DOT__i_wordAddr << 1;

			bool isRight = (mod->SPU_IF__DOT__SPU_instance__DOT__currVoice6Bit & 0x20) ? true : false;

			#define REG(a)	(mod->SPU_IF__DOT__SPU_instance__DOT__reg_reverb[a])

			SetAdrWork(mod->SPU_IF__DOT__SPU_instance__DOT__reg_mBase,mod->SPU_IF__DOT__SPU_instance__DOT__reverb_CounterWord<<1);

			// Load REG From SPU for SW too.
			const uint32_t dAPF1   = REG(0x00) * 8;
			const uint32_t dAPF2   = REG(0x01) * 8;
			const Sample vIIR      = REG(0x02);
			const Sample vCOMB1    = REG(0x03);
			const Sample vCOMB2    = REG(0x04);
			const Sample vCOMB3    = REG(0x05);
			const Sample vCOMB4    = REG(0x06);
			const Sample vWALL     = REG(0x07);
			const Sample vAPF1     = REG(0x08);
			const Sample vAPF2     = REG(0x09);
			const uint32_t mLSAME  = REG(isRight ? 0x0B : 0x0A) * 8;
			const uint32_t mLCOMB1 = REG(isRight ? 0x0D : 0x0C) * 8;
			const uint32_t mLCOMB2 = REG(isRight ? 0x0F : 0x0E) * 8;
			const uint32_t dLSAME  = REG(isRight ? 0x11 : 0x10) * 8;
			const uint32_t mLDIFF  = REG(isRight ? 0x13 : 0x12) * 8;
			const uint32_t mLCOMB3 = REG(isRight ? 0x15 : 0x14) * 8;
			const uint32_t mLCOMB4 = REG(isRight ? 0x17 : 0x16) * 8;
			const uint32_t dLDIFF  = REG(0x18) * 8;
			const uint32_t dRDIFF  = REG(0x19) * 8;
			const uint32_t mLAPF1  = REG(isRight ? 0x1B : 0x1A) * 8;
			const uint32_t mLAPF2  = REG(isRight ? 0x1D : 0x1C) * 8;
			const Sample      vLIN = REG(isRight ? 0x1F : 0x1E);
		
			Sample input = mod->SPU_IF__DOT__SPU_instance__DOT__lineIn;
			Sample Lout;

			int accReverb = (s16)mod->SPU_IF__DOT__SPU_instance__DOT__accReverb;
			int clampAddC = (s16)mod->SPU_IF__DOT__SPU_instance__DOT__clampedAddC;

			/*
			spu->reverbCurrentAddress = wrap(spu, spu->reverbCurrentAddress + (isRight ? 2:0));

			return std::make_tuple(                  //
				Lout * spu->reverbVolume.getLeft(),  //
				Rout * spu->reverbVolume.getRight()  //
			);
			*/
			static Sample Lin;
			static Sample accSW = 0;
			static Sample mult1 = 0x7FFF;

			switch (revCounter) {
			// Lin = vLin * Sample
			case 0: {
				// printf("Reverb Start... %i %s\n", mod->SPU__DOT__reverb_CounterWord, isRight ? "Right" : "Left");
				Lin = vLIN * input;
				accSW = 0;
				check(HW_ram_adr == Adr(dLSAME));
				check(Lin == clampAddC);
			} break;
			// Wr(mLSAME, (Lin + Rd(dLSAME) * vWALL - Rd(mLSAME - 2)) * vIIR + Rd(mLSAME - 2));
			case 4: {
				accSW = Lin; // * 1.0
				check(HW_ram_adr == Adr(mLSAME - 2));
				check(accReverb == accSW);
				accSW += Rd(dLSAME) * vWALL;
			} break;

			case 8: {
				check(accReverb == accSW);
				check(HW_ram_adr == Adr(mLSAME - 2));
				accSW -= Rd(mLSAME-2);
			} break;
			case 9: {
				accSW *= vIIR;
			} break;

			case 12: {
				check(accReverb == accSW);
				accSW += Rd(mLSAME - 2) * mult1; // * 1.0 but 0.99 !!!
				check(clampAddC == accSW);
			} break;

			case 13: {
				check(HW_ram_adr == Adr(mLSAME));
				check(accReverb == accSW);
				Wr(mLSAME, accSW);
			} break;


			case 14: {
				Rd(mLSAME); // Force CHECK.
			} break;

			// Wr(mLDIFF, (Lin + Rd(dRDIFF) * vWALL - Rd(mLDIFF - 2))* vIIR + Rd(mLDIFF - 2));
			case 17: {
				check(HW_ram_adr == Adr(isRight ? dLDIFF : dRDIFF));
				Lin = vLIN * input;
				accSW = 0;
				check(Lin == clampAddC);
			} break;

			case 21: {
				check(HW_ram_adr == Adr(mLDIFF - 2));
				accSW = Lin; // * 1.0
				check(accReverb == accSW);
				accSW += Rd(isRight ? dLDIFF : dRDIFF) * vWALL;
			} break;

			case 25: {
				check(HW_ram_adr == Adr(mLDIFF - 2));
				check(accReverb == accSW);
				accSW -= Rd(mLDIFF - 2);
			} break;
			case 26: {
				accSW *= vIIR;
			} break;

			case 29: {
				check(accReverb == accSW);
				accSW += Rd(mLDIFF - 2) * mult1; // *1.0 but 0.99 !!!
			} break;
			case 30: {
				// Write
				check(HW_ram_adr == Adr(mLDIFF));
				check(accReverb == accSW);
				Wr(mLDIFF, accSW);
			} break;

			case 31: {
				Rd(mLDIFF); // Force CHECK.
			} break;

			//	Sample Lout = vCOMB1 * Rd(mLCOMB1) + vCOMB2 * Rd(mLCOMB2) + vCOMB3 * Rd(mLCOMB3) + vCOMB4 * Rd(mLCOMB4);
			case 34: {
				check(HW_ram_adr == Adr(mLCOMB1));
			} break;
			case 38: {
				accSW = vCOMB1 * Rd(mLCOMB1);
				check(HW_ram_adr == Adr(mLCOMB2));
			} break;
			case 42: {
				check(accReverb == accSW);
				accSW += vCOMB2 * Rd(mLCOMB2);
				check(HW_ram_adr == Adr(mLCOMB3));
			} break;
			case 46: {
				check(accReverb == accSW);
				accSW += vCOMB3 * Rd(mLCOMB3);
				check(HW_ram_adr == Adr(mLCOMB4));
			} break;

			//	Lout = Lout - (vAPF1 * Rd(mLAPF1 - dAPF1));
			case 50: {
				check(accReverb == accSW);
				accSW += vCOMB4 * Rd(mLCOMB4);
				check(HW_ram_adr == Adr(mLAPF1 - dAPF1));
			} break;
			case 54: {
				check(accReverb == accSW);
				Sample nVAPF1 = (-vAPF1); // TRICKY PART : was making bug !!! Ugh...
				accSW += nVAPF1 * Rd(mLAPF1 - dAPF1);
			} break;

			//	Wr(mLAPF1, Lout);
			case 55: {
				check(accReverb == accSW);
				check(HW_ram_adr == Adr(mLAPF1));
				Wr(mLAPF1, accSW);
			} break;


			case 56: {
				Rd(mLAPF1); // Force CHECK.
			} break;


			//	Lout = Lout * vAPF1 + R(mLAPF1 - dAPF1);
			case 59: {
				accSW = accSW * vAPF1;
				check(HW_ram_adr == Adr(mLAPF1 - dAPF1));
			} break;
			//	Lout = Lout - (vAPF2 * Rd(mLAPF2 - dAPF2));
			case 63: {
				check(accReverb == accSW);
				accSW += Rd(mLAPF1 - dAPF1) * mult1;
				check(HW_ram_adr == Adr(mLAPF2 - dAPF2));
			} break;

			// Added for SW Test.
			case 64: {
				check(accReverb == accSW);
			} break;

			case 67: {
				Sample nVAPF2 = (-vAPF2); // TRICKY PART : was making bug !!! Ugh...
				accSW += nVAPF2 * Rd(mLAPF2 - dAPF2);
				check(((s16)mod->SPU_IF__DOT__SPU_instance__DOT__mulB) == Rd(mLAPF2 - dAPF2));
			} break;
			//	Wr(mLAPF2, Lout);
			case 68: {
				check(accReverb == accSW);
				check(HW_ram_adr == Adr(mLAPF2));
				Wr(mLAPF2, accSW);
			} break;

			case 69: {
				Rd(mLAPF2); // Force CHECK
			} break;

			//	Lout = Lout * vAPF2 + R(mLAPF2 - dAPF2);
			case 72: {
				accSW *= vAPF2;
				check(HW_ram_adr == Adr(mLAPF2 - dAPF2));
			} break;

			case 76: {
				check(accReverb == accSW);
				accSW += Rd(mLAPF2 - dAPF2) * mult1;
			} break;


			case 77: {
				check(accReverb == accSW);
			}
			// CD Rom, counter, send out...
			case 96: {
			} break;
			case 100: {
			} break;
			case 127: {
			} break;
			}

			// Against software implementation using the same READ/WRITE.
			// -> Use copy of the memory for READ/WRITE
			// -> Check differences in READ.
			// => Store all HW stuff in SW, then compare SW at once.
		}
#endif
		// ----
		// PNG SCREEN SHOT PER CYCLE IF NEEDED.
		// ----
		/*
		if (clockCnt % screenShotmoduloSpeed == 0 && useScreenShot) {
			if ((mod->mydebugCnt >= startRange) && (mod->mydebugCnt <= endRange)) {
				static int frameCount = 0;
				frameCount = mod->mydebugCnt;
				char strBuf[100];
				sprintf_s(strBuf,100,"movie/output%i.png",frameCount);
				char strBuf2[100];
				sprintf_s(strBuf2,100,"movie/output%i_msk.png",frameCount);
				dumpFrame(mod, strBuf,strBuf2,buffer,mod->mydebugCnt, useMaskDump);
				frameCount++;
			}
		}*/
		waitCount++;
	}

#ifdef DUMPWAV
	fclose(dumpWav);
#endif

	delete [] buffer;
	pScan->shutdown();
}

u16 readRead(int adr,VCScanner* pScan, int* time) {
	mod->SPUCS   = 1;
	mod->SPUDACK = 0;
	mod->SRD     = 1;
	mod->SWRO    = 0;
	mod->addr	 = adr - 0x1F801C00; // 10 bit.

	mod->i_clk = 0; mod->eval();

	pScan->eval(*time); *time = *time +1;

	mod->i_clk = 1; mod->eval();

	pScan->eval(*time); *time = *time +1;

//	mod->SPUDREQ = 0; --> Output SPU
	mod->SPUCS   = 0;
	mod->SPUDACK = 0;
	mod->SRD     = 0;
	mod->SWRO    = 0;
	mod->addr	 = 0; // 10 bit.
	mod->dataIn	 = 0; // Value = 8192
	return mod->dataOut;
}

void writeReg(int adr, u16 value,VCScanner* pScan, int* time) {
	mod->SPUCS   = 1;
	mod->SPUDACK = 0;
	mod->SRD     = 0;
	mod->SWRO    = 1;
	mod->addr	 = adr - 0x1F801C00; // 10 bit.
	mod->dataIn	 = value; // Value = 8192

	mod->i_clk = 0; mod->eval();

	pScan->eval(*time); *time = *time +1;

	mod->i_clk = 1; mod->eval();

	pScan->eval(*time); *time = *time +1;

//	mod->SPUDREQ = 0; --> Output SPU
	mod->SPUCS   = 0;
	mod->SPUDACK = 0;
	mod->SRD     = 0;
	mod->SWRO    = 0;
	mod->addr	 = 0; // 10 bit.
	mod->dataIn	 = 0; // Value = 8192
}

void validateUpload(VSPU_IF* mod, bool useCPU, VCScanner* pScan, int* time) {

	writeReg(0x1F801DA6,0x0800, pScan, time);					// start adr
	writeReg(0x1F801DAA,0x0004, pScan, time);					// 
	writeReg(0x1F801DAA,0xC000 | (1<<7) | (useCPU ? (1<<4) : (2<<4)), pScan,time);	// DMA Write setup
	int n=0;
	for (n=0; n < 0x1000; ) {
		if (useCPU) {

			u16 status = readRead(0x1F801DAE,pScan,time);
			if (status & (1<<10)) {
				// Wait...
//				printf("%i",status);
			} else {
				printf("%x\n",(0x2000 + n));
				for (int p=0; p<32; p++) {
					writeReg(0x1F801DA8,0x2000+n, pScan, time);					// start adr
					n++;
				}
			}
		} else {
			if (mod->SPUDREQ == 1) {
				mod->SPUDACK = 1;
				mod->dataIn  = 0x2000+n;
				n++;
			} else {
				mod->dataIn  = 0;
				mod->SPUDACK = 0;
			}
		}
		mod->i_clk = 0; mod->eval();
		pScan->eval(*time); *time = *time +1;

		mod->i_clk = 1; mod->eval();
		pScan->eval(*time); *time = *time +1;
	}

	for (int n=0; n < 1500; n++) {
		mod->i_clk = 0; mod->eval();
		pScan->eval(*time); *time = *time +1;
		mod->i_clk = 1; mod->eval();
		pScan->eval(*time); *time = *time +1;
	}
}

void validateDownload(VSPU_IF* mod, VCScanner* pScan, int* time) {
	validateUpload(mod, false, pScan, time);

	// Download
	writeReg(0x1F801DA6,0x0800, pScan, time);					// start adr
	writeReg(0x1F801DAA,0x0004, pScan, time);					// 
	writeReg(0x1F801DAA,0xC000 | (1<<7) | (3<<4), pScan,time);	// DMA Write setup

	int n=0;
	mod->SPUDACK = 0;

	for (n=0; n < 0x1000; ) {
		bool hadReq = (mod->SPUDREQ == 1);
		if (hadReq) {
			printf("%i->%i\n",0x2000+n, mod->dataOut);
			n++;
		} else {
			mod->dataIn  = 0;
		}

		mod->i_clk = 0; mod->eval();
		pScan->eval(*time); *time = *time +1;

		mod->i_clk = 1; mod->eval();
		pScan->eval(*time); *time = *time +1;

		mod->SPUDACK = (hadReq) ? 1 : 0;
	}

	pScan->shutdown();


}

void processUpload(VSPU_IF* mod) {
	mod->SPUCS = 0;
	mod->SPUDREQ = 0;
	mod->SPUDACK = 0;
	mod->SRD = 0;
	mod->SWRO = 0;
	mod->addr = 0; // 10 bit.
	mod->dataIn = 0;

	// Push command inside the GPU as long as the GPU FIFO are not full
	// and as long as we have command to push...
	if (gArrayCurr < gArraySize) {
		if (!gWait) {
			if (gArray[gArrayCurr].isWait) {
				// Switch to wait mode
				gWaitCounter = 10; // Wait 200 clock.
				gWait = true;
				gArrayCurr++;
			} else {
				if (!mod->SPU_IF__DOT__SPU_instance__DOT__dataTransferBusy) {
					if (gWaitCounter == 0) {
						mod->SPUCS = 1;
						mod->SWRO = 1;
						mod->addr = gArray[gArrayCurr].addr;
						mod->dataIn = gArray[gArrayCurr].value;
						//							printf("Send Command : %s (%x) = %x\n", gArray[gArrayCurr].str, mod->addr, mod->dataIn);
						gArrayCurr++;
						gWaitCounter = 2;
					}
					gWaitCounter--;
				} else {
					//						printf("WAIT END OF TRANSFER");
				}
			}
		} else {
			gWaitCounter--;
			if (gWaitCounter == 1) { gWait = false; }
		}
		
	} /* else {
		if (waitCount == 75000 * 768) {
			mod->SPUCS = 1;
			mod->SWRO = 1;
			mod->addr = 0x18C;
			mod->dataIn = 0x0F;
		}
	} */
	mod->eval(); // THIS FUCKING SINGLE LINE FIX THE FUCKED UP SIM.... SIGH....
}

void WRSPU(int adrLocal, int value, int sizeWord, const char* regName) {
	gArray[gArraySize].isWait = false;
	gArray[gArraySize].addr  = adrLocal;
	gArray[gArraySize].value = value;
	gArray[gArraySize].str = regName;
	gArraySize++;
}

void WAITFIFO() {
	gArray[gArraySize].isWait = true;
	gArraySize++;
}

#include <stdarg.h>
void FIFO(int num,...) {
	va_list valist;
	
	/* initialize valist for num number of arguments */
	va_start(valist, num);

	WAITFIFO();

	static int filler = 128;

	/* access all the arguments assigned to valist */
	/*
	if (num == 32) {
		for (int i = 0; i < num; i++) {
			WRSPU(0x1A8, filler, 2, "FIFO");
		}
		filler++;
		if (filler > 255) {
			filler = 128;
		}
	} else {
	*/
		for (int i = 0; i < num; i++) {
			WRSPU(0x1A8, va_arg(valist, int), 2, "FIFO");
		}
	/*
	}
	*/

	/* clean memory reserved for valist */
	va_end(valist);
}

// Predefinition.
void fillReverbZero();

void SPUBootSound(bool uploadSamples, bool fillZeros) {
	WRSPU(0x180, 0xFFFF, 2, "MAIN VOL L(-1)");
	WRSPU(0x182, 0xCCCC, 2, "MAIN VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x1aa, 0x8000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x180, 0x0, 2, "MAIN VOL L(-1)");
	WRSPU(0x182, 0x0, 2, "MAIN VOL R(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
//	WRSPU(0x18c, 0xffff, 2, "KEY OFF LO(-1)");
//	WRSPU(0x18e, 0xffff, 2, "KEY OFF HI(-1)");
	WRSPU(0x190, 0x0, 2, "PMON LO(-1)");
	WRSPU(0x192, 0x0, 2, "PMON HI(-1)");
	WRSPU(0x194, 0x0, 2, "NON LO(-1)");
	WRSPU(0x196, 0x0, 2, "NON HI(-1)");
	WRSPU(0x198, 0x0, 2, "EON LO(-1)");
	WRSPU(0x19a, 0x0, 2, "EON HI(-1)");
	WRSPU(0x1b0, 0x0, 2, "CD AUDIO INPUT VOL L(-1)");
	WRSPU(0x1b2, 0x0, 2, "CD AUDIO INPUT VOL R(-1)");
	WRSPU(0x1b4, 0x0, 2, "EXT AUDIO INPUT VOL L(-1)");
	WRSPU(0x1b6, 0x0, 2, "EXT AUDIO INPUT VOL R(-1)");
	WRSPU(0x1ac, 0x4, 2, "DATA XFER CTRL MODE(-1)");
	WRSPU(0x1a6, 0x200, 2, "DATA XFER ADR(-1)");

	FIFO(8, 0x707 , 0x707 , 0x707 , 0x707 , 0x707 , 0x707 , 0x707 , 0x707 );
//	FIFO(8, 0xAAAA, 0xBBBB, 0xCCCC, 0xDDDD, 0xEEEE, 0xFFFF, 0x1111, 0x2222);
	WRSPU(0x1aa, 0xFFFF, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0x8000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x0, 0x0, 2, "CH VOL L(0)");
	WRSPU(0x2, 0x0, 2, "CH VOL R(0)");
	WRSPU(0x4, 0x3fff, 2, "CH PITCH(0)");
	WRSPU(0x8, 0x0, 2, "CH ADSR LO(0)");
	WRSPU(0xa, 0x0, 2, "CH ADSR HI(0)");
	WRSPU(0x6, 0x200, 2, "CH START ADR(0)");
	WRSPU(0x10, 0x0, 2, "CH VOL L(1)");
	WRSPU(0x12, 0x0, 2, "CH VOL R(1)");
	WRSPU(0x14, 0x3fff, 2, "CH PITCH(1)");
	WRSPU(0x18, 0x0, 2, "CH ADSR LO(1)");
	WRSPU(0x1a, 0x0, 2, "CH ADSR HI(1)");
	WRSPU(0x16, 0x200, 2, "CH START ADR(1)");
	WRSPU(0x20, 0x0, 2, "CH VOL L(2)");
	WRSPU(0x22, 0x0, 2, "CH VOL R(2)");
	WRSPU(0x24, 0x3fff, 2, "CH PITCH(2)");
	WRSPU(0x28, 0x0, 2, "CH ADSR LO(2)");
	WRSPU(0x2a, 0x0, 2, "CH ADSR HI(2)");
	WRSPU(0x26, 0x200, 2, "CH START ADR(2)");
	WRSPU(0x30, 0x0, 2, "CH VOL L(3)");
	WRSPU(0x32, 0x0, 2, "CH VOL R(3)");
	WRSPU(0x34, 0x3fff, 2, "CH PITCH(3)");
	WRSPU(0x38, 0x0, 2, "CH ADSR LO(3)");
	WRSPU(0x3a, 0x0, 2, "CH ADSR HI(3)");
	WRSPU(0x36, 0x200, 2, "CH START ADR(3)");
	WRSPU(0x40, 0x0, 2, "CH VOL L(4)");
	WRSPU(0x42, 0x0, 2, "CH VOL R(4)");
	WRSPU(0x44, 0x3fff, 2, "CH PITCH(4)");
	WRSPU(0x48, 0x0, 2, "CH ADSR LO(4)");
	WRSPU(0x4a, 0x0, 2, "CH ADSR HI(4)");
	WRSPU(0x46, 0x200, 2, "CH START ADR(4)");
	WRSPU(0x50, 0x0, 2, "CH VOL L(5)");
	WRSPU(0x52, 0x0, 2, "CH VOL R(5)");
	WRSPU(0x54, 0x3fff, 2, "CH PITCH(5)");
	WRSPU(0x58, 0x0, 2, "CH ADSR LO(5)");
	WRSPU(0x5a, 0x0, 2, "CH ADSR HI(5)");
	WRSPU(0x56, 0x200, 2, "CH START ADR(5)");
	WRSPU(0x60, 0x0, 2, "CH VOL L(6)");
	WRSPU(0x62, 0x0, 2, "CH VOL R(6)");
	WRSPU(0x64, 0x3fff, 2, "CH PITCH(6)");
	WRSPU(0x68, 0x0, 2, "CH ADSR LO(6)");
	WRSPU(0x6a, 0x0, 2, "CH ADSR HI(6)");
	WRSPU(0x66, 0x200, 2, "CH START ADR(6)");
	WRSPU(0x70, 0x0, 2, "CH VOL L(7)");
	WRSPU(0x72, 0x0, 2, "CH VOL R(7)");
	WRSPU(0x74, 0x3fff, 2, "CH PITCH(7)");
	WRSPU(0x78, 0x0, 2, "CH ADSR LO(7)");
	WRSPU(0x7a, 0x0, 2, "CH ADSR HI(7)");
	WRSPU(0x76, 0x200, 2, "CH START ADR(7)");
	WRSPU(0x80, 0x0, 2, "CH VOL L(8)");
	WRSPU(0x82, 0x0, 2, "CH VOL R(8)");
	WRSPU(0x84, 0x3fff, 2, "CH PITCH(8)");
	WRSPU(0x88, 0x0, 2, "CH ADSR LO(8)");
	WRSPU(0x8a, 0x0, 2, "CH ADSR HI(8)");
	WRSPU(0x86, 0x200, 2, "CH START ADR(8)");
	WRSPU(0x90, 0x0, 2, "CH VOL L(9)");
	WRSPU(0x92, 0x0, 2, "CH VOL R(9)");
	WRSPU(0x94, 0x3fff, 2, "CH PITCH(9)");
	WRSPU(0x98, 0x0, 2, "CH ADSR LO(9)");
	WRSPU(0x9a, 0x0, 2, "CH ADSR HI(9)");
	WRSPU(0x96, 0x200, 2, "CH START ADR(9)");
	WRSPU(0xa0, 0x0, 2, "CH VOL L(10)");
	WRSPU(0xa2, 0x0, 2, "CH VOL R(10)");
	WRSPU(0xa4, 0x3fff, 2, "CH PITCH(10)");
	WRSPU(0xa8, 0x0, 2, "CH ADSR LO(10)");
	WRSPU(0xaa, 0x0, 2, "CH ADSR HI(10)");
	WRSPU(0xa6, 0x200, 2, "CH START ADR(10)");
	WRSPU(0xb0, 0x0, 2, "CH VOL L(11)");
	WRSPU(0xb2, 0x0, 2, "CH VOL R(11)");
	WRSPU(0xb4, 0x3fff, 2, "CH PITCH(11)");
	WRSPU(0xb8, 0x0, 2, "CH ADSR LO(11)");
	WRSPU(0xba, 0x0, 2, "CH ADSR HI(11)");
	WRSPU(0xb6, 0x200, 2, "CH START ADR(11)");
	WRSPU(0xc0, 0x0, 2, "CH VOL L(12)");
	WRSPU(0xc2, 0x0, 2, "CH VOL R(12)");
	WRSPU(0xc4, 0x3fff, 2, "CH PITCH(12)");
	WRSPU(0xc8, 0x0, 2, "CH ADSR LO(12)");
	WRSPU(0xca, 0x0, 2, "CH ADSR HI(12)");
	WRSPU(0xc6, 0x200, 2, "CH START ADR(12)");
	WRSPU(0xd0, 0x0, 2, "CH VOL L(13)");
	WRSPU(0xd2, 0x0, 2, "CH VOL R(13)");
	WRSPU(0xd4, 0x3fff, 2, "CH PITCH(13)");
	WRSPU(0xd8, 0x0, 2, "CH ADSR LO(13)");
	WRSPU(0xda, 0x0, 2, "CH ADSR HI(13)");
	WRSPU(0xd6, 0x200, 2, "CH START ADR(13)");
	WRSPU(0xe0, 0x0, 2, "CH VOL L(14)");
	WRSPU(0xe2, 0x0, 2, "CH VOL R(14)");
	WRSPU(0xe4, 0x3fff, 2, "CH PITCH(14)");
	WRSPU(0xe8, 0x0, 2, "CH ADSR LO(14)");
	WRSPU(0xea, 0x0, 2, "CH ADSR HI(14)");
	WRSPU(0xe6, 0x200, 2, "CH START ADR(14)");
	WRSPU(0xf0, 0x0, 2, "CH VOL L(15)");
	WRSPU(0xf2, 0x0, 2, "CH VOL R(15)");
	WRSPU(0xf4, 0x3fff, 2, "CH PITCH(15)");
	WRSPU(0xf8, 0x0, 2, "CH ADSR LO(15)");
	WRSPU(0xfa, 0x0, 2, "CH ADSR HI(15)");
	WRSPU(0xf6, 0x200, 2, "CH START ADR(15)");
	WRSPU(0x100, 0x0, 2, "CH VOL L(16)");
	WRSPU(0x102, 0x0, 2, "CH VOL R(16)");
	WRSPU(0x104, 0x3fff, 2, "CH PITCH(16)");
	WRSPU(0x108, 0x0, 2, "CH ADSR LO(16)");
	WRSPU(0x10a, 0x0, 2, "CH ADSR HI(16)");
	WRSPU(0x106, 0x200, 2, "CH START ADR(16)");
	WRSPU(0x110, 0x0, 2, "CH VOL L(17)");
	WRSPU(0x112, 0x0, 2, "CH VOL R(17)");
	WRSPU(0x114, 0x3fff, 2, "CH PITCH(17)");
	WRSPU(0x118, 0x0, 2, "CH ADSR LO(17)");
	WRSPU(0x11a, 0x0, 2, "CH ADSR HI(17)");
	WRSPU(0x116, 0x200, 2, "CH START ADR(17)");
	WRSPU(0x120, 0x0, 2, "CH VOL L(18)");
	WRSPU(0x122, 0x0, 2, "CH VOL R(18)");
	WRSPU(0x124, 0x3fff, 2, "CH PITCH(18)");
	WRSPU(0x128, 0x0, 2, "CH ADSR LO(18)");
	WRSPU(0x12a, 0x0, 2, "CH ADSR HI(18)");
	WRSPU(0x126, 0x200, 2, "CH START ADR(18)");
	WRSPU(0x130, 0x0, 2, "CH VOL L(19)");
	WRSPU(0x132, 0x0, 2, "CH VOL R(19)");
	WRSPU(0x134, 0x3fff, 2, "CH PITCH(19)");
	WRSPU(0x138, 0x0, 2, "CH ADSR LO(19)");
	WRSPU(0x13a, 0x0, 2, "CH ADSR HI(19)");
	WRSPU(0x136, 0x200, 2, "CH START ADR(19)");
	WRSPU(0x140, 0x0, 2, "CH VOL L(20)");
	WRSPU(0x142, 0x0, 2, "CH VOL R(20)");
	WRSPU(0x144, 0x3fff, 2, "CH PITCH(20)");
	WRSPU(0x148, 0x0, 2, "CH ADSR LO(20)");
	WRSPU(0x14a, 0x0, 2, "CH ADSR HI(20)");
	WRSPU(0x146, 0x200, 2, "CH START ADR(20)");
	WRSPU(0x150, 0x0, 2, "CH VOL L(21)");
	WRSPU(0x152, 0x0, 2, "CH VOL R(21)");
	WRSPU(0x154, 0x3fff, 2, "CH PITCH(21)");
	WRSPU(0x158, 0x0, 2, "CH ADSR LO(21)");
	WRSPU(0x15a, 0x0, 2, "CH ADSR HI(21)");
	WRSPU(0x156, 0x200, 2, "CH START ADR(21)");
	WRSPU(0x160, 0x0, 2, "CH VOL L(22)");
	WRSPU(0x162, 0x0, 2, "CH VOL R(22)");
	WRSPU(0x164, 0x3fff, 2, "CH PITCH(22)");
	WRSPU(0x168, 0x0, 2, "CH ADSR LO(22)");
	WRSPU(0x16a, 0x0, 2, "CH ADSR HI(22)");
	WRSPU(0x166, 0x200, 2, "CH START ADR(22)");
	WRSPU(0x170, 0x0, 2, "CH VOL L(23)");
	WRSPU(0x172, 0x0, 2, "CH VOL R(23)");
	WRSPU(0x174, 0x3fff, 2, "CH PITCH(23)");
	WRSPU(0x178, 0x0, 2, "CH ADSR LO(23)");
	WRSPU(0x17a, 0x0, 2, "CH ADSR HI(23)");
	WRSPU(0x176, 0x200, 2, "CH START ADR(23)");
//	WRSPU(0x188, 0xffff, 2, "KEY ON LO(-1)");
//	WRSPU(0x18a, 0xff, 2, "KEY ON HI(-1)");
//	WRSPU(0x18c, 0xffff, 2, "KEY OFF LO(-1)");
//	WRSPU(0x18e, 0xffff, 2, "KEY OFF HI(-1)");

	if (fillZeros) {
		fillReverbZero();
	}

	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a2, 0xe128, 2, "REVERB WORK AREA START(-1)");
	WRSPU(0x184, 0x0, 2, "REVERB VOL L(-1)");
	WRSPU(0x186, 0x0, 2, "REVERB VOL R(-1)");
	WRSPU(0x1c0, 0x33d, 2, "REVERB SET(-1)");
	WRSPU(0x1c2, 0x231, 2, "REVERB SET(-1)");
	WRSPU(0x1c4, 0x7e00, 2, "REVERB SET(-1)");
	WRSPU(0x1c6, 0x5000, 2, "REVERB SET(-1)");
	WRSPU(0x1c8, 0xb400, 2, "REVERB SET(-1)");
	WRSPU(0x1ca, 0xb000, 2, "REVERB SET(-1)");
	WRSPU(0x1cc, 0x4c00, 2, "REVERB SET(-1)");
	WRSPU(0x1ce, 0xb000, 2, "REVERB SET(-1)");
	WRSPU(0x1d0, 0x6000, 2, "REVERB SET(-1)");
	WRSPU(0x1d2, 0x5400, 2, "REVERB SET(-1)");
	WRSPU(0x1d4, 0x1ed6, 2, "REVERB SET(-1)");
	WRSPU(0x1d6, 0x1a31, 2, "REVERB SET(-1)");
	WRSPU(0x1d8, 0x1d14, 2, "REVERB SET(-1)");
	WRSPU(0x1da, 0x183b, 2, "REVERB SET(-1)");
	WRSPU(0x1dc, 0x1bc2, 2, "REVERB SET(-1)");
	WRSPU(0x1de, 0x16b2, 2, "REVERB SET(-1)");
	WRSPU(0x1e0, 0x1a32, 2, "REVERB SET(-1)");
	WRSPU(0x1e2, 0x15ef, 2, "REVERB SET(-1)");
	WRSPU(0x1e4, 0x15ee, 2, "REVERB SET(-1)");
	WRSPU(0x1e6, 0x1055, 2, "REVERB SET(-1)");
	WRSPU(0x1e8, 0x1334, 2, "REVERB SET(-1)");
	WRSPU(0x1ea, 0xf2d, 2, "REVERB SET(-1)");
	WRSPU(0x1ec, 0x11f6, 2, "REVERB SET(-1)");
	WRSPU(0x1ee, 0xc5d, 2, "REVERB SET(-1)");
	WRSPU(0x1f0, 0x1056, 2, "REVERB SET(-1)");
	WRSPU(0x1f2, 0xae1, 2, "REVERB SET(-1)");
	WRSPU(0x1f4, 0xae0, 2, "REVERB SET(-1)");
	WRSPU(0x1f6, 0x7a2, 2, "REVERB SET(-1)");
	WRSPU(0x1f8, 0x464, 2, "REVERB SET(-1)");
	WRSPU(0x1fa, 0x232, 2, "REVERB SET(-1)");
	WRSPU(0x1fc, 0x8000, 2, "REVERB SET(-1)");
	WRSPU(0x1fe, 0x8000, 2, "REVERB SET(-1)");
	WRSPU(0x1aa, 0xc080, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x180, 0x3fff, 2, "MAIN VOL L(-1)");
	WRSPU(0x182, 0x37ef, 2, "MAIN VOL R(-1)");
	WRSPU(0x1b0, 0x0, 2, "CD AUDIO INPUT VOL L(-1)");
	WRSPU(0x1b2, 0x0, 2, "CD AUDIO INPUT VOL R(-1)");
	WRSPU(0x1b4, 0x0, 2, "EXT AUDIO INPUT VOL L(-1)");
	WRSPU(0x1b6, 0x0, 2, "EXT AUDIO INPUT VOL R(-1)");

	if (uploadSamples) {
		uploadData();
	}

	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc001, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x184, 0x5ebc, 2, "REVERB VOL L(-1)");
	WRSPU(0x186, 0x5ebc, 2, "REVERB VOL R(-1)");
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
WRSPU(0x6, 0xc28, 2, "CH START ADR(0)");
	WRSPU(0x8, 0x8088, 2, "CH ADSR LO(0)");
	WRSPU(0xa, 0xdff1, 2, "CH ADSR HI(0)");
WRSPU(0x4, 0x400, 2, "CH PITCH(0)");		// 0x400
	WRSPU(0x0, 0x2171, 2, "CH VOL L(0)");
	WRSPU(0x2, 0x0, 2, "CH VOL R(0)");
WRSPU(0x16, 0xc28, 2, "CH START ADR(1)");
	WRSPU(0x18, 0x8087, 2, "CH ADSR LO(1)");
	WRSPU(0x1a, 0xdff1, 2, "CH ADSR HI(1)");
	WRSPU(0x14, 0x407, 2, "CH PITCH(1)");
	WRSPU(0x10, 0x0, 2, "CH VOL L(1)");
	WRSPU(0x12, 0x3fff, 2, "CH VOL R(1)");
WRSPU(0x26, 0xc28, 2, "CH START ADR(2)");
	WRSPU(0x28, 0x8088, 2, "CH ADSR LO(2)");
	WRSPU(0x2a, 0xdff1, 2, "CH ADSR HI(2)");
	WRSPU(0x24, 0x800, 2, "CH PITCH(2)");
	WRSPU(0x20, 0x99c, 2, "CH VOL L(2)");
	WRSPU(0x22, 0x0, 2, "CH VOL R(2)");
WRSPU(0x36, 0xc28, 2, "CH START ADR(3)");
	WRSPU(0x38, 0x8087, 2, "CH ADSR LO(3)");
	WRSPU(0x3a, 0xdff1, 2, "CH ADSR HI(3)");
	WRSPU(0x34, 0x80e, 2, "CH PITCH(3)");
	WRSPU(0x30, 0x0, 2, "CH VOL L(3)");
	WRSPU(0x32, 0x594, 2, "CH VOL R(3)");
	WRSPU(0x18c, 0x0, 2, "KEY OFF LO(-1)");
	WRSPU(0x18e, 0x291, 2, "KEY OFF HI(-1)");
	WRSPU(0x188, 0xf, 2, "KEY ON LO(-1)");
	WRSPU(0x18a, 0x0, 2, "KEY ON HI(-1)");
	WRSPU(0x198, 0xf, 2, "EON LO(-1)");
	WRSPU(0x19a, 0x0, 2, "EON HI(-1)");
}

void fillReverbZero() {
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe000, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe000, 2, "DATA XFER ADR(-1)");
	FIFO(32, 0x0, 0x0, 0x0, 0x0,
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0, 
		 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
		    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe200, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe200, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe400, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe400, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe600, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe600, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe800, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xe800, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xea00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xea00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xec00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xec00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xee00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xee00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf000, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf000, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf200, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf200, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf400, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf400, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf600, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf600, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf800, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xf800, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfa00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfa00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfc00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfc00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfe00, 2, "DATA XFER ADR(-1)");
	WRSPU(0x1aa, 0xc000, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0xfe00, 2, "DATA XFER ADR(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc010, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	FIFO(32,0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
}

void uploadData() {
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1aa, 0xc081, 2, "SPU CONTROL REG (SPUCNT)(-1)");
	WRSPU(0x1a6, 0x200, 2, "DATA XFER ADR(-1)");
	FIFO/*1000*/(32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202, 0x0, 0x0, 0x0, 0xff, 0x400f, 0xcfe3, 0x1030, 0x201, 0x21, 0xfbd, 0x1043, 0xbfe0, 0x302d, 0xdf12, 0xdffe, 0x201, 0xf051, 0xb031, 0x10ea, 0xf054, 0x9fef, 0x2060, 0xc021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12722825] cycle (D:8)
	FIFO/*1040*/(32, 0x200, 0xfed, 0xf042, 0xdf0f, 0x101f, 0xe022, 0xdf0f, 0x30, 0x200, 0xd021, 0xffd, 0xf042, 0xcf00, 0x101f, 0xe032, 0xeffe, 0x200, 0x41, 0xcf11, 0x100d, 0xe033, 0xdf0f, 0x20, 0xdf32, 0x200, 0xff0e, 0xf042, 0xdf10, 0x1f, 0xe032, 0xdf0f, 0x102f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12732433] cycle (D:8)
	FIFO/*1080*/(32, 0x200, 0xdf22, 0xff0e, 0xf042, 0xcf10, 0x101e, 0xd033, 0xef0f, 0x200, 0x1030, 0xdf22, 0xffe, 0xf043, 0xdf0f, 0x102f, 0xdf22, 0x200, 0xef0f, 0x41, 0xdf01, 0xf, 0xf032, 0xdf00, 0x1020, 0x200, 0xef22, 0xefff, 0x42, 0xcf11, 0xf, 0xe043, 0xdfff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12742041] cycle (D:8)
	FIFO/*10c0*/(32, 0x200, 0x1030, 0xdf12, 0xffff, 0xf043, 0xdf00, 0x1010, 0xe033, 0x200, 0xdfff, 0x41, 0xdf11, 0xf0f, 0xf043, 0xdf00, 0x1010, 0x200, 0xdf33, 0xefff, 0x32, 0xdf11, 0xf0f, 0xf033, 0xdff0, 0x200, 0x1021, 0xdf23, 0xffff, 0x43, 0xdf01, 0x1010, 0xef33);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12751649] cycle (D:8)
	FIFO/*1100*/(32, 0x201, 0xcfef, 0x1053, 0xaf25, 0xff0f, 0xf066, 0xaf02, 0x202f, 0x200, 0xef23, 0xeff0, 0x1031, 0xdf12, 0xfff, 0xf033, 0xdff0, 0x201, 0x3031, 0xbf47, 0xefef, 0x1065, 0xaf03, 0x2f0f, 0xef57, 0x201, 0xbfe0, 0x3031, 0xbf26, 0xffef, 0x1065, 0xbff2, 0x2f10);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12761257] cycle (D:8)
	FIFO/*1140*/(32, 0x200, 0xff23, 0xeff0, 0x1021, 0xef13, 0xfff, 0x33, 0xdff1, 0x200, 0x2010, 0xef24, 0xffef, 0x1032, 0xeff2, 0x1f00, 0x23, 0x201, 0xdfd0, 0x2022, 0xdf25, 0xffd0, 0x2045, 0xcff3, 0x2fef, 0x200, 0xf024, 0xefe0, 0x2011, 0xef13, 0xfef, 0x1023, 0xeff1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12770865] cycle (D:8)
	FIFO/*1180*/(32, 0x201, 0x3f00, 0xef37, 0xefcf, 0x3034, 0xcf04, 0x2fdf, 0x47, 0x201, 0xdfd1, 0x4001, 0xef26, 0xfdf, 0x3023, 0xdff4, 0x2fef, 0x201, 0x1036, 0xdfd1, 0x5001, 0xef26, 0xfbe, 0x3045, 0xcfd2, 0x201, 0x4fef, 0xff37, 0xffbf, 0x4022, 0xdff4, 0x2fdf, 0x3024);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12780473] cycle (D:8)
	FIFO/*11c0*/(32, 0x201, 0xdfd2, 0x40f0, 0xf15, 0xffcf, 0x4012, 0xeff4, 0x2fce, 0x201, 0x2035, 0xefc1, 0x50f0, 0xff15, 0xfbe, 0x5023, 0xdfe3, 0x201, 0x4fde, 0x1025, 0xefb0, 0x5011, 0xeff4, 0x2fce, 0x3024, 0x201, 0xefc1, 0x40e0, 0x1014, 0xfbf, 0x4002, 0xff04, 0x2fbe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12790081] cycle (D:8)
	FIFO/*1200*/(32, 0x201, 0x4024, 0xdfc1, 0x50ef, 0x25, 0xfae, 0x5022, 0xdfe3, 0x201, 0x4fdd, 0x2025, 0xffbf, 0x5000, 0xff04, 0x2fbd, 0x3013, 0x201, 0xefe2, 0x40de, 0x2024, 0xffbf, 0x5000, 0xff03, 0x2fbd, 0x201, 0x4023, 0xdfd2, 0x40ee, 0x1024, 0xfae, 0x5011, 0xdf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12799689] cycle (D:8)
	FIFO/*1240*/(32, 0x201, 0x4fbc, 0x3024, 0xefc0, 0x50fe, 0xf014, 0x2fbd, 0x4012, 0x201, 0xefe1, 0x30dd, 0x3012, 0xefc0, 0x40ff, 0x3, 0x1fad, 0x201, 0x5012, 0xdfe2, 0x50dc, 0x2024, 0xffbe, 0x5010, 0xeff3, 0x201, 0x3fbc, 0x3013, 0xefc0, 0x40fe, 0x1002, 0xfbe, 0x4011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12809297] cycle (D:8)
	FIFO/*1280*/(32, 0x201, 0xfff1, 0x30cd, 0x3012, 0xefc0, 0x40fe, 0x1012, 0xfbd, 0x201, 0x4011, 0xdff2, 0x40cb, 0x2023, 0xefbf, 0x501f, 0xf002, 0x201, 0x2fac, 0x3033, 0xefdf, 0x40ed, 0x1012, 0xfbd, 0x3010, 0x201, 0xf001, 0x2fcc, 0x3012, 0xdfe0, 0x40ec, 0x1012, 0xffbd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12818905] cycle (D:8)
	FIFO/*12c0*/(32, 0x201, 0x4020, 0xef01, 0x30cb, 0x2033, 0xefce, 0x400e, 0xf012, 0x201, 0x1fab, 0x3022, 0xdff0, 0x40db, 0x1012, 0xefce, 0x401e, 0x201, 0xf001, 0x2fcc, 0x3011, 0xdff0, 0x40ec, 0x1022, 0xefce, 0x201, 0x401f, 0xe012, 0x2fbb, 0x3033, 0xcfdf, 0x50fc, 0x12);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12828513] cycle (D:8)
	FIFO/*1300*/(32, 0x201, 0xfbc, 0x4021, 0xdfe0, 0x30ec, 0x2012, 0xdfdf, 0x400e, 0x201, 0x1, 0xfbc, 0x3021, 0xdff0, 0x30db, 0x1022, 0xdfce, 0x201, 0x401e, 0xe001, 0x1fcb, 0x3032, 0xcfe0, 0x40fc, 0x22, 0x201, 0xefbd, 0x3030, 0xe0f0, 0x30cb, 0x1033, 0xefee, 0x300d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12838121] cycle (D:8)
	FIFO/*1340*/(32, 0x201, 0x12, 0xffcd, 0x2020, 0xe000, 0x20db, 0x1032, 0xcfdf, 0x201, 0x401d, 0xf012, 0xfbb, 0x2042, 0xcfff, 0x40eb, 0xf033, 0x201, 0xefdd, 0x302f, 0xe011, 0x20db, 0x1032, 0xcfff, 0x30fc, 0x201, 0x22, 0xefdd, 0x302f, 0xd001, 0x10db, 0x1032, 0xcfef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12847729] cycle (D:8)
	FIFO/*1380*/(32, 0x201, 0x400c, 0xf022, 0xffcc, 0x3030, 0xcf01, 0x30eb, 0x33, 0x201, 0xcfde, 0x402e, 0xe001, 0xfdc, 0x1031, 0xdfff, 0x20fd, 0x201, 0x21, 0xdfee, 0x302e, 0xe011, 0xfdc, 0x2042, 0xcff0, 0x201, 0x40fc, 0xf023, 0xefcd, 0x3040, 0xdff0, 0x20ec, 0x43);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12857337] cycle (D:8)
	FIFO/*13c0*/(32, 0x201, 0xdfee, 0x301e, 0xe022, 0xffdd, 0x1041, 0xdf00, 0x20ec, 0x201, 0x33, 0xdfee, 0x301e, 0xe022, 0xffdc, 0x1042, 0xcff0, 0x201, 0x20fc, 0xf043, 0xdfdd, 0x3030, 0xcf12, 0x1fdb, 0x43, 0x201, 0xdfee, 0x300d, 0xe023, 0xffed, 0x2030, 0xdf11, 0x10ec);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12866945] cycle (D:8)
	FIFO/*1400*/(32, 0x201, 0x32, 0xcfff, 0x301d, 0xe023, 0xffdd, 0x2041, 0xcf00, 0x201, 0x20fc, 0xf043, 0xdfee, 0x302f, 0xdf12, 0xfec, 0x1032, 0x201, 0xcff0, 0x300d, 0xe033, 0xefed, 0x2030, 0xdf01, 0xfed, 0x201, 0x1042, 0xcfef, 0x200e, 0xf033, 0xefdd, 0x3030, 0xcf02);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12876553] cycle (D:8)
	FIFO/*1440*/(32, 0x201, 0x10ec, 0x1043, 0xcfde, 0x402e, 0xdf13, 0xfdc, 0x1042, 0x202, 0xafdf, 0x30fc, 0xe076, 0xcfbb, 0x4040, 0xbf34, 0xffba, 0x201, 0x1042, 0xcff0, 0x20fd, 0xf033, 0xdfde, 0x3030, 0xcf12, 0x201, 0x1fec, 0x43, 0xdfef, 0x300e, 0xd034, 0xffdc, 0x2042);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12886161] cycle (D:8)
	FIFO/*1480*/(32, 0x201, 0xcf01, 0x20fd, 0xf044, 0xdfee, 0x301f, 0xdf23, 0xffed, 0x201, 0x2031, 0xcf01, 0x20fd, 0x43, 0xdfde, 0x402f, 0xcf24, 0x201, 0x1fdc, 0x1043, 0xcfe0, 0x300e, 0xe034, 0xffdd, 0x3031, 0x201, 0xcf02, 0x10fd, 0x1032, 0xdfe0, 0x201f, 0xe023, 0xefde);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12895769] cycle (D:8)
	FIFO/*14c0*/(32, 0x201, 0x3031, 0xcf02, 0x20ed, 0x43, 0xdfde, 0x301f, 0xdf24, 0x201, 0xfdc, 0x3042, 0xcfe1, 0x200e, 0xf043, 0xefcd, 0x3031, 0x201, 0xbf02, 0xfd, 0x1052, 0xffad, 0x1042, 0xef01, 0x30dd, 0x201, 0x1003, 0xdf01, 0x20fd, 0x2021, 0xf9c, 0x4021, 0xcff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12905377] cycle (D:8)
	FIFO/*1500*/(32, 0x201, 0x30eb, 0x1022, 0xfad, 0x3021, 0xf001, 0x30cc, 0x2022, 0x201, 0xdfef, 0x50ec, 0x12, 0x1fbb, 0x3011, 0xf0f0, 0x20dc, 0x201, 0x3010, 0xffce, 0x40fe, 0x1001, 0x1fbc, 0x3011, 0xe0f0, 0x201, 0x30cb, 0x2021, 0xffbd, 0x500d, 0xf0f1, 0x1fcc, 0x4020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12914985] cycle (D:8)
	FIFO/*1540*/(32, 0x201, 0xffce, 0x50ec, 0x1002, 0xfcd, 0x401f, 0xf0, 0x20cc, 0x201, 0x2011, 0xf0ee, 0x40dc, 0x1012, 0xffbd, 0x401f, 0xf0e0, 0x201, 0x30cb, 0x3022, 0xefce, 0x50fd, 0x1, 0x1fbc, 0x3021, 0x201, 0xf0ef, 0x40cb, 0x22, 0xffcd, 0x400e, 0xf0, 0x10cc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12924593] cycle (D:8)
	FIFO/*1580*/(32, 0x201, 0x2021, 0xe0ee, 0x40ec, 0x1011, 0xffcd, 0x301e, 0xf000, 0x201, 0x10bb, 0x2031, 0xdfdd, 0x50fb, 0xf012, 0xcb, 0x302f, 0x201, 0xe0ff, 0x40da, 0x21, 0xf0dc, 0x400d, 0xf, 0xcc, 0x201, 0x302f, 0xe0ee, 0x30db, 0x1021, 0xefdc, 0x401d, 0xf000);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12934201] cycle (D:8)
	FIFO/*15c0*/(32, 0x201, 0x10ca, 0x2030, 0xd0ee, 0x40eb, 0x11, 0xefdc, 0x402e, 0x201, 0xe0ef, 0x20db, 0x1031, 0xe0ed, 0x40fc, 0xf011, 0xf0dc, 0x201, 0x202f, 0xe0fe, 0x20db, 0x1020, 0xdfed, 0x400b, 0xf011, 0x201, 0xffcb, 0x3040, 0xdfee, 0x30eb, 0xf032, 0xefdc, 0x303e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12943809] cycle (D:8)
	FIFO/*1600*/(32, 0x201, 0xe00f, 0x10eb, 0x31, 0xe0fd, 0x20fc, 0x21, 0xdfed, 0x201, 0x302e, 0xe00f, 0xdb, 0x41, 0xdfed, 0x300c, 0xf021, 0x201, 0xefdc, 0x204f, 0xd00e, 0x20eb, 0xf042, 0xdfec, 0x301c, 0x201, 0xd011, 0xf0eb, 0x40, 0xd0fe, 0x200c, 0xf031, 0xd0fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12953417] cycle (D:8)
	FIFO/*1640*/(32, 0x201, 0x202d, 0xe010, 0xffec, 0x1040, 0xc00e, 0x30fb, 0xe042, 0x201, 0xdfec, 0x203f, 0xcf00, 0x10fb, 0xf041, 0xcffd, 0x201d, 0x201, 0xe021, 0xeffd, 0x103f, 0xd00f, 0x10fc, 0xf042, 0xcffe, 0x201, 0x202d, 0xd021, 0xeffd, 0x1040, 0xcf0f, 0x100c, 0xf032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12963025] cycle (D:8)
	FIFO/*1680*/(32, 0x201, 0xcffe, 0x303e, 0xdf11, 0xffec, 0x52, 0xcffe, 0x201e, 0x201, 0xd032, 0xeffd, 0x1030, 0xdf00, 0xf0fe, 0x31, 0xcf0f, 0x201, 0x201d, 0xe032, 0xdffe, 0x2040, 0xcf00, 0x10fd, 0xe053, 0x201, 0xcffe, 0x202f, 0xd022, 0xffed, 0x52, 0xcf0f, 0x100d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12972633] cycle (D:8)
	FIFO/*16c0*/(32, 0x201, 0xe043, 0xdffe, 0x203f, 0xdf11, 0xfffd, 0x42, 0xcf0f, 0x201, 0x101e, 0xe033, 0xdffe, 0x1030, 0xcf22, 0xfec, 0xf053, 0x201, 0xcfff, 0x301e, 0xd033, 0xefed, 0x1041, 0xcff0, 0x100e, 0x201, 0xf032, 0xdfff, 0x202f, 0xdf12, 0xfffe, 0x1031, 0xcf01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12982241] cycle (D:8)
	FIFO/*1700*/(32, 0x201, 0x10fd, 0xf043, 0xdfee, 0x302f, 0xcf13, 0xfed, 0x43, 0x201, 0xcfe0, 0x201f, 0xe023, 0xefee, 0x2031, 0xdf01, 0xffe, 0x201, 0x43, 0xdfff, 0x201f, 0xdf23, 0xffee, 0x1032, 0xdf01, 0x201, 0xffe, 0x33, 0xdfef, 0x2020, 0xdf23, 0xffdd, 0x1053);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [12991849] cycle (D:8)
	FIFO/*1740*/(32, 0x201, 0xcff0, 0x200e, 0xe044, 0xefdd, 0x2031, 0xcf12, 0xffe, 0x202, 0xf065, 0xaff0, 0x201e, 0xd066, 0xcfcc, 0x3052, 0x9f24, 0x201, 0xffe, 0x43, 0xdfef, 0x201f, 0xdf23, 0xffed, 0x1032, 0x201, 0xcf01, 0x200e, 0xf033, 0xdfef, 0x2020, 0xcf13, 0x1fed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13001457] cycle (D:8)
	FIFO/*1780*/(32, 0x202, 0x1065, 0xafe0, 0x301e, 0xe055, 0xdfcd, 0x3041, 0xbf24, 0x201, 0xfee, 0x1032, 0xcff1, 0x300e, 0xe024, 0xffde, 0x3031, 0x201, 0xcff2, 0x20fe, 0x33, 0xefdf, 0x2021, 0xef12, 0xfee, 0x201, 0x1032, 0xdf01, 0x10ff, 0x23, 0xefef, 0x2020, 0xdf13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13011065] cycle (D:8)
	FIFO/*17c0*/(32, 0x201, 0xfee, 0x2033, 0xdfe1, 0x200f, 0xf023, 0xefde, 0x2032, 0x201, 0xdf12, 0x1fed, 0x34, 0xdfef, 0x2010, 0xef23, 0xfde, 0x201, 0x1033, 0xdf01, 0x10ff, 0x22, 0xdfe0, 0x2010, 0xe023, 0x201, 0xfde, 0x2032, 0xcf02, 0x30fd, 0xf034, 0xefde, 0x2021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13020673] cycle (D:8)
	FIFO/*1800*/(32, 0x202, 0x9f25, 0x4fba, 0x1057, 0xafd1, 0x401e, 0xf035, 0xefbe, 0x201, 0x2021, 0xdf02, 0x1fee, 0x1023, 0xdfe0, 0x301f, 0xf023, 0x201, 0xfde, 0x2022, 0xdf02, 0x20ed, 0x1023, 0xdfd0, 0x3020, 0x201, 0xef13, 0x1fdd, 0x2033, 0xdfe1, 0x300f, 0x13, 0xffdf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13030281] cycle (D:8)
	FIFO/*1840*/(32, 0x202, 0x3043, 0xdf03, 0x2fbc, 0x3035, 0xafe2, 0x50fd, 0x46, 0x201, 0xffce, 0x3032, 0xdf02, 0x2fed, 0x1034, 0xefdf, 0x3010, 0x201, 0xff12, 0x1fce, 0x1033, 0xdff1, 0x30ee, 0x23, 0xefdf, 0x202, 0x5031, 0xcf15, 0x2fab, 0x3046, 0xafe2, 0x50fd, 0x1035);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13039889] cycle (D:8)
	FIFO/*1880*/(32, 0x201, 0xefdf, 0x2021, 0xef12, 0x2fdd, 0x1034, 0xdfe0, 0x400e, 0x201, 0xe013, 0xfcd, 0x2032, 0xdff1, 0x30fd, 0x13, 0xefe0, 0x202, 0x502f, 0xf013, 0xfac, 0x4044, 0xaff3, 0x60ca, 0x1047, 0x201, 0xefdf, 0x3010, 0xef02, 0x2fdd, 0x2023, 0xdfe0, 0x300e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13049497] cycle (D:8)
	FIFO/*18c0*/(32, 0x202, 0x25, 0xef9d, 0x5052, 0xcff2, 0x4fab, 0x2056, 0xbfbf, 0x202, 0x601e, 0xf014, 0xfac, 0x4043, 0xcff2, 0x50ba, 0x3035, 0x201, 0xdfe0, 0x401f, 0xf012, 0xfcd, 0x2033, 0xdfe0, 0x30fd, 0x201, 0x23, 0xffce, 0x2021, 0xff01, 0x2fdd, 0x1023, 0xeff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13059105] cycle (D:8)
	FIFO/*1900*/(32, 0x202, 0x60ec, 0x25, 0xdfad, 0x5041, 0xbf03, 0x4f99, 0x2067, 0x201, 0xdfef, 0x300f, 0xf013, 0xfcd, 0x2032, 0xdff1, 0x30ed, 0x202, 0x46, 0xbfbe, 0x703f, 0xdf04, 0x1fab, 0x3054, 0xbfd0, 0x201, 0x30fe, 0x12, 0xefdf, 0x3010, 0xf012, 0x1fcd, 0x2033);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13068713] cycle (D:8)
	FIFO/*1940*/(32, 0x201, 0xdfe0, 0x40fd, 0xf023, 0xffcd, 0x3031, 0xdff1, 0x30ed, 0x202, 0x1046, 0xcfbe, 0x602e, 0xef03, 0xfac, 0x4043, 0xbff1, 0x202, 0x50ba, 0x1046, 0xcfbd, 0x702e, 0xdf14, 0x1f9a, 0x4064, 0x201, 0xdfe0, 0x30fd, 0x23, 0xefde, 0x3020, 0xef01, 0x2fdd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13078321] cycle (D:8)
	FIFO/*1980*/(32, 0x201, 0x1033, 0xefef, 0x400e, 0xf013, 0xfdd, 0x2021, 0xeff0, 0x201, 0x20ed, 0x1022, 0xdfef, 0x300e, 0xf012, 0xffcd, 0x3031, 0x202, 0xafd1, 0x60ca, 0xf067, 0xcf9b, 0x703f, 0xbf04, 0x3fb9, 0x202, 0x2055, 0xbfdf, 0x60eb, 0xf035, 0xdfac, 0x5040, 0xcff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13087929] cycle (D:8)
	FIFO/*19c0*/(32, 0x202, 0x2fba, 0x2065, 0xbfce, 0x600c, 0xe045, 0xefab, 0x5041, 0x201, 0xdf01, 0x20ec, 0x33, 0xdfef, 0x400e, 0xe013, 0xffdd, 0x201, 0x3031, 0xdff1, 0x20ec, 0x44, 0xdfcd, 0x402f, 0xdf02, 0x201, 0x1fdc, 0x1043, 0xdfde, 0x300e, 0xf013, 0xffee, 0x3010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13097537] cycle (D:8)
	FIFO/*1a00*/(32, 0x202, 0xbff3, 0x3fca, 0x2064, 0xbfbe, 0x500d, 0xe034, 0xefab, 0x201, 0x2031, 0xdff1, 0x20ed, 0x33, 0xdfde, 0x401f, 0xdf13, 0x201, 0xfdc, 0x2032, 0xdfe0, 0x300e, 0xf023, 0xffde, 0x2020, 0x202, 0xcf12, 0x1fbb, 0x3054, 0xbfdf, 0x50fc, 0xe056, 0xef9a);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13107145] cycle (D:8)
	FIFO/*1a40*/(32, 0x202, 0x5041, 0xaf03, 0x2fca, 0x2065, 0xafbe, 0x601d, 0xc046, 0x201, 0xfdc, 0x2032, 0xdff0, 0x20fd, 0xf033, 0xffdd, 0x2010, 0x602, 0xcf23, 0x1fcb, 0x3032, 0xbff1, 0x30eb, 0x54, 0xbfad, 0x201, 0x301f, 0xdf13, 0x1fdc, 0x1032, 0xdfdf, 0x300e, 0xe023);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13116753] cycle (D:8)
	FIFO/*1a80*/(32, 0x202, 0xffa9, 0x4052, 0xaff2, 0x40ea, 0x1054, 0xbfbd, 0x502e, 0x202, 0xd034, 0xffbb, 0x5042, 0xafe2, 0x30eb, 0x1054, 0xcfad, 0x201, 0x301f, 0xe012, 0xfdd, 0x2032, 0xcfe0, 0x300d, 0xf033, 0x201, 0xffcd, 0x2031, 0xdf01, 0x10fd, 0x1022, 0xefef, 0x1010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13126361] cycle (D:8)
	FIFO/*1ac0*/(32, 0x201, 0xf021, 0xffde, 0x2021, 0xdf12, 0x1fed, 0x1032, 0xdfdf, 0x201, 0x301f, 0xd023, 0xfdc, 0x2032, 0xcff1, 0x200e, 0x33, 0x202, 0xdf9b, 0x4041, 0xbf23, 0x2fb9, 0x2054, 0xafd0, 0x400c, 0x201, 0xf022, 0xffde, 0x2011, 0xdf12, 0x10ed, 0x2022, 0xcfe0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13135969] cycle (D:8)
	FIFO/*1b00*/(32, 0x201, 0x200e, 0xf023, 0xffcd, 0x3031, 0xcf01, 0x30fc, 0x33, 0x202, 0xcfac, 0x5040, 0xbf24, 0x2fca, 0x3043, 0xafe1, 0x200c, 0x201, 0x1021, 0xefef, 0x2010, 0xe012, 0xfdd, 0x2032, 0xcfe0, 0x201, 0x200e, 0xf023, 0xffcd, 0x2021, 0xcf02, 0x20ec, 0x1033);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13145577] cycle (D:8)
	FIFO/*1b40*/(32, 0x201, 0xdfdf, 0x202f, 0xf012, 0xfdd, 0x1032, 0xdff0, 0x10fe, 0x201, 0x1022, 0xefdf, 0x2010, 0xf022, 0xfdd, 0x2022, 0xcff1, 0x201, 0x30fd, 0x33, 0xefce, 0x3031, 0xdf12, 0x20ec, 0x1033, 0x202, 0xafbe, 0x402e, 0xe034, 0xfab, 0x2043, 0xaf12, 0x30da);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13155185] cycle (D:8)
	FIFO/*1b80*/(32, 0x201, 0x1022, 0xdfe0, 0x301f, 0xe023, 0xfdd, 0x2021, 0xcf02, 0x201, 0x20fd, 0x33, 0xefde, 0x3020, 0xdf12, 0x1fdc, 0x1033, 0x201, 0xcfe0, 0x300e, 0xf022, 0xffde, 0x2021, 0xdf01, 0x10fd, 0x201, 0x1011, 0xdff1, 0x200e, 0x22, 0xffde, 0x2021, 0xcf02);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13164793] cycle (D:8)
	FIFO/*1bc0*/(32, 0x201, 0x20ec, 0x1033, 0xdfdf, 0x302f, 0xef12, 0x1fdd, 0x2032, 0x202, 0xafd1, 0x400c, 0x34, 0xcfbe, 0x4040, 0xcf23, 0x1faa, 0x202, 0x2055, 0xafe0, 0x40fc, 0xf045, 0xdfac, 0x4042, 0xbf23, 0x201, 0x1fdd, 0x1033, 0xcfe0, 0x301e, 0xe023, 0xfcd, 0x2032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13174401] cycle (D:8)
	FIFO/*1c00*/(32, 0x202, 0x9fe1, 0x50eb, 0xf046, 0xdfcd, 0x4020, 0xd023, 0x1fbb, 0x201, 0x1022, 0xdf01, 0x20ed, 0x33, 0xdfdf, 0x3020, 0xdf12, 0x201, 0x1fdc, 0x1033, 0xcfe0, 0x300e, 0xf013, 0xffde, 0x2021, 0x202, 0xaf03, 0x40ca, 0x1045, 0xafdf, 0x501d, 0xd025, 0xffab);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13184009] cycle (D:8)
	FIFO/*1c40*/(32, 0x201, 0x2021, 0xdf01, 0x10fd, 0x1022, 0xdfdf, 0x301f, 0xe012, 0x201, 0xfcd, 0x2032, 0xcff1, 0x30fd, 0xf023, 0xffde, 0x2031, 0x202, 0xbff2, 0x3fcb, 0x1045, 0xcfdf, 0x400e, 0x34, 0xdfac, 0x201, 0x2021, 0xef01, 0x1fdd, 0x1033, 0xdfef, 0x301e, 0xe023);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13193617] cycle (D:8)
	FIFO/*1c80*/(32, 0x202, 0xf9a, 0x4064, 0x9fe1, 0x50ea, 0xf056, 0xcfac, 0x5030, 0x202, 0xcf14, 0x2faa, 0x2065, 0xbfdf, 0x50fc, 0xf035, 0xdfbd, 0x202, 0x5020, 0xbf14, 0x1fba, 0x3054, 0x9fd1, 0x60fb, 0xd057, 0x201, 0xffcd, 0x3031, 0xdff1, 0x30ed, 0x33, 0xefde, 0x3010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13203225] cycle (D:8)
	FIFO/*1cc0*/(32, 0x202, 0xcf14, 0xfcb, 0x3043, 0xbff1, 0x30eb, 0x1045, 0xbfbe, 0x202, 0x602e, 0xcf25, 0xfaa, 0x4064, 0xafd0, 0x50fb, 0xe056, 0x202, 0xdf9b, 0x6041, 0xaf03, 0x3fba, 0x2065, 0xafbe, 0x601d, 0x202, 0xdf25, 0xffbb, 0x4053, 0xcfe1, 0x20ec, 0x1044, 0xcfce);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13212833] cycle (D:8)
	FIFO/*1d00*/(32, 0x201, 0x200f, 0xf023, 0xffdd, 0x3031, 0xdff1, 0x30ed, 0x34, 0x201, 0xefce, 0x3020, 0xdf02, 0x1fed, 0x1033, 0xefef, 0x200f, 0x202, 0xe035, 0xffbc, 0x4031, 0xbf03, 0x2fcb, 0x2055, 0xbfcf, 0x202, 0x600d, 0xd046, 0xffab, 0x5042, 0xaff3, 0x30da, 0x1066);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13222441] cycle (D:8)
	FIFO/*1d40*/(32, 0x202, 0xbfad, 0x602f, 0xbf25, 0x1fa9, 0x3065, 0xafc0, 0x50fc, 0x202, 0xe045, 0xffbb, 0x4021, 0xcf13, 0x1fdb, 0x4042, 0xbfd1, 0x201, 0x20fe, 0x23, 0xefde, 0x3020, 0xcf02, 0x20ed, 0x1033, 0x202, 0xbfad, 0x602e, 0xbf35, 0x1fba, 0x4043, 0xbfe1, 0x30fc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13232049] cycle (D:8)
	FIFO/*1d80*/(32, 0x202, 0x1044, 0xcfbd, 0x502f, 0xcf24, 0xfcb, 0x4042, 0xbfd1, 0x201, 0x20fe, 0x22, 0xefde, 0x3010, 0xdf13, 0x1fdc, 0x2032, 0x201, 0xdfd0, 0x300e, 0xe023, 0xfdd, 0x2032, 0xdff1, 0x10fe, 0x202, 0x1044, 0xdfbd, 0x3010, 0xe034, 0xffbb, 0x5031, 0xaf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13241657] cycle (D:8)
	FIFO/*1dc0*/(32, 0x201, 0x20ed, 0x33, 0xefde, 0x3010, 0xdf13, 0x1fdc, 0x2032, 0x202, 0xafbf, 0x400d, 0xe045, 0xff9a, 0x5032, 0xaf03, 0x30da, 0x202, 0x2044, 0xcfcf, 0x401e, 0xd045, 0xffbb, 0x4031, 0xaf03, 0x201, 0x10fd, 0x1022, 0xefdf, 0x300f, 0xe023, 0xfcc, 0x3032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13251265] cycle (D:8)
	FIFO/*1e00*/(32, 0x201, 0xcfe1, 0x300d, 0xf023, 0xffdd, 0x2021, 0xdf01, 0x10fd, 0x202, 0x3032, 0xbfd0, 0x300d, 0x43, 0xefac, 0x5020, 0xbf24, 0x201, 0x1fed, 0x2032, 0xdfdf, 0x201f, 0xe022, 0xfdd, 0x3021, 0x201, 0xdff1, 0x20fd, 0x1022, 0xefdf, 0x3010, 0xe022, 0x1fcc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13260873] cycle (D:8)
	FIFO/*1e40*/(32, 0x201, 0x1033, 0xdfdf, 0x201f, 0xf012, 0xfee, 0x0, 0x21, 0x201, 0xffde, 0x4020, 0xbff2, 0x40fc, 0xe044, 0xfbb, 0x3043, 0x201, 0xcfe0, 0x300d, 0xf012, 0xffe, 0x0, 0x21, 0xffde, 0x201, 0x3010, 0xcf13, 0x20dc, 0x1043, 0xdfce, 0x3020, 0xdf02);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13270481] cycle (D:8)
	FIFO/*1e80*/(32, 0x202, 0x40ca, 0x1034, 0xdfef, 0x100e, 0x2031, 0xbfcf, 0x600d, 0x201, 0xc034, 0x1fcb, 0x2043, 0xcfcf, 0x402f, 0xdf03, 0x20ec, 0x201, 0x23, 0xffff, 0x0, 0x200f, 0xdf01, 0x20fe, 0x43, 0x201, 0xefbd, 0x4031, 0xbff2, 0x40fc, 0xe034, 0xffcd, 0x2032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13280089] cycle (D:8)
	FIFO/*1ec0*/(32, 0x201, 0xeff0, 0x10fe, 0x1011, 0xef01, 0x10ff, 0x1021, 0xefdf, 0x201, 0x3020, 0xdf12, 0x20dc, 0x33, 0xefdf, 0x2010, 0xf011, 0x201, 0xfee, 0x1011, 0xe011, 0xfed, 0x2032, 0xcfd0, 0x401e, 0x201, 0xd024, 0x1fcb, 0x1044, 0xdfdf, 0x301f, 0xff02, 0xffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13289697] cycle (D:8)
	FIFO/*1f00*/(32, 0x201, 0x11, 0x11, 0xffee, 0x3010, 0xcf02, 0x30ec, 0xf044, 0x201, 0xefbd, 0x3031, 0xcff1, 0x30ec, 0xf023, 0xffef, 0x1010, 0x201, 0xf011, 0xffee, 0x2010, 0xdf12, 0x20ec, 0x1033, 0xdfdf, 0x202, 0x604f, 0xbf14, 0x2fca, 0x1044, 0xcfe0, 0x100e, 0x2032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13299305] cycle (D:8)
	FIFO/*1f40*/(32, 0x201, 0xefe0, 0x300f, 0xe023, 0xfcc, 0x2042, 0xcfd0, 0x401e, 0x202, 0xcf36, 0x1f99, 0x2064, 0xcfdf, 0x200e, 0x1012, 0xdff0, 0x201, 0x100f, 0x22, 0xefde, 0x3020, 0xcf02, 0x20ec, 0x34, 0x201, 0xefce, 0x3020, 0xef01, 0x1fee, 0x1022, 0xeff0, 0x10fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13308913] cycle (D:8)
	FIFO/*1f80*/(32, 0x201, 0x22, 0xefde, 0x3020, 0xdf12, 0x2fdc, 0x33, 0xefef, 0x202, 0x502f, 0xdf14, 0xfdd, 0x2021, 0xd022, 0xfcc, 0x4053, 0x201, 0xcfe1, 0x400d, 0xe034, 0xfcc, 0x2043, 0xcfe0, 0x300e, 0x202, 0xcf36, 0xffcb, 0x2031, 0xef01, 0xffee, 0x4020, 0xaf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13318521] cycle (D:8)
	FIFO/*1fc0*/(32, 0x201, 0x20ed, 0x33, 0xefde, 0x3020, 0xdf02, 0x20ed, 0x33, 0x202, 0xcfce, 0x401e, 0xe034, 0xefcc, 0x5030, 0xaf14, 0x3fba, 0x201, 0x1033, 0xdfdf, 0x302f, 0xdf02, 0x1fed, 0x1022, 0xffff, 0x201, 0x100f, 0x11, 0xeff0, 0x200f, 0xf023, 0xffcd, 0x3032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13328129] cycle (D:8)
	FIFO/*2000*/(32, 0x201, 0xcfe1, 0x40fd, 0xe034, 0xffcc, 0x2032, 0xeff0, 0x10fe, 0x202, 0x33, 0xefde, 0x200f, 0xf044, 0xefbc, 0x5030, 0xaf14, 0x202, 0x40ca, 0x66, 0xcfac, 0x502f, 0xcf14, 0xfcb, 0x3032, 0x201, 0xeff0, 0x10fe, 0x32, 0xefdf, 0x301f, 0xdf13, 0x1fdc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13337737] cycle (D:8)
	FIFO/*2040*/(32, 0x202, 0x1076, 0xbfbe, 0x502e, 0xcf14, 0x1fdc, 0x2011, 0xef01, 0x201, 0xffff, 0x2020, 0xdff1, 0x20fe, 0xf033, 0xffcd, 0x3031, 0x201, 0xcff1, 0x30fd, 0xf033, 0xffdd, 0x2021, 0xef01, 0xfe, 0x202, 0x4021, 0xbff2, 0x20ec, 0x1055, 0xdfac, 0x5030, 0xbf04);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13347345] cycle (D:8)
	FIFO/*2080*/(32, 0x202, 0x2fcb, 0x1054, 0xdfce, 0x200f, 0xf033, 0xefcd, 0x501f, 0x201, 0xef12, 0xfdd, 0x2032, 0xdfdf, 0x401f, 0xdf13, 0x1fdc, 0x202, 0x2065, 0xdfce, 0x201f, 0xf022, 0xffde, 0x20ff, 0xf044, 0x201, 0xffee, 0x3020, 0xcff2, 0x20fd, 0xf033, 0xffcd, 0x3021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13356953] cycle (D:8)
	FIFO/*20c0*/(32, 0x202, 0xaff3, 0x30eb, 0x1044, 0xefce, 0x200f, 0xf044, 0xefbc, 0x202, 0x5030, 0xaf04, 0x30da, 0x1065, 0xdfad, 0x4030, 0xcf13, 0x202, 0x1fec, 0x3021, 0xdff2, 0xfed, 0x3052, 0xbfcf, 0x600d, 0x201, 0xd024, 0x1fcc, 0x2043, 0xdfdf, 0x301f, 0xe013, 0x1fed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13366561] cycle (D:8)
	FIFO/*2100*/(32, 0x202, 0x2033, 0xdff1, 0xe, 0x4010, 0xcfe2, 0x30ed, 0xf065, 0x201, 0xffde, 0x3020, 0xcf02, 0x20fd, 0x33, 0xffde, 0x2010, 0x202, 0xdf23, 0xfdc, 0x4021, 0xbff3, 0x20ec, 0x1064, 0xcf9c, 0x202, 0x6040, 0xaf14, 0x30da, 0x1044, 0xdfce, 0x2010, 0xf022);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13376169] cycle (D:8)
	FIFO/*2140*/(32, 0x201, 0xffff, 0x2000, 0xe022, 0xfdd, 0x3031, 0xcfe0, 0x300e, 0x201, 0xe034, 0x1fcc, 0x2032, 0xdfe0, 0x200f, 0x12, 0xfef, 0x202, 0x2010, 0xe033, 0xffcc, 0x5020, 0xaf03, 0x40da, 0x66, 0x201, 0xffce, 0x2021, 0xdf02, 0x10fd, 0x1022, 0xeff0, 0x100f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13385777] cycle (D:8)
	FIFO/*2180*/(32, 0x201, 0x22, 0xffde, 0x3010, 0xcf12, 0x20ec, 0x1033, 0xefdf, 0x202, 0x5040, 0xbf13, 0x20db, 0x1023, 0xeff0, 0xfe, 0x3031, 0x201, 0xeff0, 0x200e, 0xe033, 0xfcc, 0x3032, 0xcfe1, 0x300e, 0x202, 0xd046, 0xfaa, 0x2053, 0xcff1, 0x10fd, 0x2022, 0xcfe1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13395385] cycle (D:8)
	FIFO/*21c0*/(32, 0x202, 0x20fe, 0x44, 0xefac, 0x5041, 0xaf03, 0x40da, 0x45, 0x202, 0xdfbd, 0x3020, 0xe012, 0xfdd, 0x4021, 0xbf13, 0x2fdb, 0x201, 0x1032, 0xdfdf, 0x3020, 0xdf12, 0x20dc, 0x33, 0xefef, 0x202, 0x302f, 0xef12, 0xfee, 0x1000, 0xe032, 0xffcc, 0x5031);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13404993] cycle (D:8)
	FIFO/*2200*/(32, 0x201, 0xcff1, 0x30fd, 0xf034, 0xfcc, 0x2032, 0xdff1, 0x20fe, 0x202, 0xe035, 0xefcd, 0x2020, 0xe022, 0xffcc, 0x4021, 0xaf03, 0x202, 0x40eb, 0x55, 0xdfad, 0x5040, 0xbf03, 0x20db, 0x1033, 0x201, 0xfff0, 0x100f, 0x1021, 0xefef, 0x301f, 0xdf13, 0x1fdc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13414601] cycle (D:8)
	FIFO/*2240*/(32, 0x201, 0x1033, 0xdfdf, 0x302f, 0xdf02, 0x1fed, 0x22, 0xffff, 0x202, 0x100f, 0x2021, 0xdfe0, 0x30fe, 0xf044, 0xefab, 0x6052, 0x201, 0xcff1, 0x30fd, 0xf033, 0xffdd, 0x2021, 0xeff1, 0x10fe, 0x202, 0x2033, 0xcfe0, 0x30fd, 0xf044, 0xefac, 0x5041, 0xaf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13424209] cycle (D:8)
	FIFO/*2280*/(32, 0x202, 0x40da, 0xf056, 0xefcd, 0x3020, 0xef12, 0xffed, 0x3010, 0x201, 0xef11, 0xfee, 0x2032, 0xdfe0, 0x401e, 0xdf23, 0x1fdc, 0x201, 0x3032, 0xcfc0, 0x401f, 0xbf24, 0x20fc, 0xf011, 0x200e, 0x201, 0xdfe0, 0x501f, 0xaff3, 0x60fb, 0xbf36, 0x20db, 0x23);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13433817] cycle (D:8)
	FIFO/*22c0*/(32, 0x201, 0xff, 0xeff0, 0x3031, 0xcfe0, 0x501d, 0xcf13, 0x20ed, 0x201, 0xf012, 0x0, 0xffef, 0x3031, 0xbfd0, 0x602f, 0xaff3, 0x201, 0x40fc, 0xdf24, 0x30fd, 0xdff1, 0x402f, 0xcfd2, 0x501d, 0x201, 0xbf14, 0x30ec, 0xf023, 0xefff, 0x20ff, 0x33, 0xefcc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13443425] cycle (D:8)
	FIFO/*2300*/(32, 0x201, 0x3053, 0xcfc0, 0x302e, 0xeff2, 0x100f, 0xffef, 0x1042, 0x201, 0xefbe, 0x4030, 0xbfe1, 0x400e, 0xef03, 0xe, 0x1000, 0x201, 0xf022, 0xffdd, 0x3042, 0xdfcf, 0x201f, 0xff02, 0xf0ff, 0x201, 0x20fe, 0xd034, 0x2fbb, 0x65, 0xefac, 0x3042, 0xefdf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13453033] cycle (D:8)
	FIFO/*2340*/(32, 0x201, 0x20, 0x1fef, 0xf023, 0xfcd, 0x1043, 0xdfce, 0x3020, 0x201, 0xef02, 0xfffe, 0x3010, 0xcf02, 0x30ec, 0xe044, 0xfcc, 0x201, 0x1032, 0xffef, 0xf011, 0x20ff, 0xdf12, 0x3fdd, 0xf044, 0x201, 0xffbc, 0x2043, 0xffd0, 0x1f, 0x1010, 0xeff1, 0x20ed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13462641] cycle (D:8)
	FIFO/*2380*/(32, 0x201, 0xe033, 0xfcd, 0x1022, 0xfff0, 0xff0, 0x2021, 0xcfe0, 0x201, 0x501e, 0xbf15, 0x30da, 0xf045, 0x1fcd, 0xf021, 0x100f, 0x201, 0xef01, 0x30ed, 0xd034, 0x1fdc, 0x1033, 0xefef, 0x100f, 0x201, 0x22, 0xefde, 0x4020, 0xcff2, 0x30fd, 0xe023, 0x1fee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13472249] cycle (D:8)
	FIFO/*23c0*/(32, 0x201, 0x1, 0x21, 0xefef, 0x401f, 0xbf03, 0x30fc, 0xe034, 0x202, 0x1faa, 0x1033, 0xf010, 0xefdf, 0x602f, 0xafe3, 0x40fc, 0x201, 0xf023, 0xffee, 0x2000, 0xe013, 0xfdd, 0x3042, 0xcfc0, 0x201, 0x402f, 0xcf02, 0x20fd, 0x2, 0xf, 0xfff0, 0x3020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13481857] cycle (D:8)
	FIFO/*2400*/(32, 0x202, 0x9fc0, 0x601d, 0xcf37, 0xfba, 0x4042, 0xcff3, 0x30db, 0x201, 0x32, 0xffce, 0x3021, 0xdf01, 0x100e, 0x1001, 0xef00, 0x201, 0x1fee, 0x1043, 0xefcd, 0x3031, 0xdff2, 0x200e, 0xf012, 0x202, 0xffee, 0x10f0, 0x43, 0xdfcd, 0x5020, 0xbf03, 0x1feb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13491465] cycle (D:8)
	FIFO/*2440*/(32, 0x201, 0x1022, 0xdfe0, 0x300e, 0xd034, 0x1fcc, 0x1043, 0xefdf, 0x202, 0x4030, 0xef02, 0xfe, 0x2fff, 0xe044, 0xefbb, 0x5052, 0x202, 0xafd2, 0x400c, 0xe044, 0xefbc, 0x5021, 0xaf13, 0x3fda, 0x202, 0x1055, 0xdfbd, 0x2020, 0xf023, 0xdfdd, 0x602f, 0x9f15);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13501073] cycle (D:8)
	FIFO/*2480*/(32, 0x201, 0x20ec, 0x33, 0xffce, 0x2021, 0xeff0, 0x100f, 0x1001, 0x202, 0xdf01, 0xfed, 0x2053, 0xcfbe, 0x501e, 0xcf35, 0xfba, 0x201, 0x2031, 0xcfe0, 0x300e, 0xe023, 0x1fdc, 0x1032, 0xffef, 0x201, 0x10, 0x1000, 0xeff0, 0x10fe, 0xf033, 0xffcd, 0x2031);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13510681] cycle (D:8)
	FIFO/*24c0*/(32, 0x202, 0xbfe1, 0x30fc, 0x34, 0xdfce, 0x401f, 0xdf24, 0x1fcb, 0x201, 0x1021, 0xeff0, 0x10ff, 0x22, 0xefdf, 0x3010, 0xcf13, 0x201, 0x20ec, 0xf034, 0xffde, 0x1021, 0x0, 0xf000, 0x200f, 0x202, 0xcf35, 0x1fbb, 0x3063, 0xbfbf, 0x501e, 0xd045, 0xffaa);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13520289] cycle (D:8)
	FIFO/*2500*/(32, 0x201, 0x3021, 0xcff1, 0x300d, 0xe023, 0xfdd, 0x11, 0x0, 0x202, 0xefef, 0x502f, 0x9f04, 0x60da, 0xd056, 0xffaa, 0x3043, 0x202, 0xdff1, 0xffd, 0x3021, 0xbfe1, 0x40fc, 0xe045, 0xffbb, 0x201, 0x2021, 0xef01, 0x1fee, 0x2032, 0xdfdf, 0x402f, 0xcf02);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13529897] cycle (D:8)
	FIFO/*2540*/(32, 0x202, 0x40d9, 0xe045, 0xfdd, 0xff01, 0x302f, 0xafe1, 0x60fc, 0x201, 0xd023, 0x1fdd, 0x1022, 0xeff0, 0x10fe, 0x32, 0xefce, 0x201, 0x3031, 0xdff1, 0x20fe, 0xf012, 0xfff, 0x10f0, 0x21, 0x201, 0xefde, 0x3030, 0xcff2, 0x300d, 0xef13, 0xfe, 0x0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13539505] cycle (D:8)
	FIFO/*2580*/(32, 0x202, 0x32, 0xdfbe, 0x5040, 0xafe2, 0x40ec, 0xf045, 0xdfdd, 0x201, 0x200f, 0xe023, 0x1fcc, 0x2043, 0xdfcf, 0x3030, 0xdff1, 0x201, 0x100f, 0xff0, 0x21, 0xffde, 0x2031, 0xdfe0, 0x301f, 0x201, 0xef12, 0xffe, 0x2010, 0xdf12, 0x2fed, 0x43, 0xefce);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13549113] cycle (D:8)
	FIFO/*25c0*/(32, 0x201, 0x2031, 0xeff0, 0xf, 0x2000, 0xdf12, 0x20dd, 0xf044, 0x201, 0xffbc, 0x2042, 0xefe0, 0x1010, 0x0, 0xf011, 0x1fee, 0x201, 0x33, 0xffde, 0x2031, 0xeff1, 0xff, 0x2021, 0xcff1, 0x201, 0x40fd, 0xcf35, 0x2fcb, 0xf044, 0xfdd, 0x21, 0x10ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13558721] cycle (D:8)
	FIFO/*2600*/(32, 0x201, 0xef01, 0x30ee, 0xe034, 0x1fcc, 0x1043, 0xffdf, 0x1010, 0x201, 0x1011, 0xdff0, 0x400e, 0xcf13, 0x30dc, 0xf034, 0xfed, 0x201, 0x1, 0x1010, 0xdfe0, 0x501e, 0xbf04, 0x40eb, 0xd035, 0x201, 0x1fdc, 0x22, 0x10ff, 0xef01, 0x400e, 0xcf03, 0x30ed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13568329] cycle (D:8)
	FIFO/*2640*/(32, 0x201, 0xf033, 0xfee, 0x1000, 0x21, 0xefde, 0x4031, 0xbfd1, 0x201, 0x501d, 0xcf14, 0x20ec, 0xf012, 0x100f, 0xeff0, 0x4020, 0x201, 0xcfe1, 0x400d, 0xdf13, 0x20ed, 0x12, 0x0, 0xffef, 0x201, 0x2031, 0xcfdf, 0x402f, 0xdff2, 0x100e, 0x1, 0x11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13577937] cycle (D:8)
	FIFO/*2680*/(32, 0x201, 0xfde, 0x2053, 0xdfbe, 0x5041, 0xbfe1, 0x301e, 0xef02, 0x201, 0x100f, 0xfef, 0x1032, 0xefce, 0x3030, 0xdff1, 0x100f, 0x201, 0x1001, 0xef01, 0x2fdd, 0xf055, 0xffab, 0x2053, 0xdfcf, 0x201, 0x2030, 0xfff0, 0xf010, 0x2fde, 0xf044, 0xfbc, 0x2053);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13587545] cycle (D:8)
	FIFO/*26c0*/(32, 0x201, 0xdfcf, 0x2020, 0xfff0, 0xf010, 0x20ee, 0xe034, 0x1fcc, 0x201, 0x1043, 0xffce, 0x1021, 0x1000, 0xdf01, 0x50fd, 0xbf35, 0x201, 0x3fca, 0xf066, 0xfab, 0x1043, 0xfef, 0xf011, 0x30fe, 0x201, 0xdf23, 0x2fdc, 0xf044, 0xfcd, 0x22, 0x0, 0xdff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13597153] cycle (D:8)
	FIFO/*2700*/(32, 0x201, 0x501e, 0xaf03, 0x50eb, 0xc046, 0x2fcb, 0xf034, 0x10ee, 0x201, 0xdf01, 0x401e, 0xbf03, 0x50fc, 0xcf35, 0x3fcb, 0xf034, 0x201, 0x10ee, 0xef01, 0x301f, 0xcff1, 0x400d, 0xcf24, 0x20ec, 0x201, 0xf012, 0x100f, 0xefe0, 0x3041, 0xbfd0, 0x602e, 0xaf04);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13606761] cycle (D:8)
	FIFO/*2740*/(32, 0x201, 0x50eb, 0xdf24, 0x20fd, 0xef01, 0x2020, 0xcfe0, 0x501e, 0x201, 0xbf03, 0x300d, 0xff12, 0xf, 0xfef, 0x1042, 0xdfbe, 0x201, 0x5040, 0xbfd2, 0x401d, 0xef02, 0x100f, 0xfef, 0x1042, 0x201, 0xdfce, 0x5041, 0xbfc1, 0x402e, 0xeff2, 0x100f, 0xff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13616369] cycle (D:8)
	FIFO/*2780*/(32, 0x201, 0x32, 0xffcd, 0x2042, 0xdfcf, 0x2020, 0xfff1, 0xf010, 0x201, 0x2fee, 0xe044, 0xfab, 0x2074, 0xdfad, 0x3051, 0xffd0, 0x201, 0xf010, 0x20ee, 0xd023, 0x2fcc, 0x44, 0xfcc, 0x32, 0x201, 0xff0, 0xe000, 0x40fe, 0xcf24, 0x40ca, 0xe066, 0x1fbb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13625977] cycle (D:8)
	FIFO/*27c0*/(32, 0x201, 0x43, 0xfee, 0xe011, 0x40ee, 0xbf24, 0x40da, 0xd057, 0x201, 0x2fa9, 0x55, 0xfde, 0xf021, 0x30fe, 0xcf13, 0x50ec, 0x201, 0xcf35, 0x30db, 0xe024, 0x10fe, 0xdf01, 0x501e, 0xaff3, 0x200, 0x300e, 0xdf13, 0x20ec, 0xf023, 0x1fee, 0xf001, 0x100f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13635585] cycle (D:8)
	FIFO/*2800*/(32, 0x201, 0xcff2, 0x500d, 0xaf14, 0x40eb, 0xe024, 0x10fd, 0xef01, 0x201, 0x3020, 0xbfe0, 0x602e, 0xbff3, 0x40fc, 0xdf14, 0x20fe, 0x201, 0xeff1, 0x3030, 0xbfc0, 0x603f, 0x9fe3, 0x600c, 0xcf14, 0x201, 0x20fc, 0xff02, 0x1010, 0xefdf, 0x4031, 0xcfd0, 0x302e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13645193] cycle (D:8)
	FIFO/*2840*/(32, 0x201, 0xeff2, 0x101f, 0xfef, 0x1042, 0xefbd, 0x4062, 0xbfb0, 0x201, 0x503f, 0xcff2, 0x200e, 0xff1, 0x21, 0xffcd, 0x2053, 0x201, 0xdfbe, 0x4040, 0xdfe1, 0x101f, 0xff0, 0xf022, 0x1fcd, 0x201, 0x53, 0xefbd, 0x3042, 0xefdf, 0x21, 0x1fef, 0xe033);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13654801] cycle (D:8)
	FIFO/*2880*/(32, 0x201, 0x2fbb, 0x66, 0xef9b, 0x3063, 0xdfcf, 0x1020, 0xff0, 0x201, 0xe012, 0x20dd, 0xe044, 0x1fbc, 0x43, 0xffde, 0xf022, 0x201, 0x20ee, 0xcf23, 0x40db, 0xd056, 0x1faa, 0x65, 0xffbd, 0x201, 0x32, 0x20ff, 0xdf12, 0x40ec, 0xcf35, 0x3fcb, 0xf055);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13664409] cycle (D:8)
	FIFO/*28c0*/(32, 0x201, 0xfcd, 0x22, 0x10ff, 0xdf01, 0x50fd, 0xbf24, 0x40db, 0x201, 0xd035, 0x20dc, 0xef12, 0x300f, 0xcff2, 0x500d, 0xaf25, 0x201, 0x50ca, 0xd056, 0x1fcb, 0x33, 0x10ff, 0xdf01, 0x401f, 0x201, 0xbff3, 0x50fc, 0xcf25, 0x30fc, 0xef02, 0x2010, 0xdfd0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13674017] cycle (D:8)
	FIFO/*2900*/(32, 0x201, 0x403f, 0xbfe2, 0x500d, 0xcf14, 0x20ec, 0xf013, 0x100f, 0x201, 0xdfe0, 0x4030, 0xbfe1, 0x601d, 0xbf14, 0x30fc, 0xff12, 0x201, 0xf, 0xffef, 0x2042, 0xdfcf, 0x4030, 0xcfe1, 0x201e, 0x201, 0xfff1, 0x1020, 0xffdf, 0x3052, 0xbfbf, 0x603f, 0xbfe2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13683625] cycle (D:8)
	FIFO/*2940*/(32, 0x201, 0x301d, 0xff02, 0xf, 0x1fee, 0x43, 0xffcd, 0x2042, 0x201, 0xdfdf, 0x2010, 0xff0, 0xf010, 0x1fde, 0x43, 0xefbd, 0x201, 0x3052, 0xdfcf, 0x2030, 0xfff0, 0xf021, 0x2fdd, 0xf044, 0x201, 0xfbc, 0x2053, 0xefce, 0x2020, 0xff01, 0xf00f, 0x20ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13693233] cycle (D:8)
	FIFO/*2980*/(32, 0x201, 0xe023, 0x1fdc, 0x44, 0xfcd, 0x32, 0x1fef, 0xe012, 0x201, 0x30ed, 0xd035, 0x2fbb, 0xf065, 0xffbc, 0x1032, 0xfff0, 0x201, 0xf000, 0x200f, 0xdf12, 0x30ec, 0xe044, 0x1fcc, 0x32, 0x201, 0xfef, 0xef11, 0x300e, 0xcf13, 0x40ec, 0xd035, 0x2fdb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13702841] cycle (D:8)
	FIFO/*29c0*/(32, 0x201, 0xf023, 0x10ff, 0xef01, 0x301f, 0xcf02, 0x40ec, 0xd035, 0x201, 0x1fcb, 0x33, 0xffef, 0xf000, 0x2010, 0xdfe0, 0x401e, 0x201, 0xcf03, 0x30fd, 0xf012, 0x10fe, 0xeff1, 0x3020, 0xcfe1, 0x201, 0x500d, 0xcf14, 0x20ec, 0xf034, 0xfee, 0x1, 0x1020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13712449] cycle (D:8)
	FIFO/*2a00*/(32, 0x201, 0xdfd0, 0x402f, 0xcff2, 0x300d, 0xe013, 0xfe, 0xff0, 0x201, 0x22, 0xefde, 0x3031, 0xcfe1, 0x301e, 0xef12, 0x10fe, 0x201, 0xfff0, 0x1021, 0xdfdf, 0x4030, 0xcfe1, 0x400d, 0xef13, 0x202, 0x1fdb, 0x3001, 0xd034, 0x1fba, 0x2075, 0xcf9d, 0x5040);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13722057] cycle (D:8)
	FIFO/*2a40*/(32, 0x201, 0xeff1, 0xf, 0x1fff, 0x22, 0xffde, 0x2042, 0xdfcf, 0x201, 0x302f, 0xdff2, 0x100f, 0x1000, 0xe012, 0x1fdd, 0x43, 0x201, 0xefce, 0x3020, 0xeff1, 0xf, 0x1010, 0xef01, 0x20ee, 0x201, 0xf033, 0xfcd, 0x1032, 0xffef, 0x11, 0x20ff, 0xe012);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13731665] cycle (D:8)
	FIFO/*2a80*/(32, 0x201, 0x2fdd, 0xf044, 0xffcd, 0x3031, 0xdfe0, 0x100f, 0x21, 0x201, 0xefef, 0x300f, 0xe023, 0x1fdc, 0x33, 0xfde, 0x11, 0x201, 0x100f, 0xef01, 0x30fe, 0xd024, 0x1fdc, 0x33, 0xffde, 0x201, 0x1010, 0x11, 0xeff0, 0x300f, 0xdf23, 0x2fdc, 0x43);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13741273] cycle (D:8)
	FIFO/*2ac0*/(32, 0x201, 0xffde, 0x1010, 0x11, 0xffef, 0x3010, 0xcf02, 0x30fd, 0x202, 0xc036, 0x1fcb, 0x22, 0x1000, 0xcfe0, 0x601d, 0x9f15, 0x201, 0x20ec, 0xf034, 0xfdd, 0x1021, 0xff01, 0xfef, 0x2021, 0x202, 0x9fc1, 0x601d, 0xcf15, 0x10db, 0x1022, 0xf001, 0xffde);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13750881] cycle (D:8)
	FIFO/*2b00*/(32, 0x202, 0x4041, 0xafd1, 0x600c, 0xbf36, 0x2fca, 0x34, 0xfff, 0x202, 0xefef, 0x4041, 0x9fc0, 0x701d, 0xbf15, 0x1fcb, 0x2043, 0x202, 0xcfe0, 0x30ed, 0x54, 0xdfac, 0x5041, 0xbfe2, 0x40fc, 0x202, 0xef24, 0x10fe, 0xffef, 0x3052, 0xbfbf, 0x703f, 0xaff4);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13760489] cycle (D:8)
	FIFO/*2b40*/(32, 0x202, 0x30db, 0x45, 0xdfde, 0x300e, 0xe034, 0xffbb, 0x4052, 0x202, 0xbfd1, 0x400c, 0xe024, 0xffee, 0x20ff, 0xf043, 0xffab, 0x202, 0x4063, 0xafd0, 0x401d, 0xf023, 0xffee, 0x20ff, 0xf033, 0x202, 0xdfbd, 0x5040, 0x9ff3, 0x50da, 0xe056, 0xffcc, 0x4020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13770097] cycle (D:8)
	FIFO/*2b80*/(32, 0x202, 0xdf23, 0x1fbb, 0x2065, 0xcfae, 0x4030, 0xeff1, 0xf, 0x202, 0x20ff, 0xf033, 0xffbc, 0x4052, 0xafc0, 0x601d, 0xbf25, 0x202, 0x1fdb, 0x1022, 0xdf01, 0x2fdc, 0x1064, 0xdfad, 0x4040, 0x202, 0xdff2, 0xffe, 0x3021, 0xcff1, 0x30ec, 0xf055, 0xefac);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13779705] cycle (D:8)
	FIFO/*2bc0*/(32, 0x202, 0x4041, 0xcfe1, 0x200e, 0x1, 0xe011, 0x2fcc, 0x65, 0x201, 0xefce, 0x3031, 0xeff1, 0x10fe, 0x22, 0xefef, 0x200f, 0x202, 0xcf25, 0x1fbb, 0x1054, 0xefce, 0x2010, 0x1, 0xdf11, 0x201, 0x20fe, 0xf033, 0xfcd, 0x1042, 0xefdf, 0x1010, 0x11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13789313] cycle (D:8)
	FIFO/*2c00*/(32, 0x202, 0xdfef, 0x400e, 0xcf24, 0x2fba, 0x1065, 0xdfbd, 0x302f, 0x202, 0xef12, 0xefee, 0x501f, 0xaf14, 0x50ca, 0xd057, 0x1fba, 0x202, 0x33, 0x10ff, 0xdf01, 0x500d, 0xbf25, 0x4fba, 0xf066, 0x202, 0xdfac, 0x4041, 0xdff2, 0xfee, 0x4031, 0xafe1, 0x70fb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13798921] cycle (D:8)
	FIFO/*2c40*/(32, 0x202, 0xbf36, 0x20ca, 0xf034, 0x10fe, 0xdff0, 0x502f, 0xaff2, 0x202, 0x60eb, 0xbf47, 0x1fba, 0x1044, 0xffee, 0xff00, 0x4020, 0x201, 0xdff1, 0x400e, 0xdf13, 0x10ed, 0x22, 0xffff, 0xfff, 0x202, 0x1053, 0xcfbe, 0x604f, 0xafe3, 0x40fc, 0xdf24, 0x20fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13808529] cycle (D:8)
	FIFO/*2c80*/(32, 0x201, 0xfff0, 0x2010, 0xdff0, 0x401e, 0xcf03, 0x20ed, 0xf023, 0x202, 0xffdd, 0x20ff, 0xf044, 0xefac, 0x5062, 0xafc0, 0x501d, 0x201, 0xef02, 0xf, 0xff0, 0x21, 0xefdf, 0x3030, 0xdfe0, 0x201, 0x301e, 0xef02, 0x100f, 0xff0, 0x21, 0xffde, 0x2031);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13818137] cycle (D:8)
	FIFO/*2cc0*/(32, 0x202, 0xafbf, 0x601d, 0xdf14, 0xfed, 0x3010, 0xcf13, 0x2fbb, 0x201, 0x43, 0xefce, 0x2031, 0xefe0, 0x10, 0xfef, 0xf022, 0x201, 0xfdd, 0x1043, 0xefce, 0x3020, 0xeff1, 0xf, 0x1010, 0x201, 0xef01, 0x20ee, 0xf033, 0xffcd, 0x1032, 0xffef, 0x10);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13827745] cycle (D:8)
	FIFO/*2d00*/(32, 0x201, 0x100f, 0xef11, 0x20ed, 0xe034, 0x1fcc, 0x43, 0xffde, 0x201, 0x11, 0x100f, 0xef11, 0x20ed, 0xf033, 0xfcd, 0x1042, 0x201, 0xffef, 0x10, 0x1010, 0xdff0, 0x40fe, 0xcf24, 0x30db, 0x201, 0xe044, 0x1fdc, 0xf022, 0x20ff, 0xdf02, 0x30fd, 0xdf23);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13837353] cycle (D:8)
	FIFO/*2d40*/(32, 0x201, 0x2fdc, 0xf033, 0xfee, 0x1010, 0x1, 0xeff0, 0x300f, 0x201, 0xcf13, 0x30ec, 0xe034, 0x1fed, 0x12, 0x1000, 0xeff0, 0x201, 0x402f, 0xcff2, 0x400d, 0xdf14, 0x20ed, 0xf012, 0x100f, 0x201, 0xeff1, 0x301f, 0xcf02, 0x40fd, 0xdf24, 0x10ed, 0x11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13846961] cycle (D:8)
	FIFO/*2d80*/(32, 0x201, 0x10, 0xffef, 0x3031, 0xcfd0, 0x402f, 0xcff2, 0x300e, 0x201, 0xff02, 0x101f, 0xefe0, 0x3020, 0xcfe0, 0x401e, 0xcf03, 0x201, 0x20fd, 0xff02, 0x10, 0xffef, 0x1042, 0xefce, 0x3030, 0x201, 0xdfe1, 0x200f, 0x1, 0xf010, 0x1fee, 0x43, 0xefcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13856569] cycle (D:8)
	FIFO/*2dc0*/(32, 0x201, 0x3041, 0xdfd0, 0x302f, 0xeff1, 0x1020, 0xfdf, 0x42, 0x201, 0xefce, 0x2041, 0xefe0, 0x101f, 0x1, 0xef00, 0x20fe, 0x201, 0xe034, 0x1fcc, 0x1053, 0xefce, 0x2031, 0xffef, 0xf021, 0x201, 0x2fee, 0xe033, 0x1fcc, 0x54, 0xffcd, 0x1031, 0xfff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13866177] cycle (D:8)
	FIFO/*2e00*/(32, 0x201, 0xf011, 0x20fe, 0xe023, 0x2fdc, 0x44, 0xffcd, 0x1031, 0x201, 0xfff, 0xef01, 0x300e, 0xcf13, 0x40db, 0xd045, 0x2fcb, 0x201, 0xf044, 0x1fed, 0xe012, 0x30fe, 0xdf13, 0x30dc, 0xe034, 0x201, 0xfdd, 0x22, 0xff, 0xeff0, 0x301f, 0xbff2, 0x50fc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13875785] cycle (D:8)
	FIFO/*2e40*/(32, 0x201, 0xcf25, 0x30db, 0xe024, 0x20fd, 0xef01, 0x301f, 0xcff2, 0x201, 0x400d, 0xcf14, 0x30ec, 0xe023, 0x10fe, 0xef01, 0x301f, 0x201, 0xcff1, 0x401e, 0xcf03, 0x30fd, 0xef13, 0x100f, 0xffe0, 0x201, 0x2031, 0xdfdf, 0x503f, 0xbfe2, 0x400d, 0xdf03, 0x200e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13885393] cycle (D:8)
	FIFO/*2e80*/(32, 0x201, 0xeff1, 0x2010, 0xdfe0, 0x402f, 0xcff2, 0x300e, 0xef02, 0x201, 0xf, 0xfef, 0x32, 0xefce, 0x3041, 0xcfd0, 0x302f, 0x201, 0xeff1, 0x101f, 0xff0, 0x1031, 0xefce, 0x3042, 0xdfcf, 0x201, 0x3030, 0xefe1, 0x101f, 0xff0, 0x21, 0xffce, 0x1042);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13895001] cycle (D:8)
	FIFO/*2ec0*/(32, 0x201, 0xefce, 0x2020, 0xfff0, 0xf010, 0x20ff, 0xe023, 0x1fcc, 0x201, 0x54, 0xffbc, 0x2052, 0xefdf, 0x1021, 0xfef, 0xf022, 0x201, 0x1fcd, 0x43, 0xffcd, 0x1032, 0xfef, 0xf011, 0x20ff, 0x201, 0xdf12, 0x30dc, 0xe045, 0x1fcc, 0x43, 0xfde, 0xf011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13904609] cycle (D:8)
	FIFO/*2f00*/(32, 0x201, 0x20ff, 0xdf12, 0x40ec, 0xd035, 0x2fcb, 0xf044, 0xfdd, 0x201, 0xf022, 0x20fe, 0xdf12, 0x30fd, 0xd024, 0x2fdc, 0xf033, 0x201, 0xfee, 0xff01, 0x201f, 0xcff1, 0x500d, 0xbf14, 0x40eb, 0x201, 0xd035, 0x20dc, 0xf023, 0x20fe, 0xdf02, 0x400e, 0xcf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13914217] cycle (D:8)
	FIFO/*2f40*/(32, 0x201, 0x30ec, 0xe023, 0x10ed, 0xff01, 0x2010, 0xdfe0, 0x402f, 0x201, 0xbff2, 0x400d, 0xdf13, 0x20fd, 0xff01, 0x2010, 0xdfd0, 0x201, 0x4030, 0xbfe1, 0x501e, 0xcf03, 0x30fd, 0xef02, 0x100f, 0x202, 0xcfd1, 0x5040, 0x9fc1, 0x702d, 0xbff4, 0x200d, 0xfe0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13923825] cycle (D:8)
	FIFO/*2f80*/(32, 0x201, 0x21, 0xffce, 0x2052, 0xdfce, 0x4030, 0xcfe1, 0x201e, 0x201, 0xff01, 0x1010, 0xffef, 0x1031, 0xdfdf, 0x3030, 0xdfe0, 0x201, 0x101f, 0xff0, 0x21, 0x1fde, 0x43, 0xffcd, 0x2042, 0x201, 0xefdf, 0x1010, 0xff0, 0xf021, 0x2fdd, 0xf044, 0xffbc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13933433] cycle (D:8)
	FIFO/*2fc0*/(32, 0x201, 0x2053, 0xefce, 0x2031, 0xffe0, 0xf011, 0x1fee, 0xf033, 0x202, 0x1f9a, 0x75, 0xffbc, 0x32, 0x20fe, 0xbf13, 0x70da, 0x201, 0xd034, 0x2fcb, 0xf054, 0xfcd, 0x32, 0xfef, 0xe011, 0x201, 0x30fe, 0xdf23, 0x20dc, 0xf034, 0xfdd, 0x22, 0x10ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13943041] cycle (D:8)
	FIFO/*3000*/(32, 0x201, 0xef01, 0x300e, 0xdf12, 0x30ed, 0xe034, 0x1fdd, 0xf022, 0x201, 0x20ff, 0xdf01, 0x401e, 0xbf03, 0x50ec, 0xcf35, 0x2fdb, 0x202, 0xe056, 0x1fdd, 0xef12, 0x401f, 0xaf02, 0x60fb, 0xbf26, 0x201, 0x20fd, 0xf012, 0x100f, 0xefe0, 0x3020, 0xcfe1, 0x501d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13952649] cycle (D:8)
	FIFO/*3040*/(32, 0x201, 0xcf03, 0x30fd, 0xe013, 0x100f, 0xfff0, 0x2020, 0xdfe0, 0x201, 0x401e, 0xcf03, 0x30fd, 0xef13, 0x10fe, 0xfff0, 0x1020, 0x201, 0xdfe0, 0x3020, 0xdff1, 0x201f, 0xff01, 0x10, 0xfef, 0x201, 0x1032, 0xdfce, 0x4030, 0xcfe1, 0x301e, 0xef02, 0x100e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13962257] cycle (D:8)
	FIFO/*3080*/(32, 0x202, 0xfff1, 0x1032, 0xefbd, 0x4062, 0xcfbf, 0x303f, 0xffe1, 0x201, 0xf010, 0x1fef, 0xf032, 0xfcd, 0x2042, 0xefdf, 0x2020, 0x201, 0xfff1, 0x10, 0x1fff, 0xf022, 0xfcd, 0x1043, 0xefce, 0x202, 0x4051, 0xdfd0, 0x1f, 0x20ff, 0xd023, 0x2fcb, 0xf065);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13971865] cycle (D:8)
	FIFO/*30c0*/(32, 0x201, 0xfde, 0x1021, 0xfff, 0xf011, 0x20ff, 0xd023, 0x2fdc, 0x201, 0xf044, 0xfcc, 0x1032, 0xffef, 0x10, 0x1000, 0xef01, 0x202, 0x40ec, 0xd045, 0x1fbb, 0x44, 0xfde, 0xe011, 0x400e, 0x201, 0xdf02, 0x30fd, 0xd024, 0x1fdc, 0xf033, 0xfee, 0xf011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13981473] cycle (D:8)
	FIFO/*3100*/(32, 0x201, 0x200f, 0xdf01, 0x300e, 0xdf23, 0x2fdc, 0xf033, 0xfee, 0x201, 0x11, 0x1000, 0xeff0, 0x201f, 0xdf02, 0x20ed, 0xdf34, 0x201, 0x30fd, 0xdff1, 0x2020, 0xdfd0, 0x402f, 0xdfe2, 0x20ff, 0x201, 0xd044, 0x10ed, 0xf011, 0x10, 0xfee, 0x21, 0xfff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [13991081] cycle (D:8)
	FIFO/*3140*/(32, 0x202, 0x30dd, 0xd045, 0x30ca, 0xff12, 0x3000, 0xcfb0, 0x3062, 0x202, 0x9fe1, 0x601c, 0xbf25, 0x40eb, 0xeff3, 0x2041, 0xefad, 0x201, 0x2032, 0xdfe0, 0x400e, 0xef03, 0x10fe, 0x12, 0xf010, 0x202, 0x20dc, 0x43, 0xefcd, 0x3020, 0xdff1, 0x100e, 0x1ff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14000689] cycle (D:8)
	FIFO/*3180*/(32, 0x201, 0xf021, 0x1fde, 0x1032, 0xdfdf, 0x3020, 0xcff2, 0x200e, 0x202, 0xff02, 0xf000, 0x2fed, 0x43, 0xdfcd, 0x4041, 0xcfd1, 0x202, 0x201e, 0x1ff0, 0xcf12, 0x40fd, 0xe034, 0xffcc, 0x2052, 0x202, 0xdfcf, 0x1020, 0x20ff, 0xcf12, 0x30ec, 0xf044, 0xef9c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14010297] cycle (D:8)
	FIFO/*31c0*/(32, 0x201, 0x2032, 0xefdf, 0x2010, 0xf001, 0xffff, 0x1010, 0xf001, 0x202, 0x1fdd, 0x53, 0xfcd, 0xf022, 0x200f, 0xdfe1, 0x400e, 0x201, 0xe012, 0x1fdd, 0x43, 0xfdd, 0x21, 0x0, 0xfff, 0x202, 0x2021, 0xdf11, 0x3fcb, 0xe066, 0xfbb, 0x1022, 0xef11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14019905] cycle (D:8)
	FIFO/*3200*/(32, 0x202, 0x1fdd, 0x1022, 0xdf11, 0x50cb, 0xc047, 0x20ca, 0xf013, 0x201, 0x10, 0xfff, 0x2000, 0xdf12, 0x40ec, 0xd024, 0xfed, 0x202, 0x2033, 0xbff1, 0x400d, 0xf02, 0xcf01, 0x600c, 0xbf04, 0x201, 0x100e, 0x1, 0xff01, 0xf, 0x2000, 0xcf01, 0x401e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14029513] cycle (D:8)
	FIFO/*3240*/(32, 0x202, 0xbf05, 0x10ec, 0x2032, 0xdfdf, 0x1020, 0x30ff, 0xaff2, 0x202, 0x702d, 0xbfe3, 0x20fd, 0x1033, 0xefce, 0x1031, 0x1000, 0x202, 0xdfcf, 0x3051, 0xefcf, 0x10, 0x21, 0xfde, 0xef11, 0x201, 0x2010, 0xefd0, 0x2030, 0xeff0, 0x20fe, 0xe033, 0x1fdd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14039121] cycle (D:8)
	FIFO/*3280*/(32, 0x202, 0xf034, 0x10, 0x1fbd, 0xf055, 0xffdd, 0x20ff, 0xd034, 0x202, 0x20dc, 0xff02, 0xf031, 0x1fab, 0x54, 0xdfee, 0x60fd, 0x202, 0xaf25, 0x30fb, 0xff1, 0xd043, 0x3fba, 0x45, 0xcfef, 0x202, 0x700c, 0x9f16, 0x30fb, 0x1012, 0xcf01, 0x40fc, 0xff13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14048729] cycle (D:8)
	FIFO/*32c0*/(32, 0x202, 0xdfff, 0x502e, 0xcfd2, 0x1030, 0x3fdd, 0xbf35, 0x30db, 0x201, 0x1012, 0xdfe0, 0x402f, 0xdfe1, 0x101f, 0x1000, 0xeff0, 0x201, 0x1010, 0x0, 0xefe0, 0x2031, 0xffdf, 0x11, 0x100f, 0x201, 0xeff0, 0x1010, 0x11, 0xffdf, 0x1042, 0xfde, 0x11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14058337] cycle (D:8)
	FIFO/*3300*/(32, 0x201, 0x1010, 0xfff0, 0x0, 0x21, 0xfce, 0x53, 0xfdd, 0x202, 0x2022, 0xe022, 0x1fcc, 0x23, 0xe011, 0x3fbb, 0xc057, 0x201, 0x10ed, 0xf01, 0x11, 0xff, 0x10f0, 0xe022, 0x3fcc, 0x201, 0xe044, 0xfed, 0x2011, 0xef01, 0x100f, 0x1000, 0xdf12);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14067945] cycle (D:8)
	FIFO/*3340*/(32, 0x202, 0x70d9, 0xbf37, 0xec, 0x3010, 0xdff2, 0x101e, 0x30ff, 0x201, 0xdf02, 0x40fd, 0xef03, 0xfe, 0x1010, 0xfff0, 0xf010, 0x201, 0x30fe, 0xcf03, 0x400d, 0xef03, 0xfee, 0x1021, 0xffdf, 0x202, 0x31, 0x300f, 0xbfd1, 0x404f, 0xdfe1, 0x10ff, 0xf032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14077553] cycle (D:8)
	FIFO/*3380*/(32, 0x201, 0x1fef, 0xef01, 0x301f, 0xdfe0, 0x302f, 0xeff1, 0x1fee, 0x202, 0xe066, 0x2fba, 0xef13, 0x2030, 0xefae, 0x3042, 0xcff1, 0x202, 0x40dc, 0xc056, 0x30db, 0xff02, 0x42, 0xfac, 0x1054, 0x202, 0xcfef, 0x50fd, 0xbf15, 0x300c, 0xffd0, 0x63, 0xffac);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14087161] cycle (D:8)
	FIFO/*33c0*/(32, 0x201, 0x2021, 0xcff1, 0x40fd, 0xdf13, 0x10fd, 0x1000, 0xe011, 0x202, 0x20db, 0x1033, 0xcfdf, 0x602e, 0xcfd2, 0x1030, 0x2fcd, 0x201, 0xe022, 0x1fed, 0x1022, 0xdfe0, 0x302f, 0xefe1, 0x10, 0x201, 0x10ff, 0xff01, 0xfe, 0x1021, 0xefdf, 0x2030, 0xffd0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14096769] cycle (D:8)
	FIFO/*3400*/(32, 0x202, 0x21, 0x300f, 0xcff2, 0x20fe, 0xf033, 0xffac, 0x1074, 0x201, 0xfde, 0xf012, 0x100f, 0xff01, 0x1ffe, 0x32, 0xffcd, 0x201, 0x1043, 0xffde, 0x11, 0x10, 0xfff0, 0x100f, 0xe022, 0x202, 0x3fa9, 0xd067, 0x1fcb, 0xf012, 0x1010, 0xdf00, 0x40ed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14106377] cycle (D:8)
	FIFO/*3440*/(32, 0x201, 0xe023, 0x2fcc, 0xe034, 0x1fed, 0x11, 0x0, 0xff00, 0x201, 0x30fe, 0xdf23, 0x30ec, 0xe024, 0xfee, 0x1010, 0xf001, 0x201, 0xff00, 0x200f, 0xcf02, 0x40fd, 0xdf13, 0x10fe, 0xf011, 0x201, 0x100f, 0xef01, 0x400e, 0xbf03, 0x40fc, 0xef13, 0xfee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14115985] cycle (D:8)
	FIFO/*3480*/(32, 0x202, 0x1032, 0xfef, 0xeff0, 0x502f, 0x9fd2, 0x702d, 0xbff4, 0x201, 0x10fe, 0xf012, 0x100f, 0xeff0, 0x3020, 0xdfe0, 0x302f, 0x201, 0xeff1, 0x100e, 0xf011, 0x100f, 0xfff0, 0x2020, 0xdfe0, 0x202, 0x603f, 0xbff3, 0x40ec, 0xef24, 0xe, 0xfdf, 0x1053);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14125593] cycle (D:8)
	FIFO/*34c0*/(32, 0x201, 0xffde, 0x1032, 0xefef, 0x201f, 0xeff1, 0x30, 0x2fbc, 0x201, 0xd045, 0x20db, 0x40e0, 0xaf15, 0x401c, 0xfe1, 0xdf12, 0x201, 0x102e, 0x30ff, 0xdfd1, 0x62, 0x1fcc, 0x1ff0, 0xc033, 0x201, 0x400c, 0xfb0, 0xc055, 0x30db, 0x1f02, 0xcf02, 0x303e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14135201] cycle (D:8)
	FIFO/*3500*/(32, 0x201, 0x2fbe, 0xcf35, 0x201d, 0x20f0, 0xefd0, 0xf063, 0x40ba, 0x201, 0xfff3, 0xd042, 0x40ec, 0xfd1, 0xb054, 0x60ea, 0xfe2, 0x201, 0xcf12, 0x303e, 0x2fad, 0xbf35, 0x302d, 0x2fdf, 0xefe1, 0x201, 0xf073, 0x4f99, 0xcf26, 0xe030, 0x40ec, 0xfd1, 0xa055);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14144809] cycle (D:8)
	FIFO/*3540*/(32, 0x200, 0x40fc, 0xfff2, 0xe011, 0x201f, 0x1fdf, 0xdf23, 0x301e, 0x200, 0xfd0, 0xf012, 0xf020, 0x30dd, 0xdf14, 0x102f, 0x20ee, 0x200, 0xff02, 0xe021, 0x40ed, 0xeff2, 0xf010, 0x200f, 0xfd0, 0x200, 0xd022, 0x301e, 0xffd0, 0xf032, 0x1f, 0x30de, 0xcf24);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14154417] cycle (D:8)
	FIFO/*3580*/(32, 0x201, 0x403c, 0x2fad, 0xdf25, 0xe02f, 0x70db, 0xaff5, 0x104f, 0x201, 0x30ee, 0xefe1, 0xd042, 0x500c, 0xefb0, 0xe064, 0x10fd, 0x201, 0x3fce, 0xaf36, 0x402c, 0x2fbe, 0xbf46, 0x100d, 0x50ee, 0x200, 0xdf02, 0x202f, 0x1fdf, 0xff02, 0xf010, 0x20fe, 0xefe1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14164025] cycle (D:8)
	FIFO/*35c0*/(32, 0x201, 0xf063, 0x20dc, 0x1ff1, 0xbf34, 0x300c, 0x1fcf, 0xbf45, 0x201, 0x30fb, 0x2fe0, 0xaff3, 0x305f, 0x2fad, 0xcf25, 0x102f, 0x201, 0x30dd, 0xdfe2, 0x62, 0x3fab, 0xff14, 0xd021, 0x40fd, 0x201, 0xfd1, 0xc043, 0x40eb, 0xff2, 0xcf01, 0x304f, 0x2fbd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14173633] cycle (D:8)
	FIFO/*3600*/(32, 0x201, 0xcf24, 0x202e, 0x1fde, 0xef02, 0xf052, 0x4faa, 0xcf36, 0x201, 0x1e, 0x40ee, 0xefe2, 0xd053, 0x50da, 0xef04, 0xe010, 0x201, 0x302f, 0xfcf, 0xdf33, 0x301e, 0xfcf, 0xff12, 0xf031, 0x201, 0x50bb, 0xbf26, 0x102e, 0x30de, 0xeff2, 0xd042, 0x60da);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14183241] cycle (D:8)
	FIFO/*3640*/(32, 0x201, 0xbff5, 0x2f, 0x200f, 0xfcf, 0xd044, 0x40fc, 0xffd1, 0x201, 0xf032, 0xf010, 0x40cd, 0xbf25, 0x101e, 0x30de, 0xef03, 0x201, 0xe020, 0x60ec, 0xafe4, 0x104f, 0x20ee, 0xffd0, 0xc054, 0x201, 0x50eb, 0xdfd2, 0xf052, 0x10fd, 0x2fdf, 0xbf35, 0x300c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14192849] cycle (D:8)
	FIFO/*3680*/(32, 0x201, 0x1fd0, 0xdf23, 0x1e, 0x50ee, 0xafe3, 0x2050, 0x2fcd, 0x201, 0xfff2, 0xd043, 0x50eb, 0xdfc2, 0xe074, 0x30cb, 0x1ff2, 0x201, 0xaf34, 0x600b, 0xffc1, 0xd043, 0x200d, 0x20e0, 0xbf03, 0x200, 0x102f, 0x1fef, 0xff01, 0x20, 0x20fe, 0xffe1, 0xf042);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14202457] cycle (D:8)
	FIFO/*36c0*/(32, 0x200, 0x20dc, 0xf02, 0xd011, 0x300d, 0xffd1, 0xe032, 0x20fd, 0x201, 0xfe2, 0xbf13, 0x503d, 0xf9e, 0xd044, 0x201e, 0x2fde, 0x201, 0xef02, 0xe052, 0x50aa, 0xdf15, 0xe020, 0x500d, 0xffc1, 0x201, 0xc054, 0x60ea, 0xefe3, 0xd021, 0x402e, 0xf9e, 0xc066);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14212065] cycle (D:8)
	FIFO/*3700*/(32, 0x201, 0x30fb, 0x1fc0, 0xdf23, 0x3f, 0x4fbc, 0xcf36, 0x1e, 0x201, 0x30ee, 0xeff2, 0xe031, 0x60ec, 0xcfe3, 0xf030, 0x301e, 0x201, 0x1fae, 0xb076, 0x50fa, 0xfc1, 0xd044, 0x101e, 0x4fad, 0x201, 0xaf47, 0x300b, 0x2fdf, 0xcf24, 0x103e, 0x30dd, 0xdff3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14221673] cycle (D:8)
	FIFO/*3740*/(32, 0x200, 0x101f, 0x1fe0, 0xfff1, 0xd042, 0x200d, 0xffe0, 0xf021, 0x201, 0x100c, 0x5fcd, 0xaf26, 0x500b, 0xffe1, 0xdf22, 0x301e, 0x200, 0x2fdf, 0xcf13, 0x102f, 0xfef, 0xff01, 0xf021, 0x20fe, 0x201, 0xefe2, 0xf042, 0x1fed, 0x1001, 0xdf12, 0x50fc, 0xffc1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14231281] cycle (D:8)
	FIFO/*3780*/(32, 0x201, 0xd033, 0x301d, 0x2fdf, 0xbf14, 0x303e, 0x2fbd, 0xef13, 0x201, 0xf031, 0x20ed, 0xef02, 0x1020, 0x2fcd, 0xff23, 0xe010, 0x201, 0x40fd, 0xefe2, 0xd042, 0x300c, 0x1fd0, 0xcf02, 0x2040, 0x201, 0xfbd, 0xf033, 0x100f, 0x2fde, 0xcf14, 0x103f, 0x3fac);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14240889] cycle (D:8)
	FIFO/*37c0*/(32, 0x201, 0xcf36, 0xf02f, 0x40ec, 0xefe2, 0xe032, 0x30fd, 0xeff1, 0x201, 0x10, 0x1010, 0xffcf, 0xe043, 0x20fd, 0x1fd0, 0xcf24, 0x201, 0x103f, 0x4fbc, 0xcf25, 0xf01e, 0x40fe, 0xdfe2, 0x31, 0x201, 0x30ed, 0xdf03, 0x102f, 0x20ff, 0xffd0, 0xe053, 0x30ec);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14250497] cycle (D:8)
	FIFO/*3800*/(32, 0x201, 0xfd1, 0xe023, 0x1f, 0x40cd, 0xcf25, 0x100d, 0x20f0, 0x201, 0xdff1, 0x30, 0x30dd, 0xcf03, 0x103f, 0x30dd, 0xefe2, 0x201, 0xe053, 0x30eb, 0xfe1, 0xe033, 0x100e, 0x2fef, 0xcf23, 0x201, 0x300c, 0xff1, 0xef11, 0x102f, 0x3fde, 0xbf04, 0x104f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14260105] cycle (D:8)
	FIFO/*3840*/(32, 0x201, 0x20dd, 0xffe1, 0xd053, 0x30db, 0xfff2, 0xe032, 0x30ed, 0x201, 0xff1, 0xc032, 0x40fc, 0xffe2, 0xd032, 0x201e, 0x2fdf, 0x201, 0xcf13, 0x204f, 0x1fce, 0xff12, 0xe031, 0x40dc, 0xdf04, 0x201, 0xf030, 0x30dd, 0xeff3, 0xd032, 0x50fb, 0xefd2, 0xd032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14269713] cycle (D:8)
	FIFO/*3880*/(32, 0x201, 0x300d, 0xfd0, 0xdf22, 0x202f, 0xfbe, 0xe033, 0x1e, 0x201, 0x3fde, 0xcf14, 0x3f, 0x30cc, 0xdf14, 0xe020, 0x50fc, 0x201, 0xdfe2, 0xf041, 0x30fd, 0xffd1, 0xd032, 0x300d, 0xfc0, 0x201, 0xd044, 0x200d, 0x2fcf, 0xcf24, 0x102e, 0x3fcd, 0xcf25);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14279321] cycle (D:8)
	FIFO/*38c0*/(32, 0x201, 0x1e, 0x40fe, 0xcfe3, 0x40, 0x30dd, 0xeff2, 0xe042, 0x201, 0x40fc, 0xffc1, 0xd054, 0x30fc, 0x1fd0, 0xcf34, 0x200d, 0x201, 0x2fdf, 0xbf34, 0x301d, 0x2fef, 0xcf03, 0x104f, 0x3fcd, 0x201, 0xdf03, 0x30, 0x30ed, 0xffd1, 0xe053, 0x30db, 0xfff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14288929] cycle (D:8)
	FIFO/*3900*/(32, 0x201, 0xd032, 0x30fc, 0xfe1, 0xc033, 0x400c, 0x1fd0, 0xcf13, 0x201, 0x202e, 0x2fce, 0xdf13, 0x103f, 0x1fde, 0xfff1, 0xf042, 0x201, 0x40cb, 0xdf14, 0xe030, 0x40ec, 0xffe2, 0xd043, 0x40fc, 0x202, 0xffb2, 0xaf34, 0x503d, 0xfae, 0xcf44, 0x402d, 0x1fae);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14298537] cycle (D:8)
	FIFO/*3940*/(32, 0x201, 0xef22, 0x20, 0x30cc, 0xdf14, 0xf030, 0x30ed, 0xfff2, 0x201, 0xd032, 0x40fd, 0xeff2, 0xf020, 0x200f, 0xffd0, 0xe043, 0x201, 0x30fd, 0xfd0, 0xd033, 0x101e, 0x3fcd, 0xdf14, 0x2f, 0x201, 0x20ee, 0xff02, 0xf010, 0x30fe, 0xdff2, 0x30, 0x20fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14308145] cycle (D:8)
	FIFO/*3980*/(32, 0x201, 0xffe1, 0xd043, 0x40fc, 0xfd0, 0xe033, 0x101e, 0x2fde, 0x201, 0xdf24, 0x100e, 0x1fef, 0xef12, 0x100e, 0x20ef, 0xdf02, 0x202, 0x106f, 0x50bb, 0xefd3, 0xb074, 0x50fa, 0xfa0, 0xd065, 0x202, 0x10fc, 0x3fde, 0x9f36, 0x60fa, 0xffc2, 0xaf45, 0x401b);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14317753] cycle (D:8)
	FIFO/*39c0*/(32, 0x201, 0x2fdf, 0xcf13, 0x103f, 0x20de, 0xfff1, 0xf031, 0x10fe, 0x201, 0xff0, 0xf022, 0x10ee, 0xf01, 0xdf21, 0x400d, 0xfd1, 0x201, 0xd033, 0x201d, 0x2fdf, 0xcf03, 0x103f, 0x1fde, 0xff02, 0x202, 0x31, 0x3fbc, 0xcf14, 0x40, 0x5faa, 0xcf16, 0xc041);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14327361] cycle (D:8)
	FIFO/*3a00*/(32, 0x202, 0x70fa, 0xfa1, 0x9f66, 0x401b, 0x1fc0, 0xcf03, 0x3050, 0x201, 0xfde, 0xe022, 0x101f, 0x2fde, 0xcf23, 0x103f, 0x3fcd, 0x201, 0xef14, 0xe020, 0x30fd, 0xffe1, 0xe021, 0x200e, 0xfff1, 0x202, 0xf020, 0x301f, 0xfaf, 0xb076, 0x40fa, 0x3fae, 0x9f37);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14336969] cycle (D:8)
	FIFO/*3a40*/(32, 0x201, 0x3f, 0x3fcc, 0xdf14, 0x1f, 0x20fe, 0xeff1, 0x20, 0x202, 0x50cc, 0xaf05, 0x105f, 0x40dc, 0xffc2, 0xa076, 0x500a, 0x202, 0x1fb0, 0xdf03, 0xf061, 0x2f9a, 0xc056, 0x1d, 0xfee, 0x201, 0xdf22, 0xf03f, 0x3fcc, 0xcf35, 0xe02f, 0x300e, 0xdff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14346577] cycle (D:8)
	FIFO/*3a80*/(32, 0x201, 0xe030, 0x201e, 0xdfe0, 0xf031, 0xf010, 0xffff, 0xd042, 0x201, 0x1e, 0xffef, 0xd043, 0xe01e, 0x30fd, 0xaf25, 0x2d, 0x201, 0x200f, 0xcf01, 0xf030, 0x101f, 0xcf01, 0x40, 0xf00f, 0x201, 0xeff0, 0xd053, 0x10fd, 0xfff1, 0xc053, 0xf00d, 0x200f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14356185] cycle (D:8)
	FIFO/*3ac0*/(32, 0x201, 0xaf13, 0x102e, 0xff10, 0xdf11, 0x20, 0x10, 0xcf01, 0x201, 0x1050, 0xffef, 0xef01, 0xd063, 0x10ec, 0xff01, 0xc043, 0x201, 0xd, 0x21, 0xcf12, 0x201e, 0xef02, 0xdf21, 0x101f, 0x201, 0xff01, 0xcf01, 0x51, 0xffde, 0xff22, 0xc043, 0x10fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14365793] cycle (D:8)
	FIFO/*3b00*/(32, 0x201, 0xff12, 0xd032, 0x1ffd, 0xef33, 0xcf11, 0x301e, 0xdf03, 0x201, 0xcf31, 0x202f, 0xdff1, 0xef21, 0xf042, 0xffde, 0xf033, 0x201, 0xdf21, 0xf0f, 0xef23, 0xd021, 0x1ffe, 0xdf35, 0xdf10, 0x201, 0x302f, 0xcff3, 0xef31, 0x1020, 0xdff1, 0xff21, 0xf032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14375401] cycle (D:8)
	FIFO/*3b40*/(32, 0x201, 0xffef, 0xe044, 0xff10, 0xff0, 0xef34, 0xef10, 0x20ff, 0x201, 0xcf35, 0xff0f, 0x2021, 0xdff2, 0xf031, 0x1021, 0xdff1, 0x201, 0x32, 0xff22, 0xfef, 0xe054, 0xff0f, 0x1ff0, 0xdf34, 0x201, 0xff0f, 0x3000, 0xbf15, 0x100f, 0x22, 0xeff1, 0x22);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14385009] cycle (D:8)
	FIFO/*3b80*/(32, 0x201, 0x1f01, 0xdff2, 0x1032, 0xff01, 0x1fe0, 0xe045, 0xffe, 0x201, 0x1f01, 0xdf34, 0xfff, 0x2012, 0xcf03, 0x201f, 0xff03, 0x201, 0xeff1, 0x1021, 0x1ff1, 0xeff2, 0x1042, 0xffe0, 0x1ff1, 0x201, 0xdf35, 0x1fee, 0xf03, 0xef23, 0x1fff, 0x1f13, 0xcf03);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14394617] cycle (D:8)
	FIFO/*3bc0*/(32, 0x201, 0x301f, 0xfff3, 0xeff1, 0x2021, 0xfe1, 0xfff2, 0x43, 0x201, 0xfcf, 0x1f13, 0xef13, 0x2fef, 0xf03, 0xef12, 0x2fee, 0x201, 0xf14, 0xdff1, 0x401f, 0xefe3, 0xf01, 0x2022, 0xfd0, 0x201, 0xf02, 0x23, 0x1fcf, 0x1024, 0xff01, 0x3fef, 0xff04);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14404225] cycle (D:8)
	FIFO/*3c00*/(32, 0x201, 0xff11, 0x40ee, 0xff04, 0xfff0, 0x4011, 0xefd2, 0x1011, 0x201, 0x2001, 0xffd1, 0x1001, 0x1012, 0x1fbf, 0x34, 0xfff0, 0x201, 0x3fef, 0xff14, 0xfff0, 0x40ff, 0xef04, 0x10ff, 0x2012, 0x201, 0xffd1, 0x2011, 0x20f0, 0xffd1, 0x1011, 0x1001, 0x2fce);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14413833] cycle (D:8)
	FIFO/*3c40*/(32, 0x201, 0x35, 0xfde, 0x30f0, 0xff03, 0x1fef, 0x40f0, 0xdff3, 0x201, 0x30fe, 0x1002, 0xffd0, 0x2021, 0x1fe0, 0xfd0, 0x1022, 0x201, 0xfe0, 0x3fdf, 0xf024, 0x2fdd, 0x2001, 0xff02, 0x20ee, 0x201, 0x30f1, 0xdff2, 0x40fd, 0x1ff2, 0xffe0, 0x2021, 0xfe0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14423441] cycle (D:8)
	FIFO/*3c80*/(32, 0x202, 0x2fbf, 0x3044, 0xff9d, 0x60ef, 0xdf25, 0x6f99, 0x1f05, 0x201, 0xf000, 0x30ee, 0x20f2, 0xdff1, 0x400e, 0xfe1, 0xfef, 0x201, 0x2011, 0xfdf, 0x20ff, 0x1012, 0xfce, 0x2011, 0xf001, 0x201, 0x30dd, 0x3, 0xf0f0, 0x40ee, 0x2, 0xffef, 0x4010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14433049] cycle (D:8)
	FIFO/*3cc0*/(32, 0x201, 0xffd0, 0x20ff, 0x2001, 0xfdf, 0x1000, 0x1000, 0xfce, 0x201, 0x2022, 0xfff0, 0x40dd, 0x13, 0xffff, 0x40fe, 0xff02, 0x202, 0x1fbc, 0x5032, 0xdfaf, 0x501f, 0x10f1, 0xfbe, 0x2021, 0x201, 0x1000, 0x2fce, 0x23, 0xffef, 0x40fe, 0xff02, 0xee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14442657] cycle (D:8)
	FIFO/*3d00*/(32, 0x202, 0x600f, 0xdff2, 0x50ba, 0x2024, 0xdfae, 0x502f, 0x20ef, 0x202, 0xfad, 0x2043, 0xf0ee, 0x60aa, 0xe046, 0xffbb, 0x600e, 0x202, 0xefe2, 0x30dc, 0x4000, 0xbff1, 0x60da, 0x2002, 0xdfae, 0x201, 0x2020, 0xef, 0x1fde, 0x1032, 0xffee, 0x30fe, 0xf012);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14452265] cycle (D:8)
	FIFO/*3d40*/(32, 0x201, 0x1fdd, 0x2011, 0xeff0, 0x20fd, 0x1001, 0xdff0, 0x400d, 0x202, 0xe1, 0xffbc, 0x2062, 0xfcc, 0x30dd, 0x1043, 0xefbc, 0x201, 0x201f, 0xf011, 0x20dc, 0x1022, 0xefff, 0x30fd, 0x1, 0x201, 0xefef, 0x302f, 0xffe0, 0x10ee, 0x22, 0xfee, 0x100f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14461873] cycle (D:8)
	FIFO/*3d80*/(32, 0x201, 0x10, 0xfde, 0x1021, 0xe000, 0x30dc, 0xf013, 0xefff, 0x201, 0x300d, 0xf001, 0xffee, 0x2030, 0xefef, 0x200e, 0xf011, 0x201, 0xffde, 0x1020, 0xf010, 0x1fdd, 0x32, 0xe00f, 0x40fd, 0x202, 0xdf14, 0xefec, 0x502e, 0xcff1, 0x10db, 0x3041, 0xafce);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14471481] cycle (D:8)
	FIFO/*3dc0*/(32, 0x201, 0x201e, 0x1, 0xffde, 0x1031, 0xe00f, 0x20dc, 0xf033, 0x202, 0xcfcb, 0x602d, 0xbf02, 0x10eb, 0x2031, 0xbfff, 0x300b, 0x201, 0x1011, 0xdfef, 0x202f, 0xf000, 0xfee, 0x32, 0xefff, 0x202, 0x50eb, 0xc056, 0xffb9, 0x3051, 0xbff0, 0x30ea, 0x33);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14481089] cycle (D:8)
	FIFO/*3e00*/(32, 0x201, 0xdfff, 0x201e, 0xf001, 0xffee, 0x1041, 0xffef, 0x10fe, 0x202, 0xe054, 0xefdc, 0x301e, 0xc033, 0x1fb9, 0x1053, 0xbfff, 0x201, 0x20fd, 0x12, 0xdfef, 0x302f, 0xeff1, 0x10ed, 0x32, 0x202, 0xdfbb, 0x301f, 0xd023, 0xfcb, 0x2031, 0xbf11, 0x40c9);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14490697] cycle (D:8)
	FIFO/*3e40*/(32, 0x202, 0xf045, 0xbffe, 0x501c, 0xdf13, 0xdfdc, 0x4051, 0xbfd0, 0x202, 0x30fc, 0xf054, 0xdfbc, 0x3040, 0xd011, 0x1fcb, 0x1053, 0x202, 0xafff, 0x60fa, 0xcf35, 0xefdc, 0x4040, 0xdff1, 0xfed, 0x202, 0x2042, 0xbfdf, 0x301e, 0xf033, 0xefbc, 0x3052, 0xbf01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14500305] cycle (D:8)
	FIFO/*3e80*/(32, 0x202, 0x30ca, 0xf066, 0xbfcd, 0x702d, 0xaf15, 0x1fdb, 0x2053, 0x202, 0xbfef, 0x200d, 0x43, 0xcfbd, 0x3040, 0xd011, 0xfbb, 0x202, 0x1064, 0xcfef, 0x40ec, 0xe055, 0xdfcc, 0x5040, 0x9f03, 0x202, 0x20ea, 0x1044, 0xbfdf, 0x401d, 0xd034, 0xffab, 0x2073);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14509913] cycle (D:8)
	FIFO/*3ec0*/(32, 0x202, 0xbfe0, 0x30ec, 0xe056, 0xefcc, 0x401f, 0xcf34, 0xfdb, 0x202, 0x3042, 0x9ff2, 0x40fb, 0x34, 0xbfce, 0x503f, 0xbf24, 0x201, 0xfed, 0x1043, 0xdfef, 0x200f, 0xe023, 0xfed, 0x2021, 0x202, 0xaf12, 0x30eb, 0x1044, 0xafdf, 0x502e, 0xef13, 0xdfcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14519521] cycle (D:8)
	FIFO/*3f00*/(32, 0x202, 0x4051, 0xaff2, 0x20ec, 0x65, 0xdfbc, 0x4020, 0xb034, 0x202, 0x1fba, 0x3054, 0x9fe1, 0x50fb, 0xf056, 0xcfac, 0x5051, 0x201, 0xcff1, 0xe, 0x1041, 0xffbd, 0x1032, 0xf000, 0x30dd, 0x201, 0xf13, 0xef00, 0x20fd, 0x1011, 0xfbd, 0x4011, 0xcff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14529129] cycle (D:8)
	FIFO/*3f40*/(32, 0x201, 0x30fc, 0x1021, 0xfbd, 0x2021, 0xf0f0, 0x20cd, 0x1022, 0x201, 0xefef, 0x40ec, 0xf012, 0x20bb, 0x3010, 0xf0f0, 0x20ec, 0x201, 0x2010, 0xffce, 0x40fe, 0xf1, 0x1fcd, 0x2011, 0xf0ef, 0x201, 0x30dc, 0x1021, 0xffcd, 0x400e, 0xf001, 0x20dc, 0x3020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14538737] cycle (D:8)
	FIFO/*3f80*/(32, 0x201, 0xffde, 0x40ed, 0x1001, 0xfce, 0x301f, 0xef, 0x20dd, 0x201, 0x1021, 0xde, 0x30dd, 0x12, 0xfcd, 0x3010, 0xf0e0, 0x201, 0x30dc, 0x2012, 0xefde, 0x500d, 0xf1, 0xfcd, 0x3020, 0x201, 0xffee, 0x30dd, 0x22, 0xffdd, 0x301f, 0x0, 0x10cc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14548345] cycle (D:8)
	FIFO/*3fc0*/(32, 0x201, 0x2021, 0xf0ee, 0x40ec, 0x11, 0xffdd, 0x301e, 0xf0f0, 0x201, 0x10cc, 0x2031, 0xefdd, 0x400c, 0xf001, 0xcc, 0x2020, 0x201, 0xe0fe, 0x30db, 0x22, 0xf0dc, 0x400d, 0xf000, 0xdc, 0x201, 0x202f, 0xe0ee, 0x30ec, 0x21, 0xf0dc, 0x301d, 0xf00f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14557953] cycle (D:8)
	FIFO/*4000*/(32, 0x201, 0x10db, 0x1031, 0xe0ed, 0x40fb, 0xf011, 0xf0dc, 0x302e, 0x201, 0xe0ef, 0x20ec, 0x1020, 0xe0ed, 0x300d, 0xf000, 0xf0dc, 0x201, 0x103f, 0xf0fe, 0x10ec, 0x21, 0xe0ed, 0x400c, 0xe011, 0x201, 0xdc, 0x2030, 0xdfee, 0x30fc, 0xf021, 0xefec, 0x203f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14567561] cycle (D:8)
	FIFO/*4040*/(32, 0x201, 0xe0ff, 0xec, 0x31, 0xe0fd, 0x20fd, 0xf021, 0xe0ed, 0x201, 0x202e, 0xe00f, 0x10ec, 0x41, 0xdffd, 0x201d, 0xe020, 0x201, 0xefec, 0x104f, 0xd0fe, 0x10fc, 0xf041, 0xd0ec, 0x202d, 0x201, 0xd010, 0xec, 0x40, 0xd0fe, 0x100c, 0xe021, 0xd0fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14577169] cycle (D:8)
	FIFO/*4080*/(32, 0x201, 0x102e, 0xe010, 0xf0fd, 0x1040, 0xdffe, 0x200c, 0xe032, 0x201, 0xefec, 0x203f, 0xdf0f, 0x10fc, 0xf031, 0xdffe, 0x201d, 0x201, 0xe011, 0xe0fd, 0x103f, 0xd00f, 0xfd, 0xf041, 0xdffe, 0x201, 0x202e, 0xd011, 0xfffd, 0x40, 0xdf0f, 0x100d, 0xf032);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14586777] cycle (D:8)
	FIFO/*40c0*/(32, 0x201, 0xcffe, 0x203e, 0xdf11, 0xf0fd, 0x42, 0xdffe, 0x101e, 0x201, 0xe022, 0xeffd, 0x30, 0xef00, 0xe, 0xf032, 0xcf0f, 0x201, 0x101e, 0xe032, 0xdffe, 0x1040, 0xcf00, 0x100d, 0xe043, 0x201, 0xdffe, 0x102f, 0xd022, 0xfffd, 0xf042, 0xdf0f, 0x100e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14596385] cycle (D:8)
	FIFO/*4100*/(32, 0x201, 0xe033, 0xdffe, 0x103f, 0xdf11, 0xfffe, 0x42, 0xcf0f, 0x201, 0x101e, 0xe032, 0xeffe, 0x1030, 0xdf11, 0xffd, 0xf043, 0x201, 0xdfff, 0x201e, 0xdf23, 0xfffd, 0x1041, 0xcf00, 0x101e, 0x202, 0xd055, 0xbfee, 0x304f, 0xbf23, 0xdffd, 0x2062, 0x9f01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14605993] cycle (D:8)
	FIFO/*4140*/(32, 0x201, 0x10fe, 0xf033, 0xdfee, 0x2020, 0xcf12, 0xffd, 0x43, 0x202, 0x9fdf, 0x402e, 0xcf45, 0xcfdd, 0x3062, 0xaff2, 0xffd, 0x202, 0xf075, 0xbfdf, 0x303f, 0xbf45, 0xffdc, 0x1064, 0xbf02, 0x201, 0xf0f, 0xf033, 0xdfff, 0x2020, 0xdf23, 0xffee, 0x1043);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14615601] cycle (D:8)
	FIFO/*4180*/(32, 0x201, 0xcff0, 0x201f, 0xe033, 0xffee, 0x1031, 0xdf02, 0x1ffe, 0x202, 0xf065, 0xbff0, 0x201e, 0xc056, 0xdfdd, 0x3052, 0xaf24, 0x201, 0xffe, 0x43, 0xdfef, 0x2010, 0xdf23, 0xffee, 0x1032, 0x201, 0xcf01, 0x200e, 0xf033, 0xefef, 0x2020, 0xdf13, 0x1ffd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14625209] cycle (D:8)
	FIFO/*41c0*/(32, 0x202, 0x1065, 0xafe0, 0x301e, 0xe045, 0xdfce, 0x3042, 0xbf24, 0x201, 0xfee, 0x1032, 0xcff1, 0x300e, 0xe023, 0xffde, 0x2032, 0x201, 0xcff2, 0x20fe, 0x33, 0xefef, 0x2021, 0xef12, 0xfee, 0x201, 0x1022, 0xdff1, 0x10ff, 0x23, 0xefef, 0x2021, 0xef13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14634817] cycle (D:8)
	FIFO/*4200*/(32, 0x201, 0xfee, 0x1032, 0xdff1, 0x200f, 0xf023, 0xefdf, 0x2032, 0x201, 0xdf02, 0x1fee, 0x34, 0xefef, 0x2010, 0xef23, 0xfde, 0x202, 0x2055, 0xbff2, 0x30fd, 0x1035, 0xbfd0, 0x4020, 0xdf35, 0x201, 0xfde, 0x2032, 0xcf02, 0x20fe, 0xf034, 0xefde, 0x2021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14644425] cycle (D:8)
	FIFO/*4240*/(32, 0x202, 0x9f25, 0x4fca, 0x1057, 0xafd1, 0x401e, 0xff25, 0xefbe, 0x201, 0x2021, 0xdf02, 0x1fee, 0x1023, 0xdfe0, 0x201f, 0xf013, 0x201, 0xfde, 0x2022, 0xdf02, 0x20ed, 0x1023, 0xdfd0, 0x3020, 0x201, 0xef02, 0x1fde, 0x2033, 0xdfe1, 0x300f, 0x13, 0xffdf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14654033] cycle (D:8)
	FIFO/*4280*/(32, 0x202, 0x3043, 0xdf03, 0x2fbc, 0x3035, 0xafe2, 0x50fd, 0x36, 0x201, 0xffce, 0x3022, 0xdf02, 0x2fed, 0x1033, 0xefdf, 0x3010, 0x201, 0xff12, 0x1fce, 0x1033, 0xeff1, 0x20fe, 0x23, 0xefdf, 0x202, 0x5031, 0xcf14, 0x2fab, 0x3045, 0xbfe1, 0x50fd, 0x1035);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14663641] cycle (D:8)
	FIFO/*42c0*/(32, 0x201, 0xefdf, 0x2021, 0xef12, 0x2fdd, 0x1033, 0xdfe0, 0x400e, 0x201, 0xe013, 0xfcd, 0x2032, 0xdff1, 0x30fd, 0x13, 0xefe0, 0x202, 0x502f, 0xf013, 0xfac, 0x4043, 0xaff3, 0x60ca, 0x1047, 0x201, 0xefdf, 0x3010, 0xef02, 0x2fdd, 0x2023, 0xdfe0, 0x300e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14673249] cycle (D:8)
	FIFO/*4300*/(32, 0x202, 0x25, 0xef9d, 0x5052, 0xcff2, 0x4fbb, 0x2046, 0xbfbf, 0x202, 0x601e, 0xf014, 0xfac, 0x4043, 0xcff2, 0x50ba, 0x3035, 0x201, 0xdfe0, 0x301f, 0xf012, 0xfcd, 0x2033, 0xdfe0, 0x30fe, 0x201, 0x23, 0xffce, 0x2021, 0xff01, 0x2fdd, 0x1023, 0xeff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14682857] cycle (D:8)
	FIFO/*4340*/(32, 0x202, 0x60ec, 0x25, 0xdfad, 0x5041, 0xcf03, 0x4fa9, 0x2067, 0x201, 0xdfef, 0x300f, 0xf013, 0xfcd, 0x2032, 0xdff1, 0x30ed, 0x202, 0x46, 0xbfbe, 0x703f, 0xdf04, 0x2fab, 0x3054, 0xbfd0, 0x201, 0x30fe, 0x12, 0xefef, 0x3010, 0xf012, 0x1fcd, 0x2033);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14692465] cycle (D:8)
	FIFO/*4380*/(32, 0x201, 0xdfe0, 0x40fd, 0xf023, 0xffcd, 0x3031, 0xdff1, 0x30ed, 0x202, 0x1046, 0xcfbe, 0x602e, 0xef03, 0xfac, 0x4043, 0xbff1, 0x202, 0x50ca, 0x1046, 0xcfbd, 0x702e, 0xdf14, 0x1f9a, 0x4064, 0x201, 0xdfe0, 0x30fd, 0x23, 0xefde, 0x3020, 0xef01, 0x2fdd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14702073] cycle (D:8)
	FIFO/*43c0*/(32, 0x201, 0x1033, 0xefef, 0x400e, 0xf013, 0xfdd, 0x2021, 0xeff0, 0x201, 0x20ed, 0x1022, 0xefef, 0x300e, 0xf012, 0xffcd, 0x3031, 0x202, 0xafd1, 0x60ca, 0xf067, 0xcf9b, 0x603f, 0xbf04, 0x3fb9, 0x202, 0x2055, 0xbfdf, 0x60eb, 0xf035, 0xdfbc, 0x5040, 0xcff2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14711681] cycle (D:8)
	FIFO/*4400*/(32, 0x202, 0x2fba, 0x2065, 0xbfce, 0x500c, 0xe045, 0xefab, 0x5041, 0x201, 0xdf01, 0x20ec, 0x33, 0xdfef, 0x400e, 0xe013, 0xffdd, 0x201, 0x3031, 0xdff1, 0x20ec, 0x43, 0xdfcd, 0x402f, 0xdf02, 0x201, 0x1fdc, 0x1043, 0xdfde, 0x300e, 0xf013, 0xffee, 0x3010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14721289] cycle (D:8)
	FIFO/*4440*/(32, 0x202, 0xbff3, 0x3fca, 0x2064, 0xbfbe, 0x500d, 0xe034, 0xefab, 0x201, 0x2031, 0xdff1, 0x20ed, 0x33, 0xdfde, 0x401f, 0xdf13, 0x202, 0x1fa9, 0x4064, 0xafc0, 0x50fc, 0xf045, 0xefbb, 0x4030, 0x202, 0xcf12, 0x1fbb, 0x3054, 0xbfdf, 0x50fc, 0xe056, 0xef9a);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14730897] cycle (D:8)
	FIFO/*4480*/(32, 0x202, 0x5041, 0xaf03, 0x2fca, 0x2065, 0xafbe, 0x601d, 0xc046, 0x301, 0xfdc, 0x2032, 0xdff0, 0x20fd, 0xf033, 0xffdd, 0x2010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14740505] cycle (D:8)
	FIFO/*44c0*/(32, 0x40c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0xf00, 0x60f2, 0x3fcb, 0xc4);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14750113] cycle (D:8)
	FIFO/*4500*/(32, 0x7, 0xef22, 0xb011, 0x4f, 0xb05e, 0xf, 0x40b3, 0x4fc1, 0x7, 0xd05f, 0xffff, 0x30e4, 0x409e, 0xd0f1, 0x5f01, 0xc052, 0x6, 0x1b, 0x10cd, 0x2f1e, 0xcf13, 0x1032, 0xb01f, 0xf2, 0x5, 0x1f11, 0x1ff1, 0xff01, 0xef24, 0xff11, 0x20fe, 0x10ef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14759721] cycle (D:8)
	FIFO/*4540*/(32, 0x5, 0x100f, 0x10ed, 0x2, 0x2f00, 0xd032, 0xf0f0, 0x1f20, 0x5, 0xe02d, 0xffe3, 0xf4e, 0xd0e2, 0x4ff0, 0xf030, 0x2fc3, 0x5, 0xff43, 0xd01c, 0xff11, 0x501d, 0xc0b3, 0x70f0, 0xd02a, 0x4, 0x11, 0xf30, 0x1, 0xf0b0, 0x3f11, 0xe020, 0x3ff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14769329] cycle (D:8)
	FIFO/*4580*/(32, 0x5, 0xef0d, 0x10d1, 0xef53, 0x301b, 0xe0ad, 0x6070, 0xc0db, 0x4, 0xf3, 0xf2c, 0xe022, 0xf0, 0xff11, 0x3f, 0x2fd0, 0x4, 0xef10, 0x30f4, 0x3fe1, 0xd022, 0x1fed, 0x1f10, 0xf0ff, 0x4, 0xfff2, 0x3f2f, 0xf0e0, 0xf02f, 0x20ed, 0xf0d3, 0xf041);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14778937] cycle (D:8)
	FIFO/*45c0*/(32, 0x4, 0xf3e, 0xf, 0xf2f, 0xcf00, 0x20f3, 0xffe, 0x201e, 0x4, 0x4ff5, 0xcf1f, 0xf0e1, 0x5f02, 0xf0ce, 0x1001, 0x300c, 0x4, 0xf0ff, 0xe01e, 0xf41, 0xfd2, 0x30e1, 0xc0d1, 0xf020, 0x3, 0xf01e, 0xf012, 0x2fe0, 0xf022, 0xfe, 0x1ffe, 0x40);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14788545] cycle (D:8)
	FIFO/*4600*/(32, 0x4, 0xdfd2, 0xf24, 0xe2, 0x0, 0xf02f, 0xcfed, 0x4022, 0x4, 0x1fff, 0xf0c4, 0x504f, 0xc00e, 0xe001, 0xf020, 0xdf00, 0x4, 0x2fd1, 0x103f, 0x1e, 0xf11, 0x10f1, 0xfc3, 0x2f12, 0x4, 0xc03d, 0xe0ee, 0x2f30, 0xf0b0, 0x5f11, 0xef1f, 0xe010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14798153] cycle (D:8)
	FIFO/*4640*/(32, 0x4, 0x101d, 0xefd2, 0x4020, 0xf01, 0xe0fe, 0x2001, 0x1f, 0x3, 0x1fee, 0x11, 0xf1f, 0xc0ef, 0x2f02, 0xf1f, 0x20f1, 0x3, 0x2f, 0xe0, 0xf1, 0xff1, 0x1010, 0x40e0, 0xeff0, 0x3, 0x20e1, 0xef1f, 0x103e, 0x1, 0x1f00, 0xee, 0xf004);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14807761] cycle (D:8)
	FIFO/*4680*/(32, 0x3, 0xff3f, 0xffe0, 0x40, 0xf0ee, 0xf020, 0x1011, 0xf00d, 0x3, 0x10, 0xfff0, 0x1000, 0x1f11, 0xf03f, 0xf00f, 0xeff2, 0x3, 0xf31, 0x2fe2, 0x1ff0, 0x10f0, 0x2f02, 0xe0e0, 0x3fff, 0x4, 0x401f, 0x3fae, 0xd02f, 0xd0ee, 0xf00f, 0x203d, 0xf1e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14817369] cycle (D:8)
	FIFO/*46c0*/(32, 0x4, 0x1000, 0xe005, 0xc02e, 0xff3, 0x4f10, 0xe022, 0x5fb4, 0x3, 0xef00, 0x100e, 0xefff, 0x300f, 0xe01f, 0x1014, 0xf0ed, 0x3, 0xf010, 0xdfd3, 0x4f01, 0xd01f, 0x30ef, 0x5f1f, 0xf0d2, 0x3, 0xe, 0x20d0, 0xef0e, 0x100f, 0xf01a, 0xe040, 0xe030);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14826977] cycle (D:8)
	FIFO/*4700*/(32, 0x3, 0xe000, 0xe000, 0xcf52, 0xf00, 0xd3, 0x3010, 0x40a1, 0x3, 0x2f12, 0xeff0, 0x1ffc, 0x1032, 0xfffe, 0xaf, 0x3021, 0x3, 0xc02f, 0x5f2f, 0xef0f, 0x10, 0x20ef, 0xdf10, 0xe000, 0x3, 0x4f30, 0xef0f, 0xc4, 0xf40, 0xf010, 0xf0d0, 0x2f4f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14836585] cycle (D:8)
	FIFO/*4740*/(32, 0x3, 0xf0fd, 0x2005, 0xffec, 0xd01e, 0xf021, 0xcf20, 0x100f, 0x3, 0x1f01, 0xe, 0x10e1, 0xf02, 0x1010, 0x2fee, 0x1fe3, 0x3, 0x20f0, 0xf0e0, 0xd01c, 0x102f, 0xf02c, 0xfd1, 0x34, 0x3, 0xec, 0xff13, 0x2010, 0xef20, 0xff03, 0x1fff, 0x30ec);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14846193] cycle (D:8)
	FIFO/*4780*/(32, 0x3, 0xc0e1, 0x1f11, 0x10ff, 0x22, 0x1021, 0xefe0, 0xf001, 0x3, 0xf20, 0xe01f, 0xfd0, 0xf02f, 0x10df, 0x4030, 0x10e3, 0x3, 0xfcc, 0x1010, 0x21, 0xd00f, 0xfe, 0x1f01, 0xff, 0x3, 0xed, 0x105d, 0xbf02, 0x60fc, 0xe016, 0xf1f, 0xd00d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14855801] cycle (D:8)
	FIFO/*47c0*/(32, 0x3, 0x40f2, 0xcf21, 0xffdc, 0xf064, 0x30cd, 0xe033, 0xef1f, 0x4, 0xf21, 0x6fc5, 0x40d4, 0xfd1, 0xe05d, 0xff3, 0xf4e, 0x3, 0x20b1, 0x20fe, 0x10de, 0xf0fd, 0x1022, 0xef1e, 0x20f2, 0x3, 0x30fe, 0xf010, 0xa04d, 0xef2f, 0xdf4f, 0x30e3, 0x4fee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14865409] cycle (D:8)
	FIFO/*4800*/(32, 0x4, 0xf0c1, 0xf16, 0x1f14, 0xeff3, 0x6035, 0x100e, 0xd0df, 0x3, 0xe, 0xe000, 0x2fee, 0x30ff, 0xfc0, 0x1031, 0xff1, 0x4, 0xd0e1, 0x3f23, 0xb0fd, 0x3ff2, 0x1c, 0x20ff, 0xefe0, 0x4, 0x2f13, 0xe0bd, 0x4f23, 0xd03c, 0xfff3, 0x1f53, 0x40af);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14875017] cycle (D:8)
	FIFO/*4840*/(32, 0x4, 0xe0dd, 0x104a, 0xdf1d, 0xf25, 0xff1e, 0x2f05, 0xf00d, 0x3, 0xfff1, 0xe03e, 0x1003, 0xff1f, 0x40c3, 0x1ffe, 0xe0e0, 0x3, 0x1f3f, 0x2fe2, 0x10ee, 0xf1, 0xd03b, 0xff, 0xff5c, 0x3, 0x10e0, 0x1f0f, 0x20c3, 0xf03e, 0xb0f0, 0xf60, 0xf0d5);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14884625] cycle (D:8)
	FIFO/*4880*/(32, 0x3, 0x2f01, 0x20ed, 0xe, 0xc3, 0x4f0b, 0xf0f5, 0x5f10, 0x3, 0x20c0, 0xd0ee, 0xd03c, 0xef40, 0xf2, 0x5fdd, 0xc00c, 0x3, 0xf012, 0xf2e, 0x1ff2, 0xd001, 0x3f03, 0xf0ff, 0xeff2, 0x3, 0xe05d, 0xfff4, 0x1011, 0x4fb2, 0xe02d, 0x20e4, 0xdf1a);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14894233] cycle (D:8)
	FIFO/*48c0*/(32, 0x2, 0x10f2, 0x1ff0, 0x20e2, 0xd02d, 0xf0e0, 0xf04e, 0x1fe2, 0x3, 0x1f50, 0xc1, 0xe02c, 0x20ff, 0xff4e, 0x2fd6, 0x1f11, 0x3, 0xa4, 0x1019, 0xe00e, 0xdf50, 0x30ce, 0x3f, 0x10e0, 0x2, 0x2f0c, 0xd000, 0xff21, 0x2001, 0x1fe1, 0x20ff, 0x2ffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14903841] cycle (D:8)
	FIFO/*4900*/(32, 0x3, 0xa0, 0x6f13, 0x10ee, 0x2fe3, 0xe0df, 0x202f, 0xc0fd, 0x3, 0x4f22, 0x1fe1, 0x70c0, 0xd0d0, 0x20ec, 0x1d, 0xf11, 0x3, 0xd00f, 0x1023, 0xf0fc, 0xc04e, 0xb05e, 0xf23, 0xd033, 0x3, 0x7fa0, 0x1e, 0xf0e0, 0xcf21, 0x3f26, 0x1f0f, 0xc3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14913449] cycle (D:8)
	FIFO/*4940*/(32, 0x3, 0x200a, 0x900f, 0xe05f, 0x6f13, 0xff0, 0x30bf, 0xbf31, 0x3, 0xf03, 0xff4e, 0x5fe4, 0x40ee, 0xc0c2, 0x105c, 0xe0ef, 0x3, 0x2f14, 0x2fc2, 0xd1, 0x20ff, 0xef5b, 0xf01e, 0xf1f, 0x3, 0xfc5, 0x3f61, 0xb0cf, 0x3f6b, 0xc012, 0x1fc5, 0xdf14);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14923057] cycle (D:8)
	FIFO/*4980*/(32, 0x3, 0xf65, 0x30b0, 0x6fd4, 0xd0c0, 0x201f, 0x20dd, 0x3f29, 0x2, 0xf0e0, 0xf32, 0xcf0f, 0x3f11, 0xe00f, 0xf001, 0xf11, 0x3, 0x10bf, 0x2d, 0x2ff4, 0x10c4, 0x3011, 0xbf3e, 0xe060, 0x3, 0xe01b, 0x2fd6, 0x6ff0, 0x20b0, 0xf0ce, 0x60c0, 0xcf40);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14932665] cycle (D:8)
	FIFO/*49c0*/(32, 0x3, 0x20b2, 0x60ce, 0xf00a, 0xd01a, 0xdf32, 0x1e, 0xfe5, 0x3, 0x1f46, 0x1ff0, 0xdf33, 0x2f11, 0x5fcf, 0x30de, 0x30ed, 0x3, 0xa003, 0xb030, 0x104f, 0x3a, 0xc0bf, 0xf11, 0x4f6f, 0x2, 0xc0f1, 0x2f11, 0x300f, 0xe0d2, 0x3d, 0x200f, 0x10f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14942273] cycle (D:8)
	FIFO/*4a00*/(32, 0x2, 0x1fce, 0xff02, 0xf003, 0x1002, 0x12, 0xf0fd, 0x3ff1, 0x2, 0x3f21, 0xe0df, 0xe010, 0x200d, 0xd2, 0xc010, 0xf05e, 0x2, 0xd2, 0xf03f, 0x1013, 0xff0, 0xf2, 0xef10, 0x1fe3, 0x3, 0xdf3b, 0x30e0, 0x205c, 0x20f4, 0x2f1b, 0x30c5, 0xd041);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14951881] cycle (D:8)
	FIFO/*4a40*/(32, 0x2, 0xcd, 0xf00, 0xf0cf, 0x103d, 0xc012, 0x501f, 0xf0d0, 0x2, 0xff33, 0xef01, 0xdff1, 0x40fe, 0xff3, 0x40ed, 0x2f05, 0x3, 0xd0e1, 0xe01a, 0xf0bc, 0x5021, 0xb0ea, 0xf060, 0x205e, 0x2, 0x30ce, 0xdf2f, 0x1f03, 0xef2f, 0x2000, 0x2fed, 0x10e2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14961489] cycle (D:8)
	FIFO/*4a80*/(32, 0x2, 0x2f1e, 0xffd3, 0x3e, 0xf0df, 0xf22, 0xf, 0xef2d, 0x2, 0x2011, 0x4fcf, 0xd0e1, 0xf41, 0xff0, 0x20, 0xf00b, 0x2, 0x2f21, 0xf0e1, 0x1f01, 0xf020, 0x2fd2, 0xdff4, 0x2d, 0x2, 0x2ffc, 0x30e4, 0x4fd2, 0xf0d3, 0x2f30, 0x1ffe, 0xf011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14971097] cycle (D:8)
	FIFO/*4ac0*/(32, 0x2, 0xf0ec, 0xef22, 0xd052, 0x200d, 0xf020, 0x100e, 0xdfe3, 0x2, 0x1f43, 0xe, 0xeff1, 0x1f11, 0x1fb1, 0xd043, 0x300e, 0x3, 0x70b2, 0xf0bd, 0xef1b, 0xdf37, 0x402a, 0xf0fd, 0xd03f, 0x2, 0x2fef, 0xcf45, 0x2e, 0xef11, 0xe0f2, 0x2fee, 0xf0f4);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14980705] cycle (D:8)
	FIFO/*4b00*/(32, 0x2, 0x4c, 0x40cd, 0x4fd5, 0xfe, 0xff30, 0x2e, 0x50bc, 0x2, 0xf0d1, 0xb050, 0x10de, 0xd032, 0x20fb, 0xff0e, 0xff54, 0x2, 0xe1, 0xcf21, 0x302c, 0x1fc1, 0xcf24, 0x2f02, 0xdf14, 0x2, 0x50ef, 0x2fce, 0xf034, 0x4fde, 0xe002, 0x20fb, 0xfcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14990313] cycle (D:8)
	FIFO/*4b40*/(32, 0x2, 0xc031, 0xf2e, 0xb031, 0x202d, 0xffdf, 0xd024, 0x102d, 0x2, 0xcf25, 0x2f31, 0x2fb1, 0xcf44, 0x4fe0, 0x2fd3, 0x300e, 0x2, 0x3fbd, 0xf5, 0x30fe, 0xf0d2, 0x203c, 0x10bc, 0xdf5f, 0x2, 0x102f, 0xbf1e, 0xe010, 0x2fff, 0xaf45, 0xf4f, 0xdf23);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [14999921] cycle (D:8)
	FIFO/*4b80*/(32, 0x2, 0x40f3, 0x20ae, 0xef32, 0x50f3, 0xffe2, 0xf0d1, 0x60db, 0x2, 0xd010, 0x503d, 0xbfc0, 0xf05f, 0xf0ea, 0xff35, 0xe02e, 0x2, 0xdff2, 0x1033, 0x40dd, 0xcff0, 0x3f31, 0xe0e2, 0xf02, 0x2, 0x30fd, 0x1f04, 0x10fe, 0x2fc0, 0xd010, 0x30de, 0xdf0d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15009529] cycle (D:8)
	FIFO/*4bc0*/(32, 0x2, 0x2002, 0xef2d, 0xf033, 0x30dc, 0xcf0f, 0xe040, 0x2ff3, 0x2, 0xc03f, 0x401d, 0xdf11, 0x1004, 0xcf0b, 0x1014, 0x50fc, 0x2, 0x2fa0, 0x1f32, 0xefd3, 0xe04f, 0x201c, 0x30ac, 0xf010, 0x2, 0xef2e, 0xc013, 0xf04d, 0x1fe3, 0xf30, 0xd0f0, 0xc04d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15019137] cycle (D:8)
	FIFO/*4c00*/(32, 0x2, 0x50f2, 0x3fb0, 0xdff3, 0xf62, 0x30bf, 0x1f, 0xfb, 0x2, 0xff15, 0xe032, 0xc01b, 0x303f, 0x2fc1, 0xcff4, 0xf040, 0x2, 0xd012, 0x1b, 0x40fc, 0xdf33, 0x200e, 0xdfe3, 0xd051, 0x2, 0x30fc, 0xff23, 0x20e0, 0xe0cf, 0xbf41, 0x5001, 0x10c1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15028745] cycle (D:8)
	FIFO/*4c40*/(32, 0x2, 0xe00c, 0xff3f, 0x2f04, 0x30cf, 0xd02e, 0x1f21, 0x4fc1, 0x2, 0xd0e0, 0x10, 0xef23, 0x40d2, 0x10ef, 0xc02d, 0x1f2e, 0x2, 0xf04, 0xc02e, 0xd05e, 0xf012, 0x30cf, 0xff1f, 0xdf50, 0x2, 0x20f3, 0x20dd, 0xe01c, 0x1f02, 0xffe4, 0xe2, 0x2d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15038353] cycle (D:8)
	FIFO/*4c80*/(32, 0x2, 0x2f0e, 0x30c4, 0xdfef, 0xb05f, 0x4021, 0x50cd, 0xd0c0, 0x2, 0xef3f, 0xef33, 0x2, 0x40fa, 0x2fe3, 0x1f06, 0xe01f, 0x2, 0xe020, 0x5fee, 0x4fb0, 0xbfe4, 0xd060, 0xe032, 0x30ce, 0x2, 0x50ec, 0xcf03, 0xef24, 0x4e, 0x10ea, 0x3fec, 0xfd4);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15047961] cycle (D:8)
	FIFO/*4cc0*/(32, 0x2, 0xb015, 0xc05d, 0x202a, 0x4fb4, 0x1fd3, 0xbf30, 0xb062, 0x2, 0x50ed, 0x40ac, 0xff01, 0xff42, 0xe003, 0x10ed, 0x4f1c, 0x2, 0xfff2, 0xd0f4, 0xc06f, 0xe02c, 0x6fe1, 0xffd0, 0xb002, 0x2, 0x1f22, 0x2f1e, 0x10ce, 0xff2, 0xff21, 0xf5, 0x301d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15057569] cycle (D:8)
	FIFO/*4d00*/(32, 0x2, 0xf0ec, 0xf0d3, 0x1f2f, 0xe00d, 0x1, 0x4f0d, 0xe0d0, 0x2, 0xff13, 0xf05e, 0xe0e3, 0x4ffe, 0xff1d, 0xd0f3, 0x3f23, 0x2, 0xe01e, 0x10c2, 0x3f1f, 0xc0ef, 0x10f3, 0x2f5f, 0xe0c1, 0x2, 0x1fe5, 0x1f3c, 0xb0e2, 0x5f03, 0x2f1c, 0xd0d1, 0x2051);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15067177] cycle (D:8)
	FIFO/*4d40*/(32, 0x2, 0xf03c, 0xa3, 0x3f1f, 0xdf0f, 0xf003, 0xf04c, 0xe0dc, 0x2, 0x3f14, 0x1f13, 0xd020, 0x22, 0xf0fd, 0x2fbf, 0x3033, 0x2, 0xcf0f, 0xc0, 0x1f4f, 0xe00e, 0xf13, 0x1f11, 0xf0fe, 0x2, 0xe0f1, 0x2f1f, 0xf11, 0xe0e2, 0x3f2e, 0xd0fe, 0xe4);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15076785] cycle (D:8)
	FIFO/*4d80*/(32, 0x2, 0x2f4e, 0xb0ff, 0x20f2, 0x1f2c, 0xc021, 0xd03f, 0x10ef, 0x2, 0xff4f, 0xd0e2, 0x4fdf, 0xd041, 0xf0d2, 0x3f20, 0xef2e, 0x3, 0xe0a4, 0x4f12, 0xc04b, 0x94, 0x4f4c, 0xb01b, 0x10f7, 0x2, 0x2f2e, 0xd0e0, 0xff21, 0x1f2d, 0x30e1, 0xeff2, 0xf11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15086393] cycle (D:8)
	FIFO/*4dc0*/(32, 0x2, 0xf2, 0xffe1, 0x104e, 0xf0df, 0xff13, 0x202f, 0xe0df, 0x2, 0x1f11, 0x2f2c, 0xd1, 0x1f32, 0xf01d, 0xd4, 0xff3d, 0x2, 0xe0de, 0x20e2, 0x3e, 0xe0d0, 0x2f00, 0xe03e, 0xd2, 0x2, 0x1f30, 0xe00c, 0xe3, 0x2f30, 0xd0f1, 0x1fe2, 0xf1e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15096001] cycle (D:8)
	FIFO/*4e00*/(32, 0x3, 0x60e4, 0x4fef, 0xc02e, 0x4fc2, 0x1f01, 0x10ee, 0x6ff1, 0x2, 0xf0f1, 0xdf, 0xf1d, 0xd002, 0x20e0, 0xf41, 0xf0d2, 0x2, 0x402e, 0xdf1d, 0xffe2, 0x3f31, 0xd01f, 0x30d1, 0x3f10, 0x2, 0xcf30, 0x10e3, 0x400c, 0xd0dd, 0x20e1, 0x3010, 0x10df);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15105609] cycle (D:8)
	FIFO/*4e40*/(32, 0x2, 0xf04, 0x101d, 0xf0cf, 0x1f20, 0xc02f, 0xe0f2, 0x3f2e, 0x3, 0xffe0, 0x40e6, 0x4f2b, 0xafc4, 0x3011, 0xfdd, 0xf1, 0x3, 0xff0d, 0xdf23, 0x2f3f, 0x21, 0xfc5, 0x10e0, 0xd00e, 0x3, 0x2f01, 0x1f34, 0x102d, 0x30ed, 0xd0f1, 0x2d, 0xd050);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15115217] cycle (D:8)
	FIFO/*4e80*/(32, 0x3, 0xffe1, 0x1f05, 0x203c, 0x20c3, 0x7f22, 0xbfdf, 0x10fe, 0x2, 0xe001, 0x400f, 0xff2b, 0xe0e4, 0xff12, 0xd04f, 0xcf02, 0x2, 0x5f01, 0xf00, 0x1fd0, 0x1010, 0xf0e4, 0xf1d, 0x2, 0x2, 0x40ce, 0xe, 0xd04e, 0xdff2, 0x1f10, 0x10f0, 0xf20);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15124825] cycle (D:8)
	FIFO/*4ec0*/(32, 0x2, 0xd1, 0xff53, 0xef30, 0x20c0, 0x2f, 0xff2e, 0xffd4, 0x2, 0x3f12, 0xe02e, 0x1ff2, 0x2fce, 0x10e1, 0xdf3f, 0xfe0, 0x2, 0x30f0, 0x203e, 0xb010, 0x1ff0, 0xef2c, 0xf0f3, 0x2f31, 0x2, 0xe0e1, 0xefe0, 0x1ff1, 0x22, 0xf11, 0x2c, 0x10b2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15134433] cycle (D:8)
	FIFO/*4f00*/(32, 0x2, 0xf3d, 0xd000, 0x30f5, 0x10fa, 0xe02e, 0xffe2, 0x2f20, 0x2, 0xb002, 0x3f4e, 0xd0fe, 0x50c2, 0xf03b, 0xfe5, 0x40f3, 0x2, 0x2c, 0x10bf, 0x3fd3, 0xd04b, 0x3fd5, 0xb03b, 0x6f04, 0x2, 0xfe, 0x10d0, 0x10fe, 0x203f, 0xf01, 0x20c4, 0x101d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15144041] cycle (D:8)
	FIFO/*4f40*/(32, 0x2, 0xcf02, 0xff60, 0xc0, 0xff6c, 0x20c0, 0x5ff1, 0x20dd, 0x2, 0xff30, 0xf0e5, 0x2fe4, 0xef1f, 0x12, 0xe0e1, 0x105c, 0x2, 0xe0ec, 0x40de, 0x10ee, 0xf23, 0xf0e1, 0x2f14, 0xdf6f, 0x2, 0xffd3, 0xe0ef, 0xf00b, 0x2d, 0x5006, 0xf0dd, 0x10df);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15153649] cycle (D:8)
	FIFO/*4f80*/(32, 0x2, 0xff21, 0x3fe3, 0xbf4d, 0x0, 0x41, 0xf0e3, 0xff0a, 0x2, 0x10e2, 0xffe0, 0x1fbd, 0x1011, 0x23, 0x202e, 0xf004, 0x2, 0xc023, 0x10ec, 0xf0fb, 0x30ae, 0xf0f0, 0xf1b, 0xb043, 0x2, 0x5f12, 0xf031, 0xe012, 0x3fe2, 0xf020, 0xdfbb, 0x3f13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15163257] cycle (D:8)
	FIFO/*4fc0*/(32, 0x2, 0x2022, 0xffc1, 0xefdc, 0x20ef, 0x3044, 0xe00f, 0xff0c, 0x2, 0x3ff4, 0xd00d, 0xff22, 0x1f01, 0xf021, 0xef00, 0x1ff2, 0x2, 0x3011, 0xe00d, 0xff1, 0xff00, 0x3f11, 0xcff2, 0x3001, 0x2, 0x100d, 0xff00, 0x30d2, 0x3fe2, 0xe0f0, 0xdf1f, 0xe011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15172865] cycle (D:8)
	FIFO/*5000*/(32, 0x2, 0xf04f, 0x1fc1, 0x1025, 0x2fdb, 0x7fc5, 0xe0cd, 0x3b, 0x1, 0xd012, 0xf11, 0xd023, 0xd, 0x1f00, 0xf0, 0xf00f, 0x2, 0xf061, 0xdf10, 0x4, 0x1f01, 0x40ec, 0xff0e, 0x1fe3, 0x2, 0x10ef, 0x30e1, 0xf01f, 0x20ff, 0x10fd, 0xd0f0, 0xf01c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15182473] cycle (D:8)
	FIFO/*5040*/(32, 0x2, 0x4003, 0xefe1, 0xcf53, 0x202e, 0x1fc0, 0xff13, 0x2010, 0x2, 0x4fed, 0xf0e3, 0x22, 0xdff0, 0xf051, 0xf00b, 0xf1f, 0x1, 0xe001, 0x1f10, 0xef01, 0x1f01, 0x2, 0x21, 0x10ce, 0x2, 0x5f02, 0xffb0, 0x3011, 0xe00e, 0xfffb, 0xe020, 0x1f24);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15192081] cycle (D:8)
	FIFO/*5080*/(32, 0x2, 0xc011, 0x201e, 0xf02e, 0xc001, 0xf00f, 0x2fd2, 0x34, 0x2, 0xdfe3, 0x20fb, 0x2023, 0xffef, 0xf02f, 0x11, 0x1fd1, 0x3, 0xf01a, 0xdfe1, 0x3f5f, 0xc021, 0x1f24, 0x60f9, 0xd0ed, 0x2, 0xdf, 0x2f31, 0xdf01, 0x100f, 0xf00f, 0x2fc2, 0x40ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15201689] cycle (D:8)
	FIFO/*50c0*/(32, 0x2, 0xef22, 0xd0f1, 0xff0, 0x1f12, 0xe020, 0x200d, 0xcff1, 0x2, 0x2f13, 0x1034, 0xffdd, 0x50be, 0xf030, 0xdf12, 0x300d, 0x2, 0xf, 0x30cf, 0x30bf, 0xff2f, 0x20e1, 0xef21, 0xfff0, 0x2, 0x1c, 0xdf20, 0x1000, 0xef33, 0xdf1f, 0x4f10, 0x1fd3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15211297] cycle (D:8)
	FIFO/*5100*/(32, 0x2, 0xf0d0, 0xf02, 0xf31, 0xff0f, 0x1014, 0xed, 0x300e, 0x2, 0xef3f, 0xdf0d, 0x42, 0xffe0, 0x4fcc, 0x2f24, 0xfff0, 0x2, 0xf0f1, 0x2f1d, 0x5fc0, 0x3f12, 0x10a2, 0xf00e, 0xe00e, 0x2, 0xd05d, 0xf01e, 0x2fc2, 0xcf3d, 0xef63, 0x9f42, 0x32);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15220905] cycle (D:8)
	FIFO/*5140*/(32, 0x2, 0x2f12, 0x1ff2, 0xefd3, 0x30f4, 0xd00d, 0x2f2c, 0x30f0, 0x2, 0x1fc1, 0x30e5, 0xef20, 0x1c, 0xe02c, 0xef0e, 0xeff2, 0x2, 0xef23, 0xe00f, 0xf03e, 0xff, 0x1f11, 0x1f14, 0xfef, 0x2, 0x101f, 0xf000, 0xfec, 0xf, 0xf13, 0xf12, 0xe013);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15230513] cycle (D:8)
	FIFO/*5180*/(32, 0x2, 0xd, 0x202f, 0xef00, 0xfe2, 0xff12, 0xe1, 0x201d, 0x2, 0x10ff, 0x1fff, 0xf12, 0xdf13, 0xf00c, 0x500e, 0xe0fd, 0x2, 0xffef, 0xe044, 0xef21, 0x30e0, 0x20ef, 0xffe, 0xff13, 0x2, 0xef22, 0xf010, 0x1e, 0x40cd, 0x3fd0, 0xdf03, 0xef32);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15240121] cycle (D:8)
	FIFO/*51c0*/(32, 0x2, 0xd042, 0x2fe0, 0x30cd, 0x2001, 0xcffe, 0xf032, 0xd051, 0x2, 0xf0fe, 0x500e, 0xffd0, 0xfff2, 0xd030, 0xd030, 0x201f, 0x3, 0x2fcf, 0x2f91, 0xf36, 0xe0e4, 0x104d, 0xfffe, 0x5f1a, 0x2, 0x20d1, 0xdf02, 0xf00e, 0x302e, 0xf00f, 0xfd0, 0xef21);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15249729] cycle (D:8)
	FIFO/*5200*/(32, 0x2, 0xdf14, 0x2f10, 0x1010, 0xffee, 0xe020, 0xef12, 0xf02, 0x2, 0x41, 0xff0, 0xf0e0, 0x3fe0, 0xff00, 0xff44, 0x50cd, 0x2, 0xfd0, 0x40f2, 0xeffe, 0xd, 0x2010, 0xefff, 0xe03e, 0x2, 0xc0ff, 0x3f, 0xd010, 0xe001, 0x104f, 0xef03, 0xf02);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15259337] cycle (D:8)
	FIFO/*5240*/(32, 0x2, 0xef30, 0xf3, 0x5fc0, 0x4fb2, 0xefc0, 0x2002, 0x104e, 0x2, 0xe0, 0xfe, 0x3d, 0xf0eb, 0xbf24, 0xc03e, 0xd05c, 0x1, 0x10, 0x1fff, 0xf011, 0xdf22, 0x401c, 0xf0e0, 0x20f1, 0x2, 0xd, 0xe0ef, 0x1d, 0x3c, 0x9f16, 0xf3f, 0x1041);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15268945] cycle (D:8)
	FIFO/*5280*/(32, 0x2, 0xcfe5, 0x3f3d, 0xfee, 0x30d4, 0x30ef, 0xd0ee, 0x300d, 0x2, 0x304c, 0xe0bf, 0x20e0, 0xef41, 0xb00b, 0xf050, 0xa03b, 0x1, 0x100e, 0x1f03, 0xef11, 0xf0f1, 0x2033, 0xf, 0x10bf, 0x2, 0x7f17, 0xfec, 0xe005, 0x4fcc, 0x1021, 0xe0f4, 0xeff9);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15278553] cycle (D:8)
	FIFO/*52c0*/(32, 0x2, 0xd052, 0xe01f, 0xcf3e, 0xc051, 0x3f22, 0xdfe3, 0x4040, 0x1, 0xeff2, 0xfe, 0x4001, 0xdfe0, 0x300f, 0x22, 0xefde, 0x1, 0x21, 0x10fc, 0x23, 0x3fcd, 0xff2, 0xff1, 0xef34, 0x1, 0xec, 0x2f13, 0xd0fd, 0x20, 0xf02, 0xef, 0x1011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15288161] cycle (D:8)
	FIFO/*5300*/(32, 0x2, 0xed, 0x4fef, 0xef20, 0xdf04, 0xf02f, 0x101e, 0xe1, 0x3, 0xf21, 0xe0e2, 0x2f53, 0xfc1, 0xdf, 0x402d, 0xd0cf, 0x2, 0x1ff2, 0x1f11, 0xe0f0, 0x40df, 0xf02d, 0x2f04, 0xf00d, 0x2, 0x101f, 0xcf0c, 0x1f2f, 0xd015, 0xf2d, 0x2fe1, 0xf40);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15297769] cycle (D:8)
	FIFO/*5340*/(32, 0x2, 0xe0f1, 0xe030, 0x2fdf, 0x1021, 0xf04, 0x20de, 0x2c, 0x2, 0x1fb4, 0x5f13, 0x10c2, 0xd0ea, 0x2001, 0xc0fe, 0x4b, 0x2, 0x20d3, 0x3fde, 0xd0fe, 0xd03e, 0xf050, 0xb00f, 0xdf12, 0x2, 0x20f4, 0x6f24, 0xb0fe, 0x20d6, 0xe0eb, 0x5f1d, 0xcf11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15307377] cycle (D:8)
	FIFO/*5380*/(32, 0x2, 0xffe6, 0x50d5, 0x103b, 0x4fc3, 0x1f3e, 0xe0e3, 0x1000, 0x2, 0x3fee, 0x30e0, 0x9010, 0x40c1, 0xf06d, 0xc01e, 0xe, 0x2, 0x2f20, 0xd02c, 0x1f2f, 0xc6, 0xdf4d, 0xf1, 0x1fff, 0x2, 0x5012, 0xcfff, 0xef43, 0xdf03, 0xf00, 0x10f2, 0xcff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15316985] cycle (D:8)
	FIFO/*53c0*/(32, 0x2, 0x2f22, 0xf043, 0x2fe4, 0x30cb, 0x201f, 0xd0f1, 0xef1e, 0x2, 0x40c3, 0x60ee, 0xf0c1, 0xc00b, 0x103e, 0x2f1f, 0x1ff1, 0x2, 0xf0de, 0xf5f, 0xc02f, 0xd03e, 0xff13, 0xff2, 0xd0e2, 0x2, 0x9f50, 0x3f23, 0x3013, 0xff0, 0xd01d, 0x2d, 0xe053);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15326593] cycle (D:8)
	FIFO/*5400*/(32, 0x2, 0x4fd5, 0x309f, 0xe0, 0xff2, 0x10de, 0x20fd, 0x2f3f, 0x2, 0x1f21, 0x30ed, 0xe01f, 0xf016, 0xeff0, 0xd001, 0xfff1, 0x1, 0x30, 0xdf10, 0x1f2e, 0xf04, 0xf011, 0xe0fc, 0x23, 0x1, 0x2fe0, 0xff10, 0xff2, 0x40ef, 0xf1, 0xff1e, 0x30ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15336201] cycle (D:8)
	FIFO/*5440*/(32, 0x2, 0xd0f3, 0x3fcf, 0x302d, 0xda, 0xf2b, 0x2f34, 0x2ff0, 0x2, 0xd042, 0x90ef, 0xe0ed, 0xef43, 0xf05, 0x1f23, 0x100c, 0x2, 0x303b, 0xd051, 0x1fc1, 0x2fc2, 0xf0c1, 0xc0bf, 0x20de, 0x2, 0x4f30, 0x6f25, 0xf0e2, 0xc01d, 0x61, 0x10ed, 0xaf4f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15345809] cycle (D:8)
	FIFO/*5480*/(32, 0x1, 0xffbf, 0xde, 0xe03f, 0x3f, 0x2012, 0x3fef, 0x1f, 0x1, 0xd000, 0xe01e, 0x1012, 0xffe, 0x40bf, 0x2032, 0x1f1f, 0x1, 0x2f, 0xdf03, 0x30f1, 0xffe1, 0xfffd, 0xf02f, 0xe010, 0x1, 0x3fef, 0xef21, 0xc02f, 0xe, 0x2f13, 0xfff, 0x0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15355417] cycle (D:8)
	FIFO/*54c0*/(32, 0x1, 0xefff, 0x101f, 0x103f, 0xfc1, 0xf001, 0xdf20, 0x101e, 0x1, 0x2014, 0x3fbe, 0xe, 0xcf1e, 0x2f30, 0x2043, 0x1fc1, 0x1, 0xe0de, 0xf02d, 0xff23, 0x1022, 0x3fcf, 0x30fe, 0xd01f, 0x1, 0xd03e, 0xf22, 0x2fd2, 0x20cf, 0xf01e, 0xd02d, 0x2f22);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15365025] cycle (D:8)
	FIFO/*5500*/(32, 0x1, 0x2fe3, 0x40f3, 0xd0e0, 0xe00b, 0xf3f, 0x1ff3, 0x4fd3, 0x1, 0xf0, 0xd01c, 0xf030, 0x1010, 0x3fe3, 0xfe1, 0xe0df, 0x1, 0xd03d, 0xef51, 0x2fe3, 0x2fd2, 0x20fe, 0xf00d, 0xe010, 0x1, 0xfff, 0x3003, 0x30cf, 0xd0fd, 0x3d, 0xef03, 0x3f14);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15374633] cycle (D:8)
	FIFO/*5540*/(32, 0x1, 0x20e0, 0xdd, 0xe01e, 0xcf2f, 0x1f12, 0x30d3, 0x30de, 0x2, 0xb02b, 0xef22, 0x3045, 0x30ee, 0xe0ec, 0x60d4, 0xef0d, 0x2, 0xdf03, 0xf0fe, 0x6fd2, 0xd00c, 0xfd1, 0xd035, 0x305d, 0x2, 0xd0ad, 0x3000, 0xdf3f, 0xcf2f, 0xe5, 0x6ffd, 0x10e0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15384241] cycle (D:8)
	FIFO/*5580*/(32, 0x1, 0xdf00, 0x2, 0x2f4f, 0xf0d0, 0x30e0, 0xff1, 0xef20, 0x1, 0xf001, 0x1f0f, 0x3f0f, 0xd2, 0xff12, 0x1042, 0xffdf, 0x1, 0x10e2, 0x1fff, 0xef00, 0x1001, 0x1f21, 0x2fef, 0x10f0, 0x2, 0xefc6, 0xff7d, 0xffac, 0x40c5, 0x3011, 0xa01d, 0xe03e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15393849] cycle (D:8)
	FIFO/*55c0*/(32, 0x2, 0xff05, 0x1f00, 0xf002, 0xafff, 0x205d, 0xc053, 0xcf01, 0x2, 0x4f22, 0xfe2, 0x1000, 0xfef, 0x1f00, 0x3010, 0xefbe, 0x2, 0x301f, 0x3011, 0x1fc2, 0x40ee, 0xefe0, 0xe00e, 0x2043, 0x2, 0xef30, 0x201d, 0xcfc2, 0xf1e, 0xe040, 0xbf21, 0x3010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15403457] cycle (D:8)
	FIFO/*5600*/(32, 0x2, 0xff12, 0x10ee, 0x2021, 0xcff3, 0x30ed, 0x10f3, 0x3fac, 0x2, 0x3012, 0xafd1, 0x400f, 0x200f, 0xefdf, 0x2f, 0xef01, 0x2, 0x200e, 0xe1, 0xa0fe, 0x6e, 0xaf22, 0x30e1, 0x3012, 0x1, 0xff00, 0xf02f, 0xefe2, 0x20ff, 0x2f00, 0xefd1, 0x4011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15413065] cycle (D:8)
	FIFO/*5640*/(32, 0x1, 0xffe0, 0x2000, 0x10d3, 0xfff, 0xe030, 0xc012, 0x3fe0, 0x1, 0x301d, 0xcfd2, 0x3003, 0xff30, 0xf1e, 0xd4, 0xdf0e, 0x1, 0xe03d, 0xe021, 0x2fe1, 0x402f, 0xb0e2, 0x2e, 0xef32, 0x1, 0x2fec, 0x40f4, 0xff05, 0x3f1e, 0x1f, 0x2fc1, 0x5fe0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15422673] cycle (D:8)
	FIFO/*5680*/(32, 0x1, 0xcf01, 0xe02f, 0xf3f, 0x3fef, 0x30e1, 0xe012, 0xf01c, 0x1, 0x202e, 0xc0de, 0x1012, 0xef1f, 0xef2d, 0x2021, 0xffaf, 0x1, 0x3f, 0xff12, 0xfe, 0xf040, 0xffd1, 0x2fe3, 0xd023, 0x1, 0xff4e, 0x100f, 0xdfe3, 0x3021, 0xf00e, 0xd02d, 0x30);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15432281] cycle (D:8)
	FIFO/*56c0*/(32, 0x1, 0xefe0, 0x0, 0xf01, 0xf03e, 0xe, 0xd00e, 0x3f11, 0x2, 0xff20, 0xb003, 0x2051, 0x3fe1, 0xdf2d, 0xefd5, 0xefd3, 0x1, 0x2011, 0xfe0, 0x4ff3, 0xf, 0xc0d1, 0xe021, 0xf20, 0x1, 0xf2f, 0x20e1, 0xd0d0, 0x102e, 0xc02d, 0x2f, 0x31);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15441889] cycle (D:8)
	FIFO/*5700*/(32, 0x1, 0x100f, 0x10ee, 0xffc, 0xef1e, 0xff24, 0xd2, 0x4f0f, 0x1, 0xffd1, 0x2f04, 0xf05, 0xef22, 0x200e, 0xff0e, 0x1fef, 0x1, 0xf04, 0xf003, 0xf03e, 0xd01c, 0xe02d, 0xff0, 0x3f02, 0x1, 0x20e0, 0xe00f, 0xfc, 0x1f32, 0xffe2, 0x1fd0, 0x2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15451497] cycle (D:8)
	FIFO/*5740*/(32, 0x1, 0x10ee, 0xf02, 0xff22, 0x4fd0, 0x10, 0xf0e0, 0xbf41, 0x1, 0x10f0, 0x10f0, 0x50ed, 0xb000, 0xf031, 0xf40, 0x40df, 0x1, 0xefed, 0xef2f, 0xef25, 0x35, 0xf073, 0x1003, 0xefdc, 0x1, 0x201d, 0xcf05, 0xff2, 0xc042, 0x40dc, 0xcf1e, 0xc051);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15461105] cycle (D:8)
	FIFO/*5780*/(32, 0x1, 0xef0e, 0xff4, 0xcf51, 0xd040, 0x1f0d, 0xd0fe, 0x3e, 0x1, 0x2f04, 0xdfff, 0x1fe2, 0xf021, 0x1011, 0xd00e, 0xf22, 0x2, 0xf00, 0x20fd, 0x30ff, 0x5fc0, 0xd0f0, 0xef51, 0x2000, 0x2, 0x30d0, 0xe2, 0x40e1, 0xd0db, 0x1f4f, 0x2f0f, 0xf022);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15470713] cycle (D:8)
	FIFO/*57c0*/(32, 0x2, 0xf00e, 0x1f2e, 0xc0e0, 0x1f30, 0xff51, 0xfc0, 0xe0c2, 0x2, 0x3, 0x20df, 0xfff1, 0xf020, 0x2f31, 0xf0dc, 0x6fff, 0x2, 0xcff0, 0xe041, 0xe010, 0x203e, 0x10d2, 0xdf03, 0xff30, 0x2, 0x32, 0xc01a, 0xd0e0, 0xfe1, 0x32, 0xc0bc, 0xf001);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15480321] cycle (D:8)
	FIFO/*5800*/(32, 0x1, 0x302d, 0xfd1, 0xef22, 0x20e3, 0xdf10, 0xed, 0x10ff, 0x1, 0xffe2, 0x102e, 0xf002, 0x502e, 0x2010, 0xe053, 0x10de, 0x2, 0x9f30, 0xf0ff, 0xff41, 0xefbf, 0x502c, 0x10cf, 0x5f0d, 0x1, 0xdf01, 0x1012, 0x2022, 0xffef, 0xf0fe, 0xefdf, 0xdf21);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15489929] cycle (D:8)
	FIFO/*5840*/(32, 0x1, 0x201f, 0xef02, 0x20ee, 0x400f, 0x1044, 0xe022, 0xff1f, 0x1, 0xffee, 0x40ff, 0xef33, 0xeffd, 0x2fdd, 0x1021, 0x3011, 0x1, 0xcff2, 0xff, 0xf011, 0xf10, 0xf0, 0xf0f2, 0x10f0, 0x2, 0x2ff3, 0xcfb3, 0x5f20, 0xd0e0, 0x20f1, 0x10ff, 0xfd1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15499537] cycle (D:8)
	FIFO/*5880*/(32, 0x2, 0x20fe, 0xff12, 0xe01e, 0x5050, 0xee, 0x400b, 0xe01b, 0x2, 0x1f32, 0xd, 0xfe2, 0x103c, 0x2fe6, 0xef2e, 0x50e3, 0x1, 0xe0f0, 0x20e0, 0xef02, 0xfe3, 0xf01e, 0xf0f3, 0xc, 0x2, 0x10c4, 0xc01f, 0xc4, 0xd0fa, 0x20d0, 0xff5e, 0xd0f1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15509145] cycle (D:8)
	FIFO/*58c0*/(32, 0x2, 0x403b, 0xf0ef, 0x4f4f, 0xdf4f, 0xcfd7, 0x3065, 0x2fb9, 0x1, 0xd2, 0x32, 0xcf11, 0x103f, 0x20ce, 0x2f0f, 0x1014, 0x1, 0xdfe2, 0x102f, 0xb, 0xd0ed, 0x3002, 0xdf00, 0x2042, 0x1, 0xee, 0xffe1, 0x3021, 0xcf11, 0x2f, 0x1fde, 0xffd0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15518753] cycle (D:8)
	FIFO/*5900*/(32, 0x1, 0x20f2, 0xffdf, 0x3031, 0xe00e, 0x10c1, 0x2f41, 0xc01f, 0x1, 0x22, 0x20f2, 0xffc0, 0x202f, 0xff01, 0xff1f, 0x20ee, 0x1, 0x10df, 0xff14, 0xf01, 0xf0, 0x1002, 0x2ffd, 0xe030, 0x1, 0xffe1, 0xf3d, 0x10e2, 0xeff0, 0x10, 0xff00, 0xf0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15528361] cycle (D:8)
	FIFO/*5940*/(32, 0x1, 0x2000, 0x1f00, 0xff31, 0xef00, 0x1fc0, 0x3021, 0xdfdd, 0x1, 0xe022, 0x2d, 0xefe0, 0x4020, 0xefd2, 0x1032, 0xd031, 0x1, 0x20df, 0x2f00, 0x1f0f, 0xc012, 0xf12, 0xf0d, 0x30f1, 0x1, 0xff00, 0xf020, 0xf1, 0x1ff1, 0x2fef, 0xef03, 0xe02f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15537969] cycle (D:8)
	FIFO/*5980*/(32, 0x1, 0x1001, 0x3ffd, 0xf0f1, 0xfff1, 0xdf12, 0x1011, 0x2fdd, 0x1, 0x2f12, 0xefe2, 0xf, 0xe022, 0x4ffd, 0x1ff1, 0xefd4, 0x1, 0x1f2f, 0xc020, 0x30ce, 0x4f32, 0xb0e1, 0x1fe2, 0xf5f, 0x1, 0xd0df, 0x4ff3, 0x1010, 0xd011, 0xf4f, 0xff11, 0xa2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15547577] cycle (D:8)
	FIFO/*59c0*/(32, 0x1, 0x4f0f, 0xc010, 0x2030, 0xfdc, 0xf0d3, 0x2f21, 0xef0f, 0x1, 0x1022, 0x1f10, 0xf, 0xcff1, 0x301e, 0xdf11, 0x302f, 0x1, 0xfc0, 0x32, 0xff01, 0xe031, 0xeff1, 0x3f0f, 0xf0d0, 0x1, 0xff01, 0x40, 0xf002, 0x2000, 0xd022, 0xf000, 0x51);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15557185] cycle (D:8)
	FIFO/*5a00*/(32, 0x1, 0x10df, 0x2fb1, 0x3f10, 0xdfdd, 0xbf44, 0x401d, 0x30cf, 0x1, 0x5004, 0x2fe0, 0xbfe3, 0xfff1, 0x1ffd, 0x1022, 0xf0e1, 0x1, 0xff33, 0x1031, 0xd001, 0x30ff, 0xdfee, 0xcf30, 0xef31, 0x1, 0xfe, 0x2022, 0xed, 0xf010, 0x3f11, 0x2f1f, 0xc0d3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15566793] cycle (D:8)
	FIFO/*5a40*/(32, 0x1, 0x2fdd, 0xe0fd, 0xf21, 0x4fe1, 0x3, 0x1013, 0xc051, 0x1, 0xc051, 0x3f1e, 0xcfef, 0xf0cf, 0xef1d, 0xc03f, 0x3003, 0x1, 0x4f1d, 0xe0c1, 0x1f10, 0xd060, 0x20ef, 0x4fcd, 0x10df, 0x1, 0xffcf, 0xdf3e, 0x1033, 0x30c3, 0x3041, 0xcfbd, 0xff33);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15576401] cycle (D:8)
	FIFO/*5a80*/(32, 0x1, 0xc052, 0x13, 0xdf0c, 0x40ba, 0x3076, 0x9f04, 0x50ce, 0x0, 0xf030, 0xe0ee, 0xf2f, 0xf012, 0x1fcd, 0x1010, 0x10df, 0x1, 0xef42, 0xe021, 0x3010, 0x100d, 0x10d2, 0xff41, 0xb011, 0x1, 0x301f, 0xff32, 0xf0dd, 0x1003, 0xef2c, 0xf000, 0x2ffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15586009] cycle (D:8)
	FIFO/*5ac0*/(32, 0x1, 0xf01d, 0xe0d3, 0x1f3e, 0x1000, 0x4f15, 0xd01c, 0x30d2, 0x1, 0x205f, 0xc01d, 0x30b9, 0xdf01, 0x4fad, 0xf015, 0x1044, 0x1, 0xcffa, 0x10ac, 0x6040, 0xbfe1, 0x1b, 0x1ff2, 0xfd3, 0x1, 0xdf4f, 0xf0df, 0x1012, 0x102b, 0xd0, 0xff11, 0x2f14);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15595617] cycle (D:8)
	FIFO/*5b00*/(32, 0x1, 0x10d4, 0x10f1, 0x502c, 0xc0d1, 0x1f3d, 0xf0f1, 0xbd, 0x1, 0x2f3e, 0xe002, 0xff43, 0x3e, 0x50bd, 0xefce, 0x20b2, 0x1, 0x3f20, 0x30e4, 0x50ac, 0x50ce, 0xb0f1, 0xb04b, 0x7031, 0x1, 0x6fd4, 0xe0df, 0x1fc2, 0xef22, 0xd013, 0xc01c, 0x20bf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15605225] cycle (D:8)
	FIFO/*5b40*/(32, 0x1, 0x3f5d, 0xd000, 0x20f7, 0x60ea, 0x1fc4, 0xbfcc, 0xdff3, 0x1, 0x4f60, 0x2001, 0x5025, 0x1f40, 0x13, 0xcf13, 0xbf, 0x1, 0x1fdd, 0xefef, 0xcfef, 0x2fe0, 0x3040, 0x10be, 0xfbe, 0x1, 0x4051, 0x4044, 0xbfe3, 0x3ffb, 0xdf2f, 0xd0f0, 0xf020);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15614833] cycle (D:8)
	FIFO/*5b80*/(32, 0x1, 0x302c, 0x10c1, 0xdff3, 0xcf3f, 0xdf40, 0x20f0, 0x50fd, 0x1, 0x3f01, 0xd0e3, 0x1f01, 0x2f3f, 0xd0e0, 0xe001, 0xf050, 0x1, 0x100d, 0x10d1, 0x40ff, 0xfe2, 0xd0d2, 0xf050, 0x3f21, 0x1, 0xf0e0, 0xfff, 0xff10, 0x10ff, 0x10c1, 0xf1e, 0xc042);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15624441] cycle (D:8)
	FIFO/*5bc0*/(32, 0x1, 0xbf31, 0xf04e, 0x40fe, 0x401d, 0xf0f2, 0xfe2, 0x40, 0x1, 0xcfe1, 0x30fc, 0xf0f0, 0xe02f, 0x103d, 0xfe4, 0x2fff, 0x1, 0xefd2, 0xcf32, 0xe051, 0x20cd, 0x10ed, 0xfe, 0xef22, 0x1, 0x3012, 0xf1, 0xfff2, 0xff22, 0xd01f, 0xf01e, 0x50dd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15634049] cycle (D:8)
	FIFO/*5c00*/(32, 0x1, 0x10d0, 0xdff0, 0xef12, 0x0, 0x41, 0x200f, 0xdf35, 0x1, 0xb00d, 0x200c, 0x1fd0, 0x3fbe, 0x2032, 0xb043, 0xe05f, 0x1, 0x103c, 0x2fb0, 0xb042, 0xbf2c, 0xf062, 0x40db, 0x1fa0, 0x1, 0xcf33, 0x30ec, 0xc064, 0x50fa, 0x3f9d, 0x1fce, 0x22);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15643657] cycle (D:8)
	FIFO/*5c40*/(32, 0x0, 0xd00c, 0x3e, 0x3012, 0xf0f0, 0xd031, 0x2ff0, 0x20ef, 0x1, 0xffcf, 0x3fd2, 0xdf15, 0xe04e, 0x40ea, 0xcfbe, 0x502c, 0x1, 0xe02e, 0xe01b, 0x203c, 0xfd0, 0xc064, 0xb04f, 0xf04c, 0x1, 0x4034, 0x3f9d, 0xbf03, 0xbf11, 0xcf0d, 0xc01b, 0x5ffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15653265] cycle (D:8)
	FIFO/*5c80*/(32, 0x1, 0x4fd3, 0x4, 0xd04f, 0x50eb, 0xf15, 0x1fe4, 0xd053, 0x1, 0xc051, 0x60e9, 0x5fa0, 0xe0f1, 0x2ff1, 0x9f2f, 0x303b, 0x1, 0x3fbe, 0xffb1, 0xf023, 0xe03d, 0x304e, 0x30fc, 0xffd4, 0x1, 0xa054, 0xd, 0xe0fa, 0x30aa, 0x40cd, 0xbf27, 0xf04e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15662873] cycle (D:8)
	FIFO/*5cc0*/(32, 0x1, 0xe04f, 0x1f0e, 0x5003, 0xfd3, 0xf0fd, 0x201d, 0x3fbe, 0x0, 0xef23, 0x11, 0xd010, 0xf00c, 0x30dd, 0xffd0, 0x102f, 0x1, 0xcf14, 0xff54, 0x6053, 0xfa1, 0x60f4, 0x20be, 0x30ea, 0x0, 0x20ee, 0xffd0, 0xf23, 0xd033, 0x200c, 0x1fdf, 0x2fde);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15672481] cycle (D:8)
	FIFO/*5d00*/(32, 0x1, 0xfff0, 0xa030, 0x305e, 0xef24, 0x2f05, 0x40f2, 0x3ff5, 0x0, 0x1011, 0x20ed, 0xdff1, 0xeff0, 0x20f2, 0xf011, 0x400d, 0x1, 0x50ee, 0x9fe4, 0xef09, 0xff24, 0x4052, 0x5f9f, 0x2fc5, 0x0, 0x23, 0xe0ef, 0x1012, 0x202f, 0xffff, 0xef13, 0x2fd1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15682089] cycle (D:8)
	FIFO/*5d40*/(32, 0x1, 0x1fa0, 0xbfbe, 0x601b, 0x3f47, 0xc054, 0x503f, 0xcfd0, 0x1, 0x30e2, 0xfcb, 0xdff3, 0x2033, 0xdf42, 0xef40, 0xef0c, 0x1, 0xbff2, 0x1030, 0x20b0, 0x1002, 0x202f, 0xf06, 0xcf52, 0x1, 0xf042, 0x30eb, 0xf0d3, 0xc0fa, 0x2fd2, 0x9f35, 0xefed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15691697] cycle (D:8)
	FIFO/*5d80*/(32, 0x1, 0x3041, 0x1fe4, 0xd00d, 0xf10, 0x202c, 0x30d3, 0xdfeb, 0x0, 0xf011, 0xff20, 0xe0f2, 0x201e, 0xfcf, 0x1f22, 0x2ff1, 0x1, 0x2fb0, 0x3013, 0xf1c, 0xa064, 0xd05e, 0xd01f, 0x400a, 0x1, 0x1fd1, 0x1f0d, 0xbf31, 0xbf13, 0x505f, 0x3026, 0xff1d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15701305] cycle (D:8)
	FIFO/*5dc0*/(32, 0x1, 0x60d3, 0xb0df, 0x50ba, 0xb051, 0x1031, 0xf01b, 0xcf45, 0x0, 0xf0fc, 0x20df, 0xff0, 0x3013, 0xd032, 0xf02f, 0xe0fc, 0x0, 0xffde, 0xf00d, 0x3021, 0x2012, 0x20e0, 0xf020, 0xcf22, 0x0, 0xfffd, 0xef22, 0x30fd, 0x1fe1, 0x1000, 0xfce, 0x102f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15710913] cycle (D:8)
	FIFO/*5e00*/(32, 0x1, 0x40dc, 0xdfce, 0xe051, 0xcf12, 0x3040, 0x50dd, 0x1f04, 0x1, 0x4034, 0xafe0, 0xefd0, 0x40ab, 0x4fc0, 0x65, 0xf03d, 0x0, 0xfd, 0x101f, 0xefde, 0xff21, 0xf022, 0x2022, 0xf033, 0x0, 0xfcd, 0xff00, 0xf00d, 0x30ed, 0x3002, 0x2fd0, 0xdf13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15720521] cycle (D:8)
	FIFO/*5e40*/(32, 0x1, 0xc060, 0xe02a, 0x301b, 0x50ab, 0xcff5, 0x5063, 0x1fc3, 0x0, 0xef03, 0xdc, 0xdf00, 0x100d, 0x102e, 0x30ee, 0x2fe2, 0x1, 0xefc4, 0xd050, 0xc052, 0xf050, 0xc04e, 0xffe1, 0xcf55, 0x0, 0x40fd, 0xfe1, 0x2fe0, 0xdf01, 0xe040, 0x1d, 0x1011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15730129] cycle (D:8)
	FIFO/*5e80*/(32, 0x1, 0x4fd5, 0xbf15, 0xbfe1, 0x704f, 0x201e, 0xd0ff, 0x202e, 0x1, 0xaf33, 0x20d9, 0xffbe, 0x2fc2, 0xf5, 0xe041, 0x2d, 0x1, 0xd00e, 0x3fde, 0x1ff6, 0x1faf, 0x4063, 0x60df, 0xa035, 0x0, 0xfffe, 0xcf00, 0x201e, 0x3fde, 0x1fe2, 0xe1, 0xe031);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15739737] cycle (D:8)
	FIFO/*5ec0*/(32, 0x1, 0x1070, 0xf020, 0x70dd, 0x4fb4, 0x1fc4, 0xcf3f, 0xef10, 0x1, 0x9fe3, 0xbf4e, 0x3e, 0x1000, 0x103c, 0x2fb1, 0xdf06, 0x1, 0xf3f, 0xf20, 0xf011, 0x302d, 0xd022, 0xfb0, 0x2fbb, 0x1, 0xffe2, 0x3f15, 0x6031, 0xe0d3, 0x505f, 0xf01e, 0x1ffc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15749345] cycle (D:8)
	FIFO/*5f00*/(32, 0x1, 0xf0ae, 0x1f22, 0xc020, 0xdf13, 0xbf2e, 0xbf1f, 0x1c, 0x0, 0x20de, 0x4010, 0x10f3, 0x2020, 0xefe1, 0xf00d, 0xff, 0x1, 0xe0fa, 0x30bb, 0x2f20, 0x50d2, 0xdf36, 0xaf53, 0x305e, 0x1, 0x30f0, 0x400d, 0x10df, 0x2fcf, 0x2fef, 0xf15, 0xb021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15758953] cycle (D:8)
	FIFO/*5f40*/(32, 0x1, 0x2f, 0xf01c, 0x201c, 0x1fec, 0x3fe2, 0x1fe3, 0xdf26, 0x0, 0xf020, 0xf01f, 0x20ed, 0x20fe, 0x2fd0, 0xfe2, 0xdf13, 0x0, 0xc032, 0xd03e, 0xf02e, 0x40fd, 0x30e0, 0x3fc0, 0x1fe3, 0x1, 0xcf06, 0xaf44, 0xf03b, 0x200b, 0x40fc, 0x4020, 0x1fae);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15768561] cycle (D:8)
	FIFO/*5f80*/(32, 0x1, 0x4fe3, 0xcf36, 0xbf22, 0xe02f, 0x102d, 0x10ee, 0x20dd, 0x1, 0x1fde, 0xff2, 0xffe1, 0xff03, 0xe032, 0xf052, 0xc, 0x1, 0xfdc, 0x1000, 0x4f34, 0x3fd3, 0xc00e, 0xfa0, 0x2ffc, 0x1, 0x6052, 0xffd4, 0xd1, 0xefee, 0xe0f0, 0xff42, 0x702d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15778169] cycle (D:8)
	FIFO/*5fc0*/(32, 0x0, 0x1001, 0x1fcf, 0x300f, 0xf0f2, 0xf001, 0xf001, 0xf10, 0x1, 0xfe2, 0xfb, 0x1fd3, 0xd03e, 0x30ff, 0xdf31, 0xfbd, 0x0, 0x20ef, 0x1002, 0xf01, 0x20f1, 0xe1, 0xf03, 0xdf02, 0x0, 0xff2, 0xf03e, 0x1, 0xf1f, 0x1001, 0xf004, 0xe031);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15787777] cycle (D:8)
	FIFO/*6000*/(32, 0x0, 0xef, 0xcf02, 0xd, 0xf0de, 0xefef, 0x2001, 0xff12, 0x1, 0xb020, 0x1f40, 0xe0ff, 0xf, 0x3000, 0x5015, 0x30f2, 0x1, 0xd0f3, 0x3fe0, 0xfff6, 0xa0dc, 0x302c, 0x2fe1, 0x4, 0x0, 0xff0, 0x100d, 0x10fd, 0xff23, 0xe040, 0xf1f, 0x2012);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15797385] cycle (D:8)
	FIFO/*6040*/(32, 0x0, 0x1fce, 0x3005, 0x10df, 0xf031, 0xf, 0xcf12, 0xdfee, 0x0, 0xdfec, 0x10ed, 0x2030, 0x22, 0x201f, 0x302f, 0x1fd2, 0x0, 0xff30, 0x2011, 0xdff0, 0xdfdd, 0xf, 0x2fee, 0x3014, 0x0, 0x1f34, 0xd020, 0xdf00, 0xdfdd, 0x2fee, 0x4002, 0x4013);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15806993] cycle (D:8)
	FIFO/*6080*/(32, 0x0, 0x30f3, 0x1012, 0xef13, 0xcfcc, 0xdffc, 0xdfed, 0xd00c, 0x0, 0xfff0, 0x201e, 0x4044, 0x2001, 0x200e, 0x2003, 0x32, 0x1, 0xf065, 0xe01b, 0xef2b, 0xbf16, 0x2a, 0xe01e, 0xdfdd, 0x1, 0xefdd, 0xefde, 0x1fdd, 0xb0dd, 0x1f42, 0xe0d0, 0xd063);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15816601] cycle (D:8)
	FIFO/*60c0*/(32, 0x1, 0x401b, 0x3033, 0x40bf, 0x2fa2, 0x2033, 0xffbc, 0xe04e, 0x1, 0xdf9a, 0x1010, 0x1011, 0x1001, 0x1001, 0x1011, 0x1011, 0x4, 0x5055, 0x4055, 0x4044, 0x3034, 0x2023, 0x1022, 0x11, 0x6, 0xf001, 0xdfef, 0xcfdd, 0xcfcc, 0xcfcc, 0xcfcc, 0xcfcc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15826209] cycle (D:8)
	FIFO/*6100*/(32, 0x6, 0xcfcc, 0xdfdd, 0xdfdd, 0xefee, 0xefee, 0xffee, 0xffff, 0x8, 0xdfdc, 0xefed, 0xffee, 0xffff, 0x0, 0x1000, 0x1010, 0xa, 0x4043, 0x5055, 0x5055, 0x5055, 0x5055, 0x5055, 0x5055, 0x10a, 0x4045, 0x4044, 0x4, 0x0, 0x0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15835817] cycle (D:8)
	FIFO/*6140*/(32, 0x231, 0x1f10, 0x1010, 0xb301, 0x4, 0xf01f,
		0x231, 0x1f10, 0x1010, 0xb301, 0x4, 0xf01f,
		0x231, 0x1f10, 0x1010, 0xb301, 0x4, 0xf01f,
		0xe1f1, 0xf00, 0x214, 0xfe, 0xf100, 0x1020, 0x2220, 0x5ae3, 0x330, 0x2234);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15845425] cycle (D:8)
	FIFO/*6180*/(32, 0x215, 0x4c56, 0x4523, 0x264e, 0x7551, 0x2655, 0x2013, 0x241b, 0x214, 0x4322, 0x2321, 0x3212, 0x300, 0x2222, 0x0, 0x1ff1, 0x215, 0xbf1e, 0x2300, 0xd32c, 0x1e02, 0xc42f, 0xff0, 0xc0ff, 0x214, 0xff0f, 0xfffe, 0xfef, 0xffef, 0xeee0, 0xfece, 0xfeef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15855033] cycle (D:8)
	FIFO/*61c0*/(32, 0x214, 0xddef, 0xfdd0, 0xcecd, 0xebbe, 0xdeed, 0xefc, 0xffde, 0x214, 0x3e0f, 0xf200, 0x5020, 0xffe0, 0x1e20, 0x30e, 0x5241, 0x211, 0x110, 0x1111, 0x2af1, 0x0, 0xf100, 0x0, 0xf00e, 0x213, 0x11, 0xf101, 0x2012, 0x2121, 0x220c, 0x1131, 0x2223);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15864641] cycle (D:8)
	FIFO/*6200*/(32, 0x214, 0x1263, 0x1434, 0x1440, 0x5433, 0x4644, 0xef21, 0x2200, 0x214, 0x3522, 0x1452, 0x51f5, 0xf13d, 0x123, 0xe0ee, 0xedf0, 0x214, 0xecdf, 0xd00e, 0xfe0e, 0xefd0, 0xee2c, 0xdfcd, 0xbeed, 0x214, 0xebde, 0xcdcb, 0xcddb, 0xeccd, 0xccbc, 0xcabb, 0xdceb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15874249] cycle (D:8)
	FIFO/*6240*/(32, 0x213, 0xeeed, 0xeede, 0xddfd, 0xedce, 0xefde, 0xffee, 0xf0fe, 0x213, 0xf0, 0x20, 0x3201, 0xff1f, 0x2, 0x112f, 0x3332, 0x211, 0x1111, 0x3121, 0x39c, 0x101, 0x10, 0x1010, 0x1ed, 0x213, 0x1300, 0x1121, 0x3223, 0xb323, 0x2332, 0x3143, 0x3234);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15883857] cycle (D:8)
	FIFO/*6280*/(32, 0x213, 0x344, 0x335, 0x1331, 0x3322, 0x4333, 0x2, 0x1000, 0x214, 0x4331, 0x3344, 0x31f4, 0xd2e, 0xdf13, 0xecdc, 0xcede, 0x213, 0xedde, 0xdeff, 0xfee0, 0xdfee, 0xeefe, 0xeded, 0xedee, 0x214, 0xba9a, 0x9bba, 0xbba9, 0xc9ba, 0xba9b, 0xaa9a, 0xbadb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15893465] cycle (D:8)
	FIFO/*62c0*/(32, 0x213, 0xeedd, 0xdddd, 0xdede, 0xdecd, 0xfedf, 0xffee, 0x10f, 0x213, 0x2f1f, 0x1102, 0x2321, 0x3f11, 0xf310, 0x3131, 0x3443, 0x210, 0x1101, 0x101, 0x101c, 0x10, 0x1, 0x1001, 0x1ff, 0x213, 0x3420, 0x4233, 0x6444, 0xc64, 0x4446, 0x4546, 0x4553);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15903073] cycle (D:8)
	FIFO/*6300*/(32, 0x213, 0x2466, 0x4445, 0x3443, 0x4341, 0x4444, 0xe204, 0xfe1e, 0x213, 0x2111, 0x212, 0xf10, 0xfeef, 0xdc00, 0xdedd, 0xdeee, 0x213, 0xdddd, 0xecde, 0xddee, 0xeded, 0xdddd, 0xddcd, 0xdddd, 0x213, 0xdccc, 0xcddd, 0xcdcd, 0xdddd, 0xdddc, 0xdddd, 0xeddf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15912681] cycle (D:8)
	FIFO/*6340*/(32, 0x214, 0xcca9, 0xcd9b, 0xade9, 0xfbbb, 0xeebc, 0xfeff, 0x3120, 0x213, 0x1201, 0x1122, 0x3324, 0x2221, 0x1322, 0x2432, 0x5454, 0x210, 0x1101, 0xc111, 0x101, 0x101, 0x1010, 0x1100, 0x1ff, 0x212, 0x2212, 0x2222, 0x2322, 0x4ff4, 0x2222, 0x2232, 0x2222);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15922289] cycle (D:8)
	FIFO/*6380*/(32, 0x213, 0x4435, 0x4434, 0x4434, 0x3231, 0x2232, 0xe032, 0xfcd0, 0x213, 0xf0f, 0xe11, 0xdfff, 0xfeee, 0xddef, 0xcdcd, 0xddce, 0x213, 0xddcd, 0xdcdb, 0xdcde, 0xdddc, 0xcdcd, 0xcdcd, 0xccdd, 0x213, 0xdccd, 0xdcdd, 0xdcdc, 0xdedd, 0xddec, 0xeeee, 0xeeee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15931897] cycle (D:8)
	FIFO/*63c0*/(32, 0x214, 0x9fdb, 0xeded, 0xfded, 0xd0dd, 0x1ffe, 0x1101, 0x3432, 0x213, 0x2231, 0x4222, 0x2342, 0x2333, 0x2423, 0x4333, 0x5544, 0x211, 0x2121, 0xb21, 0x1112, 0x1101, 0x111, 0x1111, 0x2ff, 0x213, 0x3242, 0x4434, 0x6443, 0x35e1, 0x3334, 0x4343, 0x4333);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15941505] cycle (D:8)
	FIFO/*6400*/(32, 0x213, 0x442, 0x3334, 0x4223, 0x1210, 0x101, 0x101, 0xdced, 0x213, 0xefe, 0xe0fe, 0xeefe, 0xeede, 0xcdde, 0xcccc, 0xdccc, 0x213, 0xdbdc, 0xdcbc, 0xccdc, 0xdcdc, 0xcdcc, 0xdcdc, 0xddcc, 0x213, 0xdccc, 0xdddd, 0xdddd, 0xeedd, 0xeedd, 0xffee, 0xefef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15951113] cycle (D:8)
	FIFO/*6440*/(32, 0x214, 0xecef, 0xd, 0xf0fd, 0xf1, 0x2200, 0x3232, 0x6344, 0x213, 0x3422, 0x3341, 0x4334, 0x2434, 0x3533, 0x5342, 0x5554, 0x211, 0x2121, 0x12b1, 0x1111, 0x1101, 0x111, 0x1111, 0x101e, 0x213, 0x3322, 0x2343, 0x534, 0x4240, 0x2223, 0x3233, 0x3322);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15960721] cycle (D:8)
	FIFO/*6480*/(32, 0x213, 0x2221, 0x1322, 0x2203, 0x121, 0xfe0f, 0xf00, 0xdccf, 0x213, 0xefec, 0xfeef, 0xeede, 0xcddd, 0xdcde, 0xccac, 0xcccb, 0x213, 0xcccc, 0xbccb, 0xcccd, 0xbdcd, 0xccdd, 0xddcd, 0xdcdc, 0x213, 0xdddc, 0xceed, 0xdeee, 0xfdee, 0xfeee, 0xf0fe, 0xf0f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15970329] cycle (D:8)
	FIFO/*64c0*/(32, 0x214, 0xeffe, 0x1120, 0x210f, 0x1121, 0x4233, 0x5633, 0x5562, 0x213, 0x4243, 0x3343, 0x5344, 0x3334, 0x4444, 0x4442, 0x4555, 0x212, 0x323, 0x2159, 0x2122, 0x2212, 0x2121, 0xc212, 0x1112, 0x213, 0x3322, 0x3232, 0x2f42, 0x2323, 0x3023, 0x1312, 0x1132);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15979937] cycle (D:8)
	FIFO/*6500*/(32, 0x213, 0x3102, 0x2211, 0x200, 0x111, 0xffd0, 0xffee, 0xccdf, 0x213, 0xeedd, 0xeede, 0xedde, 0xddcc, 0xcddc, 0xcbbb, 0xcbcb, 0x213, 0xdbcd, 0xbdbb, 0xccdc, 0xcdcd, 0xcddd, 0xdddd, 0xddec, 0x213, 0xdedd, 0xeeee, 0xeefe, 0xfefe, 0xffef, 0xf0, 0x1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15989545] cycle (D:8)
	FIFO/*6540*/(32, 0x214, 0x1ff1, 0x332, 0x3221, 0x4223, 0x4343, 0x5474, 0x7546, 0x213, 0x4343, 0x4343, 0x5434, 0x4334, 0x3443, 0x4444, 0x5454, 0x211, 0x1c21, 0x1011, 0x111, 0x111, 0x111, 0x1f01, 0x10, 0x213, 0x3223, 0x3221, 0x14f0, 0x1222, 0x1212, 0x1211, 0x1021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [15999153] cycle (D:8)
	FIFO/*6580*/(32, 0x213, 0x1200, 0x110, 0x10, 0xf000, 0xd0ff, 0xfdee, 0xccef, 0x213, 0xcedb, 0xdeed, 0xddde, 0xddcc, 0xbdcc, 0xcbbb, 0xccbd, 0x213, 0xcdcc, 0xcbdb, 0xeccd, 0xddcd, 0xdded, 0xdedd, 0xdede, 0x214, 0xcdcb, 0xdded, 0xedee, 0xffee, 0xfff, 0x311f, 0x1210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16008761] cycle (D:8)
	FIFO/*65c0*/(32, 0x214, 0x1202, 0x1343, 0x4333, 0x4433, 0x6453, 0x6546, 0x6755, 0x213, 0x3434, 0x4443, 0x4533, 0x3424, 0x4344, 0x4444, 0x4534, 0x211, 0x111c, 0x1101, 0x110, 0x1011, 0x1101, 0x10f0, 0x100, 0x214, 0x3543, 0xdd62, 0x4336, 0x2323, 0x1332, 0x2212, 0xe301);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16018369] cycle (D:8)
	FIFO/*6600*/(32, 0x213, 0x12f, 0x10, 0xf00, 0xffe0, 0xfff0, 0xedde, 0xbeee, 0x213, 0xdccb, 0xdded, 0xdcde, 0xdcdc, 0xbbdc, 0xbccb, 0xcccd, 0x213, 0xccdc, 0xcccd, 0xdddc, 0xcedd, 0xddee, 0xeeee, 0xeeed, 0x215, 0xb9a8, 0xccec, 0xdded, 0xffef, 0xff, 0x2433, 0x3463);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16027977] cycle (D:8)
	FIFO/*6640*/(32, 0x213, 0x2111, 0x2121, 0x1321, 0x2222, 0x2432, 0x2332, 0x4333, 0x212, 0x2212, 0x2212, 0x2222, 0x2221, 0x1222, 0x2222, 0x3af3, 0x213, 0x2241, 0x3233, 0x3323, 0x2232, 0x4223, 0x121a, 0x2112, 0x214, 0x4342, 0x220c, 0x3324, 0x2222, 0x1122, 0x1012, 0xdf20);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16037585] cycle (D:8)
	FIFO/*6680*/(32, 0x213, 0x1, 0x0, 0xffff, 0xffef, 0xeeff, 0xceef, 0xcedd, 0x213, 0xdbba, 0xdddd, 0xbddc, 0xdcdd, 0xabcc, 0xcccb, 0xdccd, 0x213, 0xdbdc, 0xcdcd, 0xddec, 0xeded, 0xfdee, 0xeeee, 0xfeee, 0x214, 0xefed, 0xffff, 0xf0f0, 0x1, 0x2100, 0x2032, 0x3324);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16047193] cycle (D:8)
	FIFO/*66c0*/(32, 0x213, 0x2211, 0x1221, 0x2232, 0x3123, 0x3333, 0x3332, 0x4333, 0x212, 0x2212, 0x2222, 0x1222, 0x2222, 0x1222, 0xf313, 0x203a, 0x213, 0x3222, 0x2323, 0x3233, 0x2232, 0xe423, 0x205b, 0x1211, 0x214, 0x1a44, 0x2213, 0x2322, 0x221, 0x1112, 0xf02, 0xc01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16056801] cycle (D:8)
	FIFO/*6700*/(32, 0x213, 0x0, 0xff, 0xefef, 0xefef, 0xeefe, 0xedfe, 0xdcdd, 0x213, 0xcb9b, 0xcddd, 0xdbdc, 0xcddc, 0xbacc, 0xdcbc, 0xdccd, 0x213, 0xdcdc, 0xcdec, 0xecec, 0xfede, 0xfede, 0xeefe, 0xfefe, 0x214, 0xed, 0xf0ff, 0x1f1, 0xf020, 0x2111, 0x4113, 0x4423);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16066409] cycle (D:8)
	FIFO/*6740*/(32, 0x213, 0x2211, 0x2131, 0x3223, 0x3322, 0x3333, 0x3333, 0x3343, 0x211, 0x1111, 0x1111, 0x1111, 0x1111, 0x1111, 0x2c01, 0x110, 0x213, 0x3233, 0x3232, 0x3323, 0x3232, 0xa422, 0x2131, 0x3120, 0x214, 0x131a, 0x1312, 0x1222, 0x111, 0x1012, 0xf00, 0x2ce0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16076017] cycle (D:8)
	FIFO/*6780*/(32, 0x213, 0xf00f, 0xe0ff, 0xeeff, 0xeefe, 0xeeee, 0xfdee, 0xccee, 0x212, 0xecce, 0xdffe, 0xefdf, 0xfeee, 0xedde, 0xeeee, 0xeefe, 0x213, 0xcedc, 0xcded, 0xeddc, 0xeeee, 0xfeee, 0xefee, 0xfefe, 0x215, 0xf0ec, 0x1eff, 0x22f0, 0xf12, 0x7131, 0x6714, 0x5775);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16085625] cycle (D:8)
	FIFO/*67c0*/(32, 0x213, 0x2221, 0x2312, 0x2322, 0x3233, 0x4324, 0x4333, 0x4343, 0x211, 0x1111, 0x1111, 0x1112, 0x1111, 0x1111, 0x11c, 0x1101, 0x213, 0x2330, 0x3233, 0x2333, 0x3323, 0xa322, 0x2132, 0xef21, 0x214, 0x1225, 0x1113, 0x32, 0x1110, 0x1, 0x1fe0, 0x1dcf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16095233] cycle (D:8)
	FIFO/*6800*/(32, 0x214, 0xe0ee, 0xcfdd, 0xaded, 0xbbeb, 0xcacd, 0xcbbc, 0xbcbc, 0x212, 0xdbce, 0xeffe, 0xeeed, 0xeeef, 0xedde, 0xfeee, 0xefee, 0x213, 0xdedb, 0xdded, 0xedcc, 0xeeee, 0xfeee, 0xefef, 0xfefe, 0x215, 0xdf1c, 0xff1e, 0x2022, 0xf1f4, 0x6312, 0x5743, 0x5765);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16104841] cycle (D:8)
	FIFO/*6840*/(32, 0x213, 0x2222, 0x2321, 0x2322, 0x3233, 0x4334, 0x4423, 0x3433, 0x212, 0x2222, 0x2232, 0x2222, 0x2222, 0xcc32, 0x1104, 0x1211, 0x213, 0x2232, 0x3232, 0x2233, 0x1333, 0xb423, 0x2130, 0x12d1, 0x215, 0x3245, 0x3225, 0x123, 0x2210, 0xfe20, 0x1fcf, 0xabc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16114449] cycle (D:8)
	FIFO/*6880*/(32, 0x214, 0xc0fe, 0xce0d, 0xbcee, 0xbcdd, 0xcbcd, 0xdccc, 0xccbc, 0x212, 0xcbef, 0xfefe, 0xeefd, 0xeffe, 0xeedd, 0xfeef, 0xefee, 0x213, 0xdedd, 0xedee, 0xeccd, 0xeeef, 0xfeee, 0xefef, 0xfee, 0x214, 0xfd, 0x10d, 0x110, 0xf20, 0x1210, 0x3322, 0x4321);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16124057] cycle (D:8)
	FIFO/*68c0*/(32, 0x213, 0x2212, 0x2222, 0x2222, 0x3323, 0x4324, 0x3432, 0x3433, 0x212, 0x2222, 0x2222, 0x2222, 0x1222, 0x3f94, 0x1110, 0x2111, 0x214, 0x3643, 0x5554, 0x5456, 0x3555, 0x9736, 0x226f, 0x325a, 0x214, 0x1221, 0x1121, 0x10, 0x10, 0x1ff1, 0xf1ee, 0xfdee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16133665] cycle (D:8)
	FIFO/*6900*/(32, 0x214, 0xdc1e, 0xcd0f, 0xbcef, 0xdbdf, 0xdbcd, 0xddcc, 0xcccc, 0x212, 0xcdff, 0xefed, 0xeefe, 0xefef, 0xffdd, 0xefee, 0xfefe, 0x213, 0xdded, 0xdeee, 0xecde, 0xedfe, 0xffee, 0xeefe, 0xfffe, 0x215, 0xcffc, 0xf00e, 0x121, 0x100, 0x331f, 0x3553, 0x7453);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16143273] cycle (D:8)
	FIFO/*6940*/(32, 0x213, 0x2131, 0x2222, 0x2221, 0x4223, 0x3323, 0x3423, 0x3333, 0x212, 0x1222, 0x2222, 0x2222, 0x3121, 0x12fb, 0x1101, 0x1111, 0x214, 0x4537, 0x4554, 0x3555, 0x5355, 0xa535, 0xc060, 0x3234, 0x215, 0x3362, 0x3233, 0xf140, 0x1131, 0x1002, 0xf01b, 0xfbee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16152881] cycle (D:8)
	FIFO/*6980*/(32, 0x214, 0xfef0, 0xde1e, 0xede0, 0xecfe, 0xddaf, 0xeced, 0xccdd, 0x212, 0xbe0f, 0xefee, 0xfefe, 0xdffe, 0xeffd, 0xefef, 0xefef, 0x213, 0xddee, 0xdeee, 0xddde, 0xedef, 0xefee, 0xeefe, 0xffef, 0x215, 0xddea, 0xffee, 0xf1f, 0xe1ff, 0x310f, 0x2422, 0x3441);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16162489] cycle (D:8)
	FIFO/*69c0*/(32, 0x214, 0x3324, 0x2343, 0x4423, 0x6543, 0x4654, 0x5564, 0x5756, 0x212, 0x1221, 0x1222, 0x2122, 0xb212, 0x103f, 0x1110, 0x1111, 0x213, 0x2222, 0x2222, 0x2232, 0x3122, 0xc222, 0x2e12, 0x2121, 0x215, 0x4551, 0x3333, 0x2122, 0x3202, 0xd311, 0x11e, 0xdef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16172097] cycle (D:8)
	FIFO/*6a00*/(32, 0x214, 0xf0ff, 0xfe1f, 0xfd00, 0xedff, 0xecdf, 0xfcdf, 0xedce, 0x212, 0xce0f, 0xdfff, 0xfffe, 0xeeef, 0xfffe, 0xfffe, 0xfffe, 0x214, 0xbcbb, 0xcbcd, 0xdabc, 0xdade, 0xcddd, 0xebde, 0xedee, 0x215, 0xfece, 0xfee, 0x2c1, 0xffff, 0x121f, 0x2231, 0x2441);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16181705] cycle (D:8)
	FIFO/*6a40*/(32, 0x214, 0x2332, 0x1333, 0x3242, 0x4543, 0x4553, 0x4644, 0x5565, 0x212, 0x1121, 0x2122, 0x1121, 0x2a12, 0x1101, 0x110, 0x1111, 0x214, 0x3443, 0x4354, 0x3353, 0x3435, 0xde64, 0x24d2, 0x3323, 0x215, 0x5454, 0x1532, 0x3112, 0x1201, 0xf013, 0x112e, 0xb0de);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16191313] cycle (D:8)
	FIFO/*6a80*/(32, 0x214, 0xe100, 0xfff0, 0xfef2, 0xfde0, 0xeddf, 0xfcee, 0xedce, 0x213, 0xa9ff, 0xede0, 0xfebc, 0xebbe, 0xdeed, 0xdeee, 0xeded, 0x214, 0xcbcb, 0xcbbd, 0xec9c, 0xbbdd, 0xdddc, 0xecdc, 0xefce, 0x215, 0xedeb, 0xeffd, 0xe0ff, 0xefff, 0xf21f, 0x22, 0x3134);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16200921] cycle (D:8)
	FIFO/*6ac0*/(32, 0x214, 0x2232, 0x2223, 0x3232, 0x3543, 0x4454, 0x4653, 0x5565, 0x212, 0x1121, 0x2122, 0x2121, 0x3bf, 0x1011, 0x1101, 0x1011, 0x213, 0x2223, 0x3132, 0x2212, 0x2232, 0xc22, 0x2111, 0x1221, 0x214, 0x2143, 0x2213, 0x1110, 0x1001, 0x2, 0x12f, 0xfef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16210529] cycle (D:8)
	FIFO/*6b00*/(32, 0x214, 0xf010, 0xf, 0xf1, 0xffdf, 0xeecf, 0xfdde, 0xeecd, 0x212, 0xbe0, 0xffff, 0xedf, 0xe0dd, 0xefff, 0xefff, 0xfeff, 0x214, 0xbbcc, 0xdabd, 0xcea9, 0xcbce, 0xaceb, 0xecde, 0xfece, 0x215, 0xbedd, 0xfef0, 0xef0f, 0xd1ff, 0x120, 0x2f14, 0x5135);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16220137] cycle (D:8)
	FIFO/*6b40*/(32, 0x214, 0x2332, 0x2242, 0x2233, 0x3464, 0x5445, 0x4564, 0x6477, 0x212, 0x2121, 0x1212, 0xa122, 0x1021, 0x1001, 0x1111, 0x1110, 0x213, 0x2223, 0x2223, 0x2222, 0x3132, 0x4ea4, 0x2020, 0x2212, 0x214, 0x1333, 0x1131, 0x1010, 0x1000, 0xf010, 0xf111, 0x2c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16229745] cycle (D:8)
	FIFO/*6b80*/(32, 0x214, 0xe10, 0x1, 0x0, 0xffdf, 0xeddd, 0xfdce, 0xeecd, 0x212, 0xfbf, 0xfffe, 0xddff, 0xfffe, 0xfffe, 0xfeff, 0xffef, 0x213, 0xeded, 0xdede, 0xeefc, 0xeeef, 0xfddf, 0xfeef, 0xffff, 0x215, 0xeadf, 0xee0, 0xffe0, 0xfe1e, 0x2f22, 0x2212, 0x4323);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16239353] cycle (D:8)
	FIFO/*6bc0*/(32, 0x214, 0x1134, 0x3233, 0x3123, 0x3346, 0x4355, 0x6347, 0x4557, 0x212, 0x2112, 0x1212, 0x3eb3, 0x1010, 0x101, 0x111, 0x1111, 0x214, 0x4544, 0x4345, 0x2444, 0x5347, 0x26aa, 0x2422, 0x4333, 0x214, 0x1223, 0x121, 0x10, 0xf000, 0x1f02, 0xde21, 0x1021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16248961] cycle (D:8)
	FIFO/*6c00*/(32, 0x214, 0xf10, 0x1001, 0xf01f, 0xeffe, 0xeedc, 0xdfcd, 0xceed, 0x212, 0xf0fb, 0xff0e, 0xedef, 0xfeff, 0xffff, 0xffef, 0xffef, 0x213, 0xeede, 0xdcee, 0xeeef, 0xeeef, 0xfedf, 0xfffe, 0xf0fe, 0x215, 0xeadf, 0xfef1, 0xdf1f, 0x2ee2, 0x3e12, 0x3123, 0x4333);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16258569] cycle (D:8)
	FIFO/*6c40*/(32, 0x214, 0x1133, 0x3134, 0x4214, 0x4155, 0x4436, 0x5456, 0x5467, 0x212, 0x2112, 0xb312, 0x103e, 0x110, 0x101, 0x1102, 0x1111, 0x213, 0x2321, 0x2222, 0x2222, 0x3f13, 0x13c0, 0x1121, 0x1222, 0x215, 0x1264, 0x222, 0xe, 0x2100, 0x41e1, 0xe1e1, 0x2134);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16268177] cycle (D:8)
	FIFO/*6c80*/(32, 0x232, 0x2111, 0x210, 0x111, 0xf101, 0xf00, 0xfffe, 0xbcfe, 0x213, 0xefd2, 0xafee, 0xaffc, 0xedec, 0xeedd, 0xedde, 0xeedd, 0x213, 0xeede, 0xedce, 0xfeee, 0xfdee, 0xfdef, 0xfefe, 0xfff, 0x215, 0xecbd, 0xeee0, 0xb011, 0xe2, 0x4102, 0x4411, 0x4432);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16277785] cycle (D:8)
	FIFO/*6cc0*/(32, 0x214, 0x4114, 0x3232, 0x6323, 0x5334, 0x7336, 0x6555, 0x6567, 0x212, 0x2122, 0x2a02, 0x111, 0x1011, 0x1101, 0x1101, 0x1111, 0x213, 0x3223, 0x3132, 0x3222, 0x131f, 0x31c3, 0x2111, 0x2132, 0x215, 0x1032, 0xf011, 0xf02e, 0x143e, 0x51d, 0x3402, 0x324f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16287393] cycle (D:8)
	FIFO/*6d00*/(32, 0x212, 0x1000, 0x0, 0x0, 0xfff0, 0xfff0, 0xff0f, 0x1bc1, 0x212, 0xffff, 0xfedf, 0xc0ff, 0xfefe, 0xfffe, 0xfefe, 0xfffe, 0x213, 0xeedd, 0xdedb, 0xeeee, 0xfeed, 0xfdee, 0xffee, 0xffff, 0x215, 0xca1, 0xfcef, 0xc13, 0x10f0, 0x44f2, 0x2641, 0x5434);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16297001] cycle (D:8)
	FIFO/*6d40*/(32, 0x213, 0x1121, 0x2122, 0x3311, 0x3312, 0x4222, 0x4324, 0x4433, 0x212, 0x3122, 0x3af, 0x1102, 0x1101, 0x1101, 0x1111, 0x1121, 0x213, 0x2323, 0x3233, 0xf232, 0x2322, 0x3b13, 0x2212, 0x1223, 0x215, 0xfd3f, 0xefe2, 0x11f0, 0x1630, 0x722d, 0x762e, 0x64fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16306609] cycle (D:8)
	FIFO/*6d80*/(32, 0x212, 0x1000, 0x0, 0x0, 0xfff0, 0xffff, 0xf0f, 0xe1bc, 0x212, 0xbe0f, 0xffe0, 0xbf0e, 0xfefe, 0xffee, 0xefee, 0xffef, 0x213, 0xaedc, 0xeece, 0xedcd, 0xfdee, 0xfcdf, 0xeefe, 0xfff, 0x214, 0xffde, 0xfef, 0xe01, 0xf10f, 0x1320, 0x2421, 0x4320);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16316217] cycle (D:8)
	FIFO/*6dc0*/(32, 0x213, 0x2111, 0x2212, 0x4221, 0x4312, 0x4412, 0x4324, 0x4345, 0x212, 0x223, 0x22a, 0x1111, 0x210, 0x1201, 0x1211, 0x2211, 0x213, 0x3322, 0x3333, 0x1f33, 0x3224, 0xb033, 0x3224, 0x123, 0x214, 0xf01, 0xfff0, 0x1200, 0x322, 0x25f0, 0x5310, 0x32d0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16325825] cycle (D:8)
	FIFO/*6e00*/(32, 0x211, 0x1000, 0xf00, 0x1, 0xff00, 0xff00, 0xf00, 0xf00c, 0x212, 0xffdd, 0xffee, 0xbffe, 0xfeee, 0xefee, 0xefee, 0xefef, 0x213, 0xbade, 0xbdde, 0xedde, 0xeded, 0xfddf, 0xfeed, 0xffff, 0x214, 0xeffd, 0xef, 0xf0e0, 0x11e0, 0x2330, 0x3331, 0x343f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16335433] cycle (D:8)
	FIFO/*6e40*/(32, 0x213, 0x2211, 0x1212, 0x4322, 0x3322, 0x5323, 0x4343, 0x4445, 0x212, 0xb323, 0x105c, 0x210, 0x1111, 0x1210, 0x2111, 0x2121, 0x213, 0x4322, 0x3333, 0x4d23, 0x2323, 0x2333, 0x243a, 0x123, 0x214, 0xf0, 0xf0f0, 0x1220, 0x43, 0x41f, 0x321f, 0xf001);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16345041] cycle (D:8)
	FIFO/*6e80*/(32, 0x211, 0x1000, 0xf00, 0x1, 0xf000, 0xf0f0, 0xf0f, 0xfe0c, 0x212, 0xefef, 0xefef, 0xbfef, 0xeeee, 0xeefe, 0xefee, 0xeefe, 0x213, 0xbaed, 0xddbd, 0xdedd, 0xdede, 0xcef, 0xfeed, 0xffff, 0x214, 0xd0ff, 0xf, 0x1d1, 0x111f, 0x3441, 0x3233, 0x4531);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16354649] cycle (D:8)
	FIFO/*6ec0*/(32, 0x213, 0x3211, 0x2311, 0x4331, 0x3422, 0x4522, 0x5433, 0x4444, 0x212, 0xa223, 0x104f, 0x1101, 0x111, 0x1211, 0x2120, 0x2111, 0x213, 0x4232, 0x3322, 0x3f03, 0x1313, 0x2242, 0x33b2, 0x22, 0x215, 0xcef, 0xede, 0x3221, 0xc232, 0xe35c, 0x330b, 0xf5f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16364257] cycle (D:8)
	FIFO/*6f00*/(32, 0x211, 0x0, 0x1f00, 0x0, 0xf000, 0xff00, 0xf0f, 0xf0dd, 0x212, 0xeffe, 0xefef, 0xfeef, 0xeefb, 0xeefe, 0xfeef, 0xeefe, 0x212, 0xcfef, 0xeffe, 0xfeff, 0xffff, 0xffff, 0xfff, 0xf00f, 0x214, 0xf0ff, 0x2fe, 0x3de0, 0x10, 0x3442, 0x1332, 0x3533);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16373865] cycle (D:8)
	FIFO/*6f40*/(32, 0x213, 0x2221, 0x2221, 0x3332, 0x3423, 0x3432, 0x4434, 0x4445, 0x212, 0xa313, 0x104f, 0x1011, 0x111, 0x1121, 0x1211, 0x1211, 0x213, 0x3233, 0x2233, 0x3e14, 0x1323, 0x2423, 0x4fd3, 0x12, 0x215, 0xfdbd, 0x2ede, 0x2143, 0xee13, 0xa24f, 0x41c, 0x462f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16383473] cycle (D:8)
	FIFO/*6f80*/(32, 0x212, 0x100f, 0x10f0, 0xf00, 0xf10, 0xeff0, 0xc0ee, 0xefae, 0x212, 0xfefe, 0xfeef, 0xefee, 0xeecf, 0xeefe, 0xeffe, 0xffee, 0x213, 0xccdb, 0xeddb, 0xeddd, 0xeeee, 0xefee, 0xefee, 0xff0f, 0x214, 0xf, 0x20fe, 0x1df0, 0xf13, 0x2354, 0x1352, 0x3543);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16393081] cycle (D:8)
	FIFO/*6fc0*/(32, 0x213, 0x2221, 0x2212, 0x2334, 0x3433, 0x5432, 0x5442, 0x5444, 0x212, 0xa132, 0x1031, 0x111, 0x1111, 0x1211, 0x2111, 0x2111, 0x213, 0x2223, 0x2224, 0x3013, 0x2231, 0x2322, 0x4cf3, 0xf003, 0x215, 0xcbbd, 0xf00e, 0xf342, 0xeb3f, 0xa11e, 0x3fb, 0x54fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16402689] cycle (D:8)
	FIFO/*7000*/(32, 0x212, 0x100f, 0xf0, 0xf00, 0xf000, 0xee00, 0xdeee, 0xbdf, 0x212, 0xfefe, 0xfeef, 0xfeef, 0xdc0e, 0xefef, 0xeffe, 0xfefe, 0x213, 0xddbd, 0xdddc, 0xdede, 0xeffd, 0xfeee, 0xffdf, 0xffff, 0x214, 0xff01, 0xff1f, 0xf010, 0x1010, 0x1243, 0x2342, 0x3532);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16412297] cycle (D:8)
	FIFO/*7040*/(32, 0x213, 0x2211, 0x3112, 0x2233, 0x3332, 0x3432, 0x5423, 0x5334, 0x212, 0xdc32, 0x123, 0x111, 0x111, 0x1211, 0x1110, 0x1112, 0x214, 0x3546, 0x4465, 0x55e2, 0x4433, 0x4344, 0x7bd6, 0xdf14, 0x215, 0xeccc, 0x241f, 0x4022, 0xdcd2, 0xae10, 0xe13e, 0x361e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16421905] cycle (D:8)
	FIFO/*7080*/(32, 0x212, 0x10f, 0x10f0, 0xff0, 0xf01, 0xee00, 0xfdfe, 0xec0e, 0x213, 0xeddf, 0xddee, 0xddee, 0xeeed, 0xdfca, 0xeedd, 0xeddd, 0x213, 0xeecd, 0xeece, 0xedee, 0xffee, 0xfefe, 0xffef, 0xff0, 0x214, 0xf00, 0xf01f, 0x1100, 0x21f0, 0x2123, 0x2243, 0x2452);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16431513] cycle (D:8)
	FIFO/*70c0*/(32, 0x213, 0x2211, 0x3112, 0x1224, 0x2243, 0x3442, 0x4432, 0x4424, 0x212, 0x3dc3, 0x1021, 0x111, 0x1101, 0x1111, 0x1111, 0x1111, 0x214, 0x4445, 0x4445, 0x444c, 0x4334, 0x4243, 0x6295, 0xecf1, 0x215, 0x1daa, 0x5222, 0x3021, 0xfabf, 0xade2, 0xdf21, 0xf61f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16441121] cycle (D:8)
	FIFO/*7100*/(32, 0x213, 0x11f, 0xff, 0xff0, 0xef1, 0xbd00, 0xfbdc, 0xaa0d, 0x213, 0xeec0, 0xedee, 0xedee, 0xeeed, 0xcbee, 0xeedf, 0xeded, 0x213, 0xeedd, 0xeecf, 0xeeee, 0xefef, 0xfeff, 0xffff, 0xe0, 0x215, 0xdf0, 0xd21, 0xe400, 0x4300, 0x6223, 0x4456, 0x3766);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16450729] cycle (D:8)
	FIFO/*7140*/(32, 0x213, 0x1221, 0x3212, 0x3113, 0x2133, 0x2343, 0x3442, 0x5423, 0x212, 0x12fc, 0x1111, 0x111, 0x1110, 0x1111, 0x1110, 0x1211, 0x214, 0x4443, 0xf064, 0x3345, 0x4343, 0x5333, 0x36dd, 0xccaf, 0x214, 0x100e, 0x1223, 0xf111, 0x1fcf, 0xfef0, 0xff10, 0xe120);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16460337] cycle (D:8)
	FIFO/*7180*/(32, 0x212, 0x10, 0xf, 0x10f0, 0xf0f0, 0xeef1, 0xffde, 0xec0f, 0x213, 0xeecf, 0xeede, 0xdede, 0xfede, 0xeede, 0xeeea, 0xdded, 0x213, 0xeeed, 0xefce, 0xeede, 0xeeff, 0xeeff, 0xf0ff, 0xff0, 0x214, 0xf0, 0x0, 0xf210, 0x311f, 0x3112, 0x3324, 0x2333);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16469945] cycle (D:8)
	FIFO/*71c0*/(32, 0x212, 0x1111, 0x2110, 0x2011, 0x1112, 0x1122, 0x2221, 0xcf21, 0x213, 0x2135, 0x2123, 0x223, 0x3220, 0x2302, 0x3212, 0x1322, 0x214, 0x4555, 0x53e4, 0x4333, 0x4324, 0x1533, 0xe639, 0xdbab, 0x215, 0x554d, 0x2456, 0xc201, 0x21e9, 0xfdee, 0xd0e2, 0xef60);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16479553] cycle (D:8)
	FIFO/*7200*/(32, 0x212, 0x10, 0xf, 0x0, 0xf000, 0xeef0, 0xffc, 0xcef, 0x213, 0xeced, 0xeedf, 0xeeed, 0xefdd, 0xeedf, 0xecbf, 0xcded, 0x213, 0xffee, 0xfedc, 0xedee, 0xefff, 0xeffe, 0xef, 0xff0, 0x214, 0xfe1f, 0x1101, 0xf12f, 0x2200, 0x2022, 0x1244, 0x2344);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16489161] cycle (D:8)
	FIFO/*7240*/(32, 0x212, 0x1130, 0x2111, 0x2102, 0x212, 0x1223, 0x3221, 0x31a0, 0x214, 0x6354, 0x4456, 0x2455, 0x6531, 0x5235, 0x3566, 0x4764, 0x213, 0x422, 0x3121, 0x1033, 0x1242, 0x2311, 0xdf0c, 0xede, 0x214, 0x2341, 0x1442, 0xf0ff, 0x2fd, 0xfd0, 0xfe11, 0x30);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16498769] cycle (D:8)
	FIFO/*7280*/(32, 0x212, 0x0, 0x0, 0x0, 0x0, 0xbde0, 0xffe, 0xe0ae, 0x212, 0xeffe, 0xfeff, 0xeffe, 0xfffe, 0xfeff, 0xec0f, 0xefdf, 0x213, 0xcfed, 0xddfc, 0xedee, 0xefef, 0xefed, 0xfe, 0xf0f, 0x214, 0xf1d0, 0x2110, 0x101, 0x4111, 0x5212, 0x3434, 0x2554);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16508377] cycle (D:8)
	FIFO/*72c0*/(32, 0x212, 0x2111, 0x2220, 0x2110, 0x2122, 0x1222, 0xa321, 0x123e, 0x213, 0x3223, 0x2233, 0x1223, 0x3321, 0x2211, 0x2234, 0x1333, 0x213, 0x3023, 0x2222, 0x1123, 0x1333, 0x1320, 0xecca, 0x10fe, 0x214, 0x323, 0x3432, 0xf0ee, 0xf1ff, 0x1fe0, 0xfe11, 0xe021);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16517985] cycle (D:8)
	FIFO/*7300*/(32, 0x211, 0x0, 0xf100, 0x0, 0xf100, 0xeef0, 0xf0f, 0xf0c, 0x212, 0xffee, 0xfefe, 0xeffe, 0xf0fe, 0xfffe, 0xceff, 0xeeef, 0x213, 0xbd0d, 0xeede, 0xeeed, 0xeeef, 0xeeef, 0xf0ff, 0xf0, 0x214, 0x2fd1, 0x200, 0x1013, 0x2321, 0x6411, 0x2343, 0x3465);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16527593] cycle (D:8)
	FIFO/*7340*/(32, 0x212, 0x1211, 0x2211, 0x2210, 0x2212, 0x1122, 0xa03, 0x1212, 0x213, 0x3223, 0x2233, 0x1223, 0x2421, 0x3211, 0x1234, 0x2243, 0x212, 0x221f, 0x2110, 0x1101, 0x121, 0xf211, 0xfcb, 0x10, 0x214, 0x1012, 0x1333, 0xed12, 0xf100, 0x100e, 0x1ff2, 0xcf21);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16537201] cycle (D:8)
	FIFO/*7380*/(32, 0x212, 0x1000, 0x10, 0x0, 0xe100, 0xcfff, 0xb0ed, 0xef1b, 0x212, 0xfffe, 0xfeef, 0xeffe, 0xf0ff, 0xfee, 0xceff, 0xdeff, 0x213, 0xebfe, 0xefdd, 0xefdd, 0xed0e, 0xfeef, 0xfff, 0xf0, 0x214, 0x10ff, 0x1010, 0x31, 0x1422, 0x5430, 0x4225, 0x4455);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16546809] cycle (D:8)
	FIFO/*73c0*/(32, 0x212, 0x1121, 0x1221, 0x2111, 0x2212, 0x2122, 0x30af, 0x2101, 0x213, 0x2213, 0x3224, 0x1222, 0x3321, 0x2111, 0x1234, 0x333, 0x212, 0x212f, 0x1111, 0x111, 0x121, 0xe011, 0xfbd, 0x101, 0x214, 0x101f, 0x2123, 0xdd14, 0xf32e, 0x40de, 0x1de4, 0xd122);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16556417] cycle (D:8)
	FIFO/*7400*/(32, 0x211, 0x1000, 0x0, 0x0, 0x10f0, 0xf00f, 0xcffe, 0xf0f0, 0x213, 0xeedd, 0xdcde, 0xcdee, 0xfffe, 0xfecd, 0xbeee, 0xcc0a, 0x213, 0xccd, 0xeded, 0xeeef, 0xef0e, 0xffee, 0xfff0, 0xf010, 0x214, 0x2000, 0x1f01, 0x1123, 0x3331, 0x6510, 0x2145, 0x4556);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16566025] cycle (D:8)
	FIFO/*7440*/(32, 0x212, 0x1211, 0x1212, 0x1211, 0x2212, 0x1212, 0x13f9, 0x1110, 0x214, 0x3446, 0x5455, 0x1255, 0x4543, 0x4313, 0x4257, 0xe265, 0x213, 0x2232, 0x2213, 0x1122, 0x1322, 0xbb12, 0xbbe, 0x1, 0x214, 0x1200, 0x3210, 0xdd04, 0xf22f, 0x40ef, 0xfe11, 0x1212);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16575633] cycle (D:8)
	FIFO/*7480*/(32, 0x212, 0x100f, 0x1, 0xe110, 0x101e, 0xf0f, 0xabdd, 0xfff1, 0x212, 0xfffe, 0xeeff, 0xfe0f, 0xf0ff, 0xfeff, 0xfe00, 0xe0fd, 0x213, 0xfeac, 0xedef, 0xeeff, 0xf0fe, 0xfdf, 0xff00, 0x10f, 0x214, 0x1f01, 0xff03, 0x231, 0x3230, 0x5302, 0x1354, 0x6542);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16585241] cycle (D:8)
	FIFO/*74c0*/(32, 0x212, 0x1111, 0x1122, 0x2220, 0x2111, 0xb213, 0x122b, 0x2100, 0x214, 0x3125, 0x3464, 0x1334, 0x2432, 0x3222, 0x3345, 0x3e33, 0x212, 0x1102, 0x111, 0x111, 0x111, 0xec01, 0xee00, 0x0, 0x214, 0x111f, 0x55fe, 0xecf3, 0xf120, 0x31f0, 0x20f1, 0x3210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16594849] cycle (D:8)
	FIFO/*7500*/(32, 0x232, 0x1200, 0x1101, 0x2f02, 0x1010, 0x2000, 0xccd0, 0xcca4, 0x213, 0xefdd, 0xedee, 0xdeee, 0xf0ff, 0xfdc, 0xfee0, 0xc1bd, 0x213, 0xffad, 0xedef, 0xeef0, 0xf00f, 0xdf, 0xfff1, 0xf110, 0x214, 0x2f1, 0x1e12, 0x21, 0x2231, 0x5311, 0x3145, 0x5433);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16604457] cycle (D:8)
	FIFO/*7540*/(32, 0x212, 0x1111, 0x113, 0x1221, 0x2211, 0xa021, 0x13d, 0x1110, 0x214, 0x3312, 0x3343, 0x1224, 0x1432, 0x4311, 0x2244, 0x5d04, 0x232, 0x4333, 0x2533, 0x4344, 0x3443, 0x4014, 0xff13, 0xf11, 0x234, 0xe1db, 0x22fb, 0x1fef, 0xf23, 0x3300, 0x3200, 0x4433);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16614065] cycle (D:8)
	FIFO/*7580*/(32, 0x231, 0x1100, 0x1010, 0xf200, 0x101, 0x1010, 0xde10, 0xdff2, 0x213, 0xfede, 0xeeef, 0xefee, 0xe0fe, 0xfdf, 0xeff0, 0xdc0, 0x213, 0xdae, 0xeeff, 0xef0e, 0xf0f, 0xfff, 0xf00, 0x110f, 0x215, 0x2f00, 0xf031, 0x110f, 0x1441, 0x6631, 0x5466, 0x6455);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16623673] cycle (D:8)
	FIFO/*75c0*/(32, 0x212, 0x1111, 0x112, 0x2111, 0x1210, 0xae12, 0x12f, 0x100, 0x214, 0x3114, 0x3322, 0x2003, 0x421, 0x4300, 0x3123, 0x3fd3, 0x232, 0x2322, 0x4232, 0x2332, 0x2424, 0x40f4, 0xd002, 0xff11, 0x213, 0xfff, 0x2100, 0xff03, 0x1110, 0x20f0, 0x12, 0x2320);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16633281] cycle (D:8)
	FIFO/*7600*/(32, 0x231, 0x2010, 0xf101, 0x1012, 0x200, 0x1101, 0xb111, 0xd22, 0x213, 0xfddf, 0xf0f2, 0xffee, 0xfef0, 0xff, 0xff, 0xbe0f, 0x213, 0xcd1, 0xfeff, 0xffff, 0xf0f, 0xf0ff, 0x0, 0x20f, 0x214, 0x10f1, 0x1101, 0xfe, 0x1111, 0x4210, 0x1232, 0x1225);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16642889] cycle (D:8)
	FIFO/*7640*/(32, 0x232, 0x3122, 0x2323, 0x3434, 0x3534, 0x4c45, 0x1015, 0x1111, 0x214, 0x2222, 0x4301, 0xe13, 0x2522, 0x51fe, 0x3f36, 0x43df, 0x232, 0x3312, 0x3232, 0x3343, 0x3352, 0x42c5, 0xcf02, 0xef11, 0x213, 0xef0f, 0x210f, 0xff14, 0x1211, 0x31ff, 0x112, 0x2421);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16652497] cycle (D:8)
	FIFO/*7680*/(32, 0x231, 0x1201, 0x1f12, 0x103, 0x2102, 0x2020, 0xd221, 0xfe5e, 0x214, 0xbad1, 0xfeed, 0xccad, 0xddd0, 0x22cb, 0xece0, 0xf11, 0x212, 0xfdfc, 0xfef0, 0xff0f, 0xff, 0xff0, 0x1f, 0x100f, 0x214, 0xef3, 0xe131, 0xe0ce, 0x2011, 0x2300, 0x1033, 0x2134);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16662105] cycle (D:8)
	FIFO/*76c0*/(32, 0x232, 0x3111, 0x3131, 0x4332, 0x3432, 0x43b4, 0xf0f0, 0xf1, 0x213, 0x12, 0x1210, 0xf001, 0x1211, 0x20e1, 0xd124, 0x233d, 0x232, 0x3221, 0x3232, 0x3443, 0x5443, 0x46c1, 0xef0f, 0xfff1, 0x213, 0xef00, 0xf, 0xf056, 0x2411, 0x32ff, 0xf134, 0x4551);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16671713] cycle (D:8)
	FIFO/*7700*/(32, 0x230, 0x2110, 0x2010, 0x1020, 0x201, 0x202, 0xf212, 0xf4e, 0x213, 0xcdf2, 0xff1e, 0xfeee, 0xeffd, 0x10fe, 0xee01, 0xe120, 0x211, 0xfc00, 0xff00, 0xf00f, 0xff, 0xff00, 0xf100, 0x1000, 0x213, 0xfff0, 0x1110, 0xffcc, 0xf1, 0x11f, 0x111, 0x1111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16681321] cycle (D:8)
	FIFO/*7740*/(32, 0x232, 0x1000, 0x2102, 0x1230, 0x223, 0xe14b, 0xe0de, 0xfeef, 0x233, 0xeedf, 0xe0fe, 0xff0, 0x11f, 0x21f0, 0x1c23, 0x1143, 0x232, 0x2211, 0x2232, 0x3434, 0x6335, 0xf73b, 0xe00, 0xef1, 0x213, 0xf1f0, 0xf, 0xf463, 0x2430, 0x3110, 0xe254, 0x3652);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16690929] cycle (D:8)
	FIFO/*7780*/(32, 0x231, 0x3222, 0x1403, 0x2232, 0x3222, 0x2332, 0x2342, 0x16c, 0x213, 0xe10f, 0xeed, 0xae01, 0xf11d, 0xefe, 0xef32, 0x320e, 0x232, 0x9dfe, 0xacc4, 0xbdcd, 0xcbcb, 0xbbcc, 0xdccc, 0xdebc, 0x213, 0xf100, 0xf1f, 0xfbc0, 0x1fe, 0xfff, 0x1012, 0x33fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16700537] cycle (D:8)
	FIFO/*77c0*/(32, 0x232, 0xe0e, 0x1f02, 0x2110, 0xcb11, 0xcdf4, 0xfddd, 0xdded, 0x214, 0x240d, 0x1ee0, 0xe322, 0x44eb, 0xec04, 0x22e2, 0x53f0, 0x211, 0x1, 0x1101, 0x1001, 0xd201, 0x101c, 0xef0, 0x10, 0x213, 0x1f0d, 0xf11, 0x1461, 0x2231, 0x2132, 0x2143, 0x3423);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16710145] cycle (D:8)
	FIFO/*7800*/(32, 0x212, 0x101, 0x113f, 0x2100, 0x1111, 0x2221, 0xb012, 0x4bd, 0x214, 0x2fda, 0xda01, 0xdd1f, 0xf0ec, 0xff00, 0x132f, 0x10ff, 0x213, 0xddf2, 0xe0ea, 0xffdf, 0xe0fe, 0xfeef, 0xfffc, 0x11f0, 0x214, 0xeef0, 0xee30, 0xa9cd, 0xffee, 0xfefe, 0x1021, 0x42fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16719753] cycle (D:8)
	FIFO/*7840*/(32, 0x231, 0xf0ff, 0xf000, 0x1000, 0xcf, 0xdfdf, 0xeeef, 0xefef, 0x213, 0xfe, 0xff12, 0x1100, 0x20fe, 0xdf11, 0x231d, 0x21f1, 0x211, 0x1010, 0x1010, 0x101, 0xcf11, 0x1, 0xff0, 0x0, 0x213, 0xe001, 0x1111, 0xf162, 0x2551, 0x2211, 0x3125, 0x4522);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16729361] cycle (D:8)
	FIFO/*7880*/(32, 0x211, 0xf00, 0x1021, 0x11f0, 0x101, 0x1110, 0x1c11, 0x1ef, 0x214, 0x1ede, 0xcd12, 0xfece, 0xfff, 0xf1fd, 0x1011, 0x2001, 0x213, 0xc2ee, 0xca0, 0xeffe, 0xffee, 0xdeff, 0xff00, 0x10f0, 0x213, 0xf100, 0xe, 0xece0, 0x1d, 0xfee, 0xf111, 0x31ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16738969] cycle (D:8)
	FIFO/*78c0*/(32, 0x232, 0xf0ee, 0xf1f, 0xbf0f, 0xcdf0, 0xdecd, 0xddcc, 0xdded, 0x214, 0x2fde, 0xe122, 0xf0, 0x1200, 0xfbdf, 0x3222, 0x2313, 0x211, 0x1010, 0x1010, 0x1010, 0xc01, 0x1, 0xff0, 0x1000, 0x213, 0xf10f, 0x1110, 0xef65, 0x5531, 0x3102, 0x2324, 0x4412);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16748577] cycle (D:8)
	FIFO/*7900*/(32, 0x212, 0x1d0, 0x1222, 0x1000, 0x1122, 0x2210, 0xf1b2, 0x12a1, 0x214, 0xfdce, 0xa131, 0xfcec, 0xf10f, 0x1fde, 0x1011, 0xd21f, 0x212, 0xf00f, 0xb1f, 0xfff, 0xffff, 0xfff0, 0xf0f, 0x0, 0x213, 0xf00f, 0xfff, 0xdd0f, 0x1ec, 0xfeff, 0x1200, 0x1fff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16758185] cycle (D:8)
	FIFO/*7940*/(32, 0x232, 0xefef, 0xf0, 0xa0ff, 0xce0e, 0xcdcb, 0xbdbe, 0xdedd, 0x214, 0xfce3, 0x341, 0xef0f, 0x321f, 0xd9e1, 0x3341, 0x2324, 0x232, 0x2211, 0x3321, 0x4333, 0xc634, 0x3e75, 0x2011, 0x100, 0x212, 0x1, 0x100, 0xf134, 0x3100, 0x1214, 0x3111, 0xdf21);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16767793] cycle (D:8)
	FIFO/*7980*/(32, 0x211, 0x102, 0x2100, 0x1, 0x1210, 0x10, 0x12d, 0x2cf0, 0x214, 0x9b33, 0x33cd, 0xbacd, 0x12fc, 0xead0, 0xf241, 0xda1f, 0x212, 0xf01, 0xedfe, 0xfee0, 0xffff, 0xfeff, 0xfff, 0xf0, 0x213, 0xfe00, 0xef, 0xedfe, 0xefcc, 0xe0f0, 0x21ff, 0xff01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16777401] cycle (D:8)
	FIFO/*79c0*/(32, 0x232, 0xfefe, 0xee, 0xfe1, 0xe1cb, 0xccbc, 0xdcdd, 0xdecc, 0x214, 0xd465, 0x340b, 0xbd34, 0x330e, 0x9013, 0x561b, 0x2246, 0x211, 0x1110, 0x101, 0x1111, 0x2010, 0x1c0, 0xff00, 0x0, 0x212, 0x110, 0x4000, 0x213, 0x2000, 0x1363, 0x2110, 0x20f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16787009] cycle (D:8)
	FIFO/*7a00*/(32, 0x211, 0x110, 0x1100, 0x111, 0x2100, 0xb102, 0x1110, 0xbe11, 0x213, 0xe207, 0xedd, 0xdf10, 0x10bc, 0xde12, 0x210d, 0xae3, 0x212, 0x10f, 0xebd0, 0xffff, 0xffee, 0xefff, 0xfee, 0xef10, 0x213, 0x1fff, 0xedef, 0xef, 0xdcac, 0xf02f, 0x2fdf, 0xe122);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16796617] cycle (D:8)
	FIFO/*7a40*/(32, 0x232, 0xe0de, 0xefe, 0xf1f, 0xebd0, 0xbbf0, 0xdddc, 0xcece, 0x233, 0xeedd, 0xffcd, 0xf1f, 0xff0e, 0x1112, 0x32fc, 0x232, 0x211, 0x1100, 0x1021, 0x2100, 0x1011, 0xdf20, 0xeff2, 0x110, 0x212, 0x10fe, 0x1512, 0x320f, 0x1002, 0x3542, 0xec21, 0x3313);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16806225] cycle (D:8)
	FIFO/*7a80*/(32, 0x211, 0x1f00, 0x1011, 0x1101, 0x1110, 0xcf20, 0x1002, 0xf111, 0x201, 0x1110, 0xf001, 0xeeef, 0xccde, 0xddcc, 0xcccd, 0xddcd, 0x212, 0xeee, 0xba21, 0xfede, 0xdef0, 0xffee, 0xeedf, 0x10f, 0x213, 0xdbde, 0xef2f, 0x1dbc, 0xbca1, 0x20dd, 0xee01, 0x222f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16815833] cycle (D:8)
	FIFO/*7ac0*/(32, 0x232, 0xecec, 0xfeef, 0xf0f, 0xc100, 0xde2a, 0xecdc, 0xedfc, 0x233, 0xddec, 0xfd1, 0x12e0, 0xe1, 0x1311, 0x1f10, 0x2445, 0x211, 0x1f01, 0x1221, 0x2000, 0x211, 0x2110, 0xf1c0, 0x10ff, 0x212, 0xff02, 0x2261, 0x2000, 0x332, 0x4420, 0xf3e0, 0x1411);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16825441] cycle (D:8)
	FIFO/*7b00*/(32, 0x211, 0xf011, 0x1110, 0x1011, 0x1101, 0xfc21, 0x101, 0xe111, 0x231, 0x6b5, 0x1f00, 0xf0f, 0xfe0e, 0xe0ef, 0xfefe, 0xe0df, 0x212, 0xfeef, 0xbf11, 0xfeec, 0xdfff, 0xffee, 0xeeef, 0x1ff, 0x213, 0xbdde, 0xe01f, 0xfcdd, 0xcce1, 0x2fdc, 0xef02, 0x210f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16835049] cycle (D:8)
	FIFO/*7b40*/(32, 0x232, 0xdecd, 0xfeef, 0xf0ff, 0x0, 0x1cd1, 0xdfdf, 0xfefd, 0x213, 0x1111, 0x11, 0x1020, 0xeef2, 0x3300, 0x2, 0x441f, 0x211, 0x1, 0x1121, 0x100, 0x1112, 0x1100, 0xb211, 0xf0, 0x212, 0x11, 0x1204, 0x2001, 0x1123, 0xe120, 0x114, 0x3210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16844657] cycle (D:8)
	FIFO/*7b80*/(32, 0x211, 0x1, 0x100, 0x111, 0x1010, 0xc11, 0x1001, 0x1, 0x212, 0xbb20, 0xfff2, 0xfe, 0xdeff, 0x1f, 0xfef0, 0x1ff, 0x212, 0xfefe, 0xd010, 0xfddc, 0xefff, 0xffed, 0xeee0, 0xfe, 0x213, 0xcde0, 0xfd, 0xedde, 0xeeff, 0xeea, 0xe013, 0x1f0f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16854265] cycle (D:8)
	FIFO/*7bc0*/(32, 0x232, 0xeddd, 0xffde, 0xff0e, 0xf, 0xf010, 0xf1c, 0xfeee, 0x214, 0x3313, 0x3, 0x2420, 0xcd02, 0x652d, 0xe024, 0x5573, 0x211, 0x1, 0x1211, 0x1000, 0x1111, 0x1001, 0x121, 0x1cd2, 0x212, 0x3211, 0x210f, 0x1022, 0x221, 0x11f0, 0x122, 0x2110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16863873] cycle (D:8)
	FIFO/*7c00*/(32, 0x212, 0x1113, 0x100e, 0x232, 0x11f1, 0xeb32, 0x11f1, 0x21, 0x211, 0xf100, 0xff2c, 0xf0f, 0xfff0, 0xf, 0xff00, 0x1ff, 0x212, 0xedf0, 0x110f, 0xdbdc, 0xf0ff, 0xeece, 0xffff, 0xfeee, 0x213, 0xe00f, 0xfccc, 0xef00, 0xdcdd, 0x1de, 0xe00f, 0x200);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16873481] cycle (D:8)
	FIFO/*7c40*/(32, 0x232, 0xddcd, 0xedee, 0xfffe, 0xf0e0, 0x1010, 0xfc01, 0xf0e2, 0x213, 0x1f01, 0x1120, 0x100, 0xf111, 0x20fe, 0xf244, 0x631f, 0x213, 0x35, 0x6530, 0x235, 0x5541, 0x2235, 0x5443, 0xfd36, 0x211, 0x130b, 0x1001, 0x1110, 0x11, 0x121d, 0xf011, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16883089] cycle (D:8)
	FIFO/*7c80*/(32, 0x212, 0x123, 0xf00, 0x1133, 0x1100, 0xdb31, 0xf0f3, 0x1122, 0x232, 0x7142, 0xc539, 0xefe0, 0xcecf, 0xdcec, 0xcbdc, 0xceac, 0x212, 0xfe00, 0x10fd, 0xbda1, 0xffee, 0xddef, 0xffee, 0xeefe, 0x213, 0xe0fd, 0xdcde, 0xfffd, 0xade0, 0x20ea, 0xeef2, 0x320e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16892697] cycle (D:8)
	FIFO/*7cc0*/(32, 0x232, 0xdccc, 0xdfce, 0xffee, 0xf0fe, 0xf, 0x111, 0x1c, 0x213, 0xf134, 0x111, 0x10, 0xe013, 0x40ff, 0x234, 0x730f, 0x213, 0xf356, 0x5310, 0x1456, 0x5420, 0x3355, 0x5521, 0xef55, 0x212, 0xdd40, 0x1125, 0x2100, 0xb223, 0x221e, 0xf124, 0x310f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16902305] cycle (D:8)
	FIFO/*7d00*/(32, 0x212, 0x1133, 0x100f, 0x2203, 0xf1, 0xfb31, 0xfe2, 0x1221, 0x212, 0x1f00, 0xe39d, 0xfedf, 0xdf00, 0xfed, 0xef01, 0xcd, 0x212, 0xe000, 0x1fde, 0x9c01, 0xffde, 0xdffe, 0xfeed, 0xfeff, 0x213, 0xefec, 0xddef, 0xec, 0xcdf0, 0x2fcb, 0xdd22, 0x320e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16911913] cycle (D:8)
	FIFO/*7d40*/(32, 0x212, 0xff01, 0x10f, 0x111, 0xf1, 0x1101, 0x1111, 0xecf0, 0x213, 0x2310, 0x10f1, 0x110, 0x121, 0x30ff, 0x243, 0x421f, 0x213, 0x2456, 0x32ff, 0x1455, 0x3311, 0x3354, 0x4311, 0x25, 0x211, 0x4110, 0x10c, 0x1001, 0xf11, 0x11ff, 0x12, 0x1f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16921521] cycle (D:8)
	FIFO/*7d80*/(32, 0x212, 0x233, 0x1ff0, 0xf241, 0xf0f1, 0x2b21, 0xf0e0, 0x2120, 0x212, 0xf00, 0xf2ae, 0xeeef, 0xe000, 0xfedf, 0xf010, 0xefdd, 0x212, 0xf011, 0xeee, 0xc010, 0xeeeb, 0xf0ff, 0xeeed, 0xff0f, 0x213, 0xdedd, 0xef00, 0xefec, 0xd011, 0xcec, 0xe112, 0x2fef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16931129] cycle (D:8)
	FIFO/*7dc0*/(32, 0x233, 0xabbb, 0xcdcc, 0xdfde, 0xeef, 0x1000, 0x3101, 0xdf52, 0x213, 0x20ec, 0x221, 0x0, 0x1321, 0x1fe0, 0x1343, 0x1001, 0x213, 0x3574, 0x1fe2, 0x3553, 0x20f2, 0x3454, 0x2012, 0x3321, 0x212, 0x3111, 0x4bf4, 0x101f, 0x13e0, 0x1fe0, 0x1232, 0xff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16940737] cycle (D:8)
	FIFO/*7e00*/(32, 0x213, 0x4453, 0xeee1, 0x5641, 0xde00, 0x7ad0, 0xdd02, 0x540d, 0x232, 0x2111, 0xd5fd, 0xeee0, 0xfdfd, 0xbbec, 0xdcde, 0xcbcb, 0x212, 0xe, 0xfe00, 0xf0fe, 0xdedf, 0xfed, 0xdfff, 0xfee, 0x213, 0xdf0f, 0xecd, 0xf01f, 0xffed, 0xd000, 0xffe, 0x21);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16950345] cycle (D:8)
	FIFO/*7e40*/(32, 0x213, 0xf1, 0x111f, 0x1ff0, 0x133, 0x10ff, 0x2243, 0xb1f1, 0x213, 0x21fd, 0x2ff0, 0x1221, 0x11f0, 0x1211, 0x2201, 0x3123, 0x213, 0x4321, 0x1024, 0x3311, 0x2224, 0x3222, 0xf233, 0x320f, 0x212, 0x2132, 0xa023, 0xe212, 0x1100, 0xf10, 0x1121, 0x102);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16959953] cycle (D:8)
	FIFO/*7e80*/(32, 0x232, 0x3443, 0x4335, 0x4433, 0x4334, 0x35e2, 0x1030, 0x1110, 0x232, 0x3112, 0xf039, 0xfdff, 0xeddd, 0xdcec, 0xbcdb, 0xcccd, 0x213, 0xecee, 0xf1fe, 0xadff, 0xfabf, 0xcddc, 0xefdb, 0xcdee, 0x214, 0x1ccc, 0xbcd1, 0xffdc, 0xe001, 0xedcd, 0xf0fe, 0x100);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16969561] cycle (D:8)
	FIFO/*7ec0*/(32, 0x233, 0xcdbc, 0xeedc, 0xfeed, 0xf0, 0x1101, 0x3322, 0xf343, 0x233, 0x3221, 0x101e, 0x2121, 0x3222, 0x3242, 0x5434, 0x6555, 0x213, 0x3212, 0x1135, 0x3011, 0x2344, 0x2213, 0x1f13, 0x1211, 0x211, 0x1111, 0x1021, 0x1f1c, 0x1, 0x100, 0x1000, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16979169] cycle (D:8)
	FIFO/*7f00*/(32, 0x212, 0xf0f, 0x2221, 0xf0f0, 0x1121, 0xe0ed, 0x120f, 0xff01, 0x212, 0x211f, 0xee1a, 0xfd, 0xeff0, 0xfee, 0xeff0, 0xfe, 0x213, 0xeef0, 0x1eed, 0xcd00, 0xaadd, 0xdedf, 0xeccc, 0xeefe, 0x214, 0xcabc, 0xef12, 0xecdd, 0x1100, 0xdeef, 0x11ad, 0x1111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16988777] cycle (D:8)
	FIFO/*7f40*/(32, 0x233, 0xddcb, 0xeeed, 0xfffe, 0x2f0, 0x1212, 0x4332, 0xd354, 0x233, 0x1313, 0xf101, 0x2212, 0x3213, 0x3432, 0x5343, 0x5664, 0x213, 0x1122, 0x3222, 0x1211, 0x4431, 0x2232, 0x20df, 0x2143, 0x212, 0x2111, 0x1143, 0x3ac, 0x111, 0x1100, 0x1, 0x1220);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [16998385] cycle (D:8)
	FIFO/*7f80*/(32, 0x212, 0x10, 0x1200, 0x21, 0xe00f, 0xf13e, 0xffe, 0x122, 0x232, 0x1110, 0xee6a, 0xedfd, 0xdcfd, 0xcdcd, 0xdbcd, 0xccbc, 0x212, 0xf00f, 0xfff0, 0xeff0, 0xbfe0, 0xfefe, 0xefef, 0xfffe, 0x214, 0xddec, 0xeffe, 0xdff1, 0xfd, 0x10e1, 0xebaf, 0x432f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17007993] cycle (D:8)
	FIFO/*7fc0*/(32, 0x213, 0x1ff0, 0x3110, 0xf012, 0x2100, 0x2343, 0x1ff0, 0xc364, 0x233, 0x2140, 0x1111, 0x2120, 0x2413, 0x2432, 0x4445, 0x7565, 0x213, 0x2322, 0x1121, 0x3231, 0x2321, 0x2333, 0x1fde, 0x4343, 0x212, 0x1101, 0x2f33, 0x2bd2, 0x1010, 0x1001, 0x101, 0x1200);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17017601] cycle (D:8)
	FIFO/*8000*/(32, 0x212, 0x210, 0x1000, 0x2210, 0xe0f0, 0x2239, 0xef00, 0x210f, 0x232, 0x2001, 0xd20b, 0xddef, 0xeced, 0xdcdd, 0xdadc, 0xdbcd, 0x213, 0xddf1, 0x10ee, 0xae00, 0xaecd, 0xcd0c, 0xeccc, 0xef0f, 0x214, 0xdcac, 0x221e, 0xbd00, 0x310c, 0xddf2, 0x1eee, 0xe10);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17027209] cycle (D:8)
	FIFO/*8040*/(32, 0x213, 0x11f0, 0x1013, 0x1110, 0x121, 0x3201, 0x1223, 0xc12f, 0x213, 0x10eb, 0x1000, 0x1211, 0x0, 0x2310, 0x1122, 0x3100, 0x213, 0x2433, 0xfe01, 0x3431, 0x113, 0x1321, 0x0, 0x4401, 0x212, 0x1121, 0x12e1, 0xb022, 0xf0f2, 0x1111, 0x1001, 0x10f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17036817] cycle (D:8)
	FIFO/*8080*/(32, 0x233, 0x6545, 0x5446, 0x5556, 0x5456, 0x156c, 0x313, 0x1121, 0x232, 0x111, 0x2a1, 0xfdfd, 0xdddd, 0xdced, 0xccdd, 0xdccd, 0x212, 0x110, 0xefef, 0x100, 0xeefd, 0xfffb, 0xefff, 0xfef, 0x214, 0x10ee, 0xfcbb, 0x2122, 0xdcee, 0x1e1f, 0xae21, 0xefff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17046425] cycle (D:8)
	FIFO/*80c0*/(32, 0x213, 0x1210, 0x1011, 0x2310, 0x1111, 0x2101, 0x2344, 0xc102, 0x233, 0x2531, 0x1110, 0x2121, 0x1223, 0x3233, 0x6345, 0x4653, 0x213, 0x5522, 0xef23, 0x430e, 0x1345, 0xf000, 0x2221, 0x131, 0x212, 0x3211, 0x110, 0x3211, 0xf2dd, 0x100f, 0x1112, 0xfff1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17056033] cycle (D:8)
	FIFO/*8100*/(32, 0x232, 0x3233, 0x2233, 0x2233, 0x3324, 0xe5f1, 0x1113, 0x101, 0x232, 0x1010, 0xcc10, 0xcfb3, 0xccee, 0xccdd, 0xbddd, 0xcbdd, 0x212, 0x20fe, 0xe001, 0xffee, 0xe1, 0xecae, 0xe, 0xeef0, 0x213, 0x20dc, 0xde13, 0x1fde, 0xf132, 0xdede, 0x142f, 0xdeff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17065641] cycle (D:8)
	FIFO/*8140*/(32, 0x213, 0x42fd, 0x133, 0x20ff, 0x2333, 0xfe01, 0x5532, 0xe034, 0x233, 0x4420, 0x2103, 0x3110, 0x1232, 0x3213, 0x4344, 0x5445, 0x213, 0x431f, 0xf244, 0x20ee, 0x3453, 0xef01, 0x421f, 0x114, 0x213, 0x3310, 0x144, 0x3111, 0xa964, 0xe3, 0x2232, 0xf001);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17075249] cycle (D:8)
	FIFO/*8180*/(32, 0x212, 0x11f, 0x1111, 0xf0f, 0x1210, 0xb02, 0x20ef, 0xf021, 0x212, 0xfeef, 0x112, 0xefcb, 0x10f, 0xefff, 0x100e, 0xe00f, 0x212, 0xfee, 0x110, 0xefef, 0xf00f, 0xbcff, 0xfef, 0xef01, 0x214, 0xebac, 0xd054, 0xdcbe, 0x2440, 0xbcdf, 0x52ec, 0xfd1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17084857] cycle (D:8)
	FIFO/*81c0*/(32, 0x213, 0x1fef, 0x2212, 0xf002, 0x3221, 0xf032, 0x3200, 0x3444, 0x233, 0x2403, 0x2133, 0x2110, 0x1321, 0x1313, 0x4324, 0x5444, 0x214, 0x1f11, 0x5664, 0xdf22, 0x653f, 0xd376, 0x2fb, 0x6763, 0x212, 0xf011, 0x2111, 0x111, 0x2101, 0x2b1, 0x0, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17094465] cycle (D:8)
	FIFO/*8200*/(32, 0x213, 0xef20, 0x310f, 0x113, 0x20de, 0xa343, 0xdde0, 0x333e, 0x212, 0xee00, 0x10fe, 0xdc21, 0xffdf, 0x1, 0xfeff, 0x10f0, 0x213, 0xddf0, 0x10ec, 0xf012, 0xdccc, 0xffef, 0xcd9c, 0x100d, 0x214, 0xac01, 0xfda, 0xe233, 0xdbc, 0x2300, 0xcddf, 0x20ee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17104073] cycle (D:8)
	FIFO/*8240*/(32, 0x213, 0xe022, 0x1ef, 0x2243, 0xf0f1, 0x4331, 0x12, 0x5300, 0x213, 0xad35, 0x1dca, 0x2343, 0xeee0, 0x3310, 0xf124, 0x21ff, 0x213, 0x2444, 0xef0, 0x3422, 0xef12, 0x310f, 0x115, 0x20ee, 0x212, 0x2141, 0xf0f1, 0x2210, 0x112, 0x100, 0x113c, 0xf0ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17113681] cycle (D:8)
	FIFO/*8280*/(32, 0x213, 0x2530, 0xedf0, 0x33f0, 0xef24, 0x11ff, 0xf34d, 0xfbce, 0x212, 0x210, 0xeeff, 0x200f, 0xe0fc, 0xffef, 0x10, 0xdef0, 0x213, 0x21f0, 0xdfef, 0x1fed, 0xd001, 0xbbcb, 0xdeff, 0xdddf, 0x214, 0x11fb, 0xd0f1, 0xffdb, 0x2000, 0xdde0, 0x10fe, 0xeff1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17123289] cycle (D:8)
	FIFO/*82c0*/(32, 0x214, 0x21ef, 0x2210, 0x3210, 0x3454, 0x2334, 0x4432, 0x5433, 0x213, 0xc243, 0xfcbc, 0x2210, 0xf002, 0x110, 0x2222, 0x1012, 0x214, 0x6533, 0x146, 0x3112, 0x1565, 0xe3dc, 0x4631, 0x1011, 0x212, 0x2f31, 0x1102, 0x1100, 0x1211, 0x1012, 0xa210, 0x2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17132897] cycle (D:8)
	FIFO/*8300*/(32, 0x213, 0x32f0, 0xf01, 0x10ff, 0x143, 0x200f, 0x27dc, 0xdddf, 0x212, 0x10f0, 0xfe00, 0x1ffe, 0x1bf1, 0xfefe, 0x1f0f, 0xdf00, 0x213, 0xefe, 0xe000, 0xedec, 0x100, 0xcbbd, 0xfecb, 0xeebf, 0x214, 0xdfca, 0x200e, 0xedcf, 0xddd, 0xd022, 0xed0e, 0xe21d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17142505] cycle (D:8)
	FIFO/*8340*/(32, 0x214, 0x12f0, 0x110f, 0x3112, 0x3575, 0x3453, 0x5454, 0x5123, 0x213, 0x443, 0xccbd, 0x30ed, 0x1122, 0xf00, 0x3221, 0x233, 0x213, 0x211f, 0x3453, 0xfee0, 0x1442, 0xdce4, 0x221f, 0x144, 0x212, 0x2d30, 0x2221, 0x10f1, 0x2111, 0x113, 0x1011, 0x2b11);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17152113] cycle (D:8)
	FIFO/*8380*/(32, 0x212, 0x1ff1, 0x1010, 0xf0f0, 0x1211, 0x110, 0x23be, 0xff01, 0x212, 0xef, 0x1ff, 0xffef, 0x9100, 0xfe01, 0xfffe, 0xf010, 0x213, 0xcdee, 0xf21e, 0xbdef, 0x10ee, 0xbdd0, 0xe9ab, 0xa11f, 0x213, 0xdefe, 0x20de, 0xef02, 0xeede, 0x1220, 0xd00f, 0x11fc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17161721] cycle (D:8)
	FIFO/*83c0*/(32, 0x214, 0xf302, 0x2ee1, 0x2124, 0x3653, 0x6663, 0x3443, 0x6335, 0x213, 0x222, 0xddde, 0xffde, 0x2210, 0x12, 0x20f0, 0x3234, 0x213, 0xfe12, 0x5431, 0xef14, 0x31fe, 0xe121, 0xfeef, 0x4542, 0x213, 0x2, 0x431f, 0x1244, 0x1010, 0x4433, 0x113, 0x6210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17171329] cycle (D:8)
	FIFO/*8400*/(32, 0x212, 0xf2b0, 0xff2, 0x10, 0x1110, 0x2101, 0x2cd, 0xf101, 0x212, 0xfef0, 0xf20f, 0xff00, 0xfe, 0xf2a, 0xfeff, 0xf, 0x213, 0xde10, 0x10eb, 0xefff, 0xdde, 0xddef, 0xaadd, 0x21fe, 0x213, 0xbe, 0xdcd, 0xf011, 0xdef0, 0x110e, 0xf111, 0x1eed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17180937] cycle (D:8)
	FIFO/*8440*/(32, 0x214, 0x22ff, 0xf124, 0xf030, 0x6740, 0x5765, 0x4333, 0x6556, 0x213, 0xdf14, 0xeed, 0xde00, 0x2fdc, 0x2334, 0xfee1, 0x4411, 0x213, 0xf144, 0x32ef, 0x2243, 0xdeee, 0x2010, 0xff11, 0x331e, 0x212, 0x41e, 0x1001, 0x1121, 0x211, 0x1011, 0x2111, 0x1111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17190545] cycle (D:8)
	FIFO/*8480*/(32, 0x211, 0xd001, 0x10, 0x10, 0x100f, 0x1111, 0xf00d, 0x110f, 0x212, 0xe001, 0xfed, 0x1022, 0xfeef, 0x2ca, 0xe012, 0xeeee, 0x213, 0x2221, 0xcde0, 0xffec, 0xf000, 0xbcbe, 0xbedc, 0x0, 0x212, 0xec00, 0xff0, 0xf010, 0xff0e, 0x1100, 0xfff1, 0xf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17200153] cycle (D:8)
	FIFO/*84c0*/(32, 0x213, 0xf003, 0x101e, 0x3331, 0xff0, 0x5531, 0x1355, 0x3210, 0x213, 0x233, 0xcabd, 0xf, 0xee0e, 0x321f, 0x1013, 0x1001, 0x213, 0x2333, 0x3112, 0x200, 0xec11, 0xf, 0xf001, 0xd000, 0x212, 0x1411, 0x1001, 0x1221, 0x1110, 0x1121, 0x2001, 0x1122);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17209761] cycle (D:8)
	FIFO/*8500*/(32, 0x211, 0x11, 0x11b1, 0x1010, 0xf00, 0xf200, 0xf12f, 0xfff, 0x232, 0x120, 0xf1f1, 0xe101, 0x1e3f, 0xb59c, 0xeddd, 0xecec, 0x213, 0xedb, 0x112, 0xccef, 0xdc, 0xdcc0, 0xacdd, 0x10ee, 0x212, 0xc020, 0xfefe, 0x110e, 0xf00f, 0xff, 0x11, 0xff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17219369] cycle (D:8)
	FIFO/*8540*/(32, 0x213, 0xff0, 0x1121, 0x20f2, 0x2122, 0x3102, 0x5543, 0x2434, 0x213, 0xef01, 0xbbef, 0xfd, 0xd00e, 0x21ed, 0x1233, 0xf022, 0x213, 0x3210, 0x2344, 0xfeff, 0x10f2, 0xede0, 0x1000, 0x1dc2, 0x212, 0x150f, 0x2112, 0x1101, 0x2111, 0x1212, 0x1, 0x2231);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17228977] cycle (D:8)
	FIFO/*8580*/(32, 0x211, 0x111, 0xb01f, 0x13, 0x11, 0xd00f, 0x1121, 0xfff0, 0x231, 0x1010, 0x1001, 0x1f, 0x2e1, 0xe3b0, 0xefef, 0xffef, 0x213, 0xbbbe, 0x310d, 0xce32, 0xecac, 0xdcbe, 0xb01e, 0xfee9, 0x212, 0x100, 0xeffc, 0xffd, 0x100, 0xfff0, 0x0, 0x0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17238585] cycle (D:8)
	FIFO/*85c0*/(32, 0x213, 0xde10, 0x221f, 0x1012, 0x2122, 0x1122, 0x5443, 0x5444, 0x213, 0xdd14, 0xccce, 0xffdb, 0xf000, 0xfedc, 0x2431, 0x1423, 0x213, 0x2fd0, 0x3652, 0x1e12, 0x1fdb, 0xef03, 0xbfee, 0x123a, 0x212, 0xf410, 0x2122, 0x1211, 0x1111, 0x2231, 0xf121, 0x2210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17248193] cycle (D:8)
	FIFO/*8600*/(32, 0x211, 0x1121, 0x1001, 0x10c, 0x211, 0xcf10, 0x100f, 0x12, 0x231, 0x101, 0x1111, 0x1010, 0xf10, 0x4ce3, 0xfe0d, 0xf0de, 0x212, 0xe001, 0xeeee, 0x110, 0xff00, 0xcbad, 0x220f, 0xef0f, 0x212, 0xedd, 0x3ed, 0xddee, 0xef, 0x121, 0xffff, 0x1fef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17257801] cycle (D:8)
	FIFO/*8640*/(32, 0x213, 0xe153, 0xf0ef, 0x120e, 0x2256, 0xf012, 0x5530, 0x4666, 0x213, 0xce34, 0xeded, 0xcdcd, 0xcfec, 0xf21f, 0x10fe, 0x5321, 0x212, 0xf112, 0x1010, 0x1410, 0xfff0, 0xffff, 0xcff, 0xf011, 0x213, 0x37d, 0x4634, 0x1123, 0x2123, 0x4564, 0x2212, 0x4012);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17267409] cycle (D:8)
	FIFO/*8680*/(32, 0x211, 0x1111, 0x111, 0x2ce2, 0x1110, 0xc110, 0xff0f, 0x1110, 0x212, 0xf012, 0xfffe, 0x1122, 0xfe01, 0xa01d, 0xf1f3, 0xeddf, 0x213, 0x110f, 0xf112, 0xeccd, 0x201f, 0xaad2, 0xedcc, 0x21f1, 0x212, 0xff01, 0xecd, 0x100f, 0xef01, 0xef, 0x1210, 0xfef1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17277017] cycle (D:8)
	FIFO/*86c0*/(32, 0x214, 0x10da, 0x5651, 0xbce0, 0x222e, 0x5664, 0xeef2, 0x4310, 0x213, 0x1244, 0xdedf, 0xfee, 0xdf12, 0xf0fe, 0x1100, 0x11, 0x235, 0xf3f, 0x2424, 0x5166, 0x5355, 0x4232, 0xe3ed, 0xcdfe, 0x213, 0x4250, 0x1111, 0x2212, 0x3455, 0x2231, 0x5301, 0xf257);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17286625] cycle (D:8)
	FIFO/*8700*/(32, 0x211, 0x1010, 0x2111, 0xf111, 0x2c, 0xd111, 0xf11e, 0xff0, 0x201, 0x4210, 0x3455, 0xff02, 0x4420, 0x2244, 0xccbc, 0xddee, 0x212, 0xeeee, 0x20ff, 0xef11, 0xefef, 0xedf0, 0xf0f, 0xbdef, 0x212, 0x2101, 0xdbf0, 0xecce, 0x1120, 0xef00, 0x1eed, 0x1112);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17296233] cycle (D:8)
	FIFO/*8740*/(32, 0x213, 0xdcdf, 0x2fcc, 0x2444, 0xffef, 0x72ec, 0x2467, 0xef12, 0x232, 0x3422, 0x3333, 0x1023, 0xef10, 0xefff, 0xefdf, 0xfeff, 0x233, 0x2f00, 0x6112, 0x3441, 0x5554, 0x433, 0x4f, 0x7d2f, 0x213, 0x3fce, 0x3343, 0xf022, 0x3430, 0x2435, 0x2012, 0x3333);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17305841] cycle (D:8)
	FIFO/*8780*/(32, 0x211, 0x1011, 0x110, 0x2111, 0x2b02, 0xf000, 0x110d, 0xf01, 0x232, 0x1200, 0x1222, 0x1112, 0x1121, 0x3122, 0x792f, 0xedee, 0x212, 0xff00, 0xeee, 0x10, 0xff00, 0xddef, 0xe, 0xee01, 0x212, 0xfec, 0xe1f0, 0xdcfe, 0xed, 0x1201, 0xedef, 0x10ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17315449] cycle (D:8)
	FIFO/*87c0*/(32, 0x213, 0x121, 0xacde, 0x410f, 0x134, 0xfedf, 0x4441, 0x1356, 0x233, 0x4433, 0x4455, 0x4457, 0xe23, 0xdee1, 0xeeef, 0xefdf, 0x232, 0xff, 0x1021, 0x2122, 0x2312, 0x132, 0x104, 0x401, 0x213, 0xfe00, 0x2110, 0x3232, 0x1112, 0x3321, 0x3333, 0x2113);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17325057] cycle (D:8)
	FIFO/*8800*/(32, 0x212, 0x2121, 0x221, 0x2111, 0x4134, 0xf1da, 0x21bd, 0x111, 0x232, 0x2103, 0x1220, 0x2121, 0x2111, 0x2121, 0x221, 0xde7a, 0x212, 0xf00f, 0xfef, 0xf0ff, 0x10, 0xc0ff, 0xec, 0x0, 0x213, 0xbadd, 0x1fdd, 0xdfae, 0xedbc, 0x10ed, 0xe011, 0xdced);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17334665] cycle (D:8)
	FIFO/*8840*/(32, 0x213, 0x10fe, 0xf011, 0xfecd, 0x1200, 0x1033, 0xff, 0x4530, 0x213, 0x135, 0x10fe, 0x341f, 0xed03, 0xcdbc, 0x11fe, 0x343, 0x213, 0xedf, 0x422e, 0x2346, 0xde0f, 0x1d10, 0x1354, 0xc12d, 0x213, 0x10f0, 0x3333, 0xe011, 0x31ff, 0x3444, 0x1132, 0x3200);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17344273] cycle (D:8)
	FIFO/*8880*/(32, 0x212, 0x2222, 0x1013, 0x1100, 0x3243, 0x9202, 0xbde, 0x1212, 0x231, 0x202, 0x1011, 0x110, 0x1102, 0x1101, 0x1110, 0x5b20, 0x213, 0xddcb, 0x1fd, 0xf000, 0xeedd, 0x210e, 0xe9a, 0xecdf, 0x213, 0xfe1f, 0xeebb, 0xbaee, 0xddef, 0xeffe, 0xef, 0xcdff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17353881] cycle (D:8)
	FIFO/*88c0*/(32, 0x214, 0xb01e, 0xfc, 0xdcce, 0xd033, 0x56fe, 0xf03, 0x1332, 0x213, 0x3442, 0x1f00, 0x2ff1, 0x2411, 0xede0, 0xeeec, 0x4330, 0x212, 0xff22, 0xfff, 0x3210, 0x22, 0xfdef, 0x2211, 0xff53, 0x213, 0xeeef, 0x421f, 0x1344, 0xeee1, 0x432f, 0x5544, 0x1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17363489] cycle (D:8)
	FIFO/*8900*/(32, 0x211, 0x2010, 0x1111, 0x1, 0x1020, 0x1201, 0xcb11, 0x1, 0x213, 0x2442, 0xcd01, 0x3fdd, 0x2355, 0xee12, 0x2edc, 0xd434, 0x212, 0xef0a, 0xfeed, 0x10f, 0xf001, 0xfee, 0xdc0, 0xe011, 0x213, 0xdecd, 0xcbdc, 0xf01f, 0xccac, 0xfedc, 0x11fe, 0xcdf1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17373097] cycle (D:8)
	FIFO/*8940*/(32, 0x213, 0xf1eb, 0x20dd, 0xde22, 0xf0dd, 0x321f, 0xe123, 0xe, 0x233, 0x110f, 0x1222, 0xe234, 0x3233, 0x3334, 0x321, 0x42f0, 0x232, 0x213f, 0x1111, 0x1010, 0x2221, 0x4002, 0xf100, 0x3034, 0x213, 0xeef1, 0xfefd, 0x6632, 0xd024, 0xfde, 0x6642, 0x1255);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17382705] cycle (D:8)
	FIFO/*8980*/(32, 0x211, 0x0, 0x1111, 0x112, 0x10, 0x2000, 0xf12, 0xce1, 0x213, 0x532d, 0xf145, 0xfcdb, 0x3331, 0x234, 0xddd0, 0x211f, 0x212, 0x12a0, 0xddee, 0xee, 0x1110, 0xeef0, 0xebff, 0x1010, 0x212, 0xeff0, 0xceee, 0x100e, 0xcd11, 0xefed, 0x10ff, 0xf001);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17392313] cycle (D:8)
	FIFO/*89c0*/(32, 0x213, 0xfebb, 0xede, 0x242, 0xecce, 0x31ee, 0x1434, 0xfed0, 0x233, 0x10fd, 0x2121, 0x4f32, 0x21f3, 0x4335, 0x2233, 0x2e51, 0x212, 0x2322, 0xddf2, 0xfe, 0x3331, 0xfee1, 0xee, 0x4133, 0x212, 0xf22, 0xffef, 0x410f, 0xf233, 0xfffe, 0x221f, 0x1244);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17401921] cycle (D:8)
	FIFO/*8a00*/(32, 0x213, 0x2001, 0x421f, 0x4766, 0xe222, 0x52ec, 0x2e56, 0x1e23, 0x212, 0x12b9, 0x1223, 0xfeff, 0x111f, 0x2121, 0xff00, 0xff0f, 0x212, 0x3bf0, 0xbe11, 0xeeee, 0x1000, 0xf011, 0xacff, 0xf, 0x212, 0x11, 0xdcef, 0xf0ec, 0x111, 0xeddd, 0xffee, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17411529] cycle (D:8)
	FIFO/*8a40*/(32, 0x213, 0xccc1, 0xddde, 0x441e, 0xcdf3, 0xfdd, 0x4320, 0xd033, 0x213, 0x20ff, 0x2322, 0xf0f2, 0xf310, 0x432f, 0xff23, 0xfee, 0x233, 0x4332, 0x3335, 0x3031, 0x301, 0x135f, 0x10, 0x5c35, 0x213, 0x2543, 0xdde1, 0x1ffd, 0x5654, 0xeee1, 0x1f0e, 0x6753);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17421137] cycle (D:8)
	FIFO/*8a80*/(32, 0x212, 0x1122, 0x0, 0x3211, 0xf324, 0x1fe, 0x2df2, 0x1132, 0x212, 0x9000, 0xf012, 0x100, 0x1101, 0x1, 0x1100, 0xf000, 0x212, 0xdb2e, 0xf1, 0xfde0, 0xf00e, 0x10ff, 0xaf11, 0xf0fe, 0x212, 0xff0, 0xef01, 0xffcd, 0xf00, 0xeee0, 0xffef, 0xf0ef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17430745] cycle (D:8)
	FIFO/*8ac0*/(32, 0x214, 0xf13, 0xdccd, 0xecbc, 0xf244, 0x3ecb, 0xdf34, 0x333e, 0x213, 0x2011, 0x34, 0x11dd, 0x3313, 0x2035, 0x3f2, 0xfffd, 0x213, 0x4530, 0xee13, 0xddcd, 0x12f, 0x1134, 0xbdff, 0x405f, 0x213, 0x3355, 0xde11, 0x1dcc, 0x5653, 0xef13, 0x1edd, 0x6542);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17440353] cycle (D:8)
	FIFO/*8b00*/(32, 0x213, 0x5575, 0xff01, 0x3211, 0x3575, 0xf2, 0x1cb0, 0x4432, 0x211, 0x1011, 0xf1d0, 0x1ff0, 0x120, 0x11, 0xff, 0x1, 0x212, 0xbe1f, 0xfee2, 0xff0f, 0xf0d, 0xff0f, 0xc100, 0xff0c, 0x212, 0xf010, 0xffff, 0xedce, 0x1010, 0xddf0, 0xfdfe, 0xf0e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17449961] cycle (D:8)
	FIFO/*8b40*/(32, 0x214, 0xc12, 0xd9af, 0xedee, 0x142f, 0xbdd, 0xf452, 0x51ce, 0x213, 0x123, 0x2231, 0xeede, 0x4443, 0x543, 0xe16f, 0xff1e, 0x233, 0x4643, 0x4355, 0x2324, 0x1b0, 0x1002, 0x211, 0x6934, 0x233, 0x4342, 0x4554, 0x1125, 0x3242, 0x4534, 0x3344, 0x5434);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17459569] cycle (D:8)
	FIFO/*8b80*/(32, 0x212, 0x3343, 0xf012, 0x1100, 0x1132, 0x1f23, 0x10cd, 0x1111, 0x212, 0x1322, 0x9e30, 0xffe3, 0x3310, 0x12, 0xfff0, 0x110, 0x212, 0xbc2f, 0xfff2, 0xffff, 0xfee0, 0xf0, 0xd0f0, 0xff1b, 0x212, 0x10f, 0xefe0, 0xfecf, 0xfe, 0xc011, 0xfeec, 0xfee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17469177] cycle (D:8)
	FIFO/*8bc0*/(32, 0x214, 0x1e30, 0xabad, 0xedee, 0x262e, 0xdcdd, 0x1321, 0x20ff, 0x213, 0x123, 0x3211, 0xf0b1, 0x4420, 0x3544, 0x2ff6, 0xe0fe, 0x233, 0x5535, 0x3533, 0xf324, 0xd02d, 0x1f1e, 0x211, 0x40f7, 0x233, 0x3440, 0x4555, 0x2345, 0x3221, 0x4442, 0x5353, 0x3442);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17478785] cycle (D:8)
	FIFO/*8c00*/(32, 0x212, 0x4432, 0x22, 0x100, 0x3101, 0x212, 0x1ed, 0x11f1, 0x211, 0x1111, 0x1110, 0xf00c, 0x100, 0x1111, 0xf000, 0xf000, 0x212, 0xae20, 0xf002, 0xef0f, 0xeeff, 0x0, 0xe0f0, 0xfd0b, 0x212, 0x100f, 0xff00, 0xdecf, 0xffe, 0xf210, 0xeedd, 0xeeee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17488393] cycle (D:8)
	FIFO/*8c40*/(32, 0x214, 0x3e1e, 0xbcf4, 0xbbdc, 0x42fc, 0xcdf2, 0x331f, 0xddcf, 0x212, 0x1111, 0x2100, 0xf01, 0x200f, 0x5231, 0xf033, 0xfee0, 0x213, 0xff, 0x2323, 0xb9e2, 0xfddc, 0x4331, 0x1244, 0xddc6, 0x213, 0x52ff, 0x4545, 0xbcf2, 0xedb, 0x6641, 0x135, 0xfeee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17498001] cycle (D:8)
	FIFO/*8c80*/(32, 0x213, 0x7522, 0x4575, 0x22, 0x34ae, 0x5333, 0x33eb, 0xe03, 0x212, 0x1110, 0x3321, 0x1ea5, 0xffee, 0x1210, 0x2222, 0xef00, 0x231, 0xc111, 0xff3, 0xf0, 0xe0ff, 0xeeff, 0xfeff, 0xee0d, 0x213, 0xddc9, 0xfff, 0xecf4, 0xbbbb, 0xdfec, 0xd, 0xbcd0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17507609] cycle (D:8)
	FIFO/*8cc0*/(32, 0x213, 0xdbca, 0x1f0, 0x32, 0xfede, 0xdcde, 0x442f, 0xee04, 0x213, 0xeff0, 0x31ee, 0x1266, 0xfff1, 0x2410, 0x7374, 0xcf26, 0x232, 0x1234, 0x1111, 0x2012, 0x11, 0xff00, 0x3100, 0x2321, 0x213, 0xe0ee, 0x2000, 0x3354, 0xce01, 0x1ffd, 0x4521, 0x2245);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17517217] cycle (D:8)
	FIFO/*8d00*/(32, 0x213, 0x210, 0x1111, 0x6654, 0x2e24, 0xff01, 0x52ad, 0x3366, 0x212, 0x21, 0x10f0, 0xce52, 0xf0f4, 0xff00, 0x220f, 0x112, 0x232, 0xe423, 0xfb7c, 0xfefe, 0xe0ef, 0xd0c0, 0xecdd, 0xb1ab, 0x213, 0xddf0, 0xbbcd, 0x1ced, 0xdf01, 0xbacd, 0xcdcc, 0xf01f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17526825] cycle (D:8)
	FIFO/*8d40*/(32, 0x213, 0xeedd, 0xceff, 0x10fc, 0x112, 0xcfff, 0xeedd, 0x2100, 0x213, 0x1123, 0xedf0, 0x110, 0x2223, 0x1136, 0x52d1, 0x2224, 0x213, 0x1, 0xeece, 0x21f, 0x1210, 0xefff, 0x55ff, 0x2341, 0x213, 0x1122, 0xf011, 0x310f, 0xf124, 0x1010, 0x21ff, 0x2343);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17536433] cycle (D:8)
	FIFO/*8d80*/(32, 0x213, 0x2132, 0x12, 0x4321, 0x535, 0x204f, 0x1cd0, 0x4332, 0x212, 0x1122, 0x1001, 0x2210, 0x129, 0xe001, 0x2f0f, 0x111, 0x212, 0x2110, 0xd0ca, 0xfe, 0x1111, 0xde00, 0xfedf, 0x2def, 0x213, 0xf011, 0xbcce, 0xcddc, 0xfe01, 0xcbac, 0xedcd, 0xe0ef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17546041] cycle (D:8)
	FIFO/*8dc0*/(32, 0x214, 0xecc, 0xabcc, 0x1fca, 0x121, 0xfebe, 0xabdc, 0x30ba, 0x213, 0x221, 0xfe00, 0xd0f0, 0x4521, 0x2133, 0x230d, 0x2212, 0x213, 0x1243, 0xded0, 0x10fe, 0x42f0, 0xf003, 0x13fd, 0x1321, 0x213, 0x3444, 0xef02, 0x210e, 0x3111, 0xf233, 0x20fd, 0x2232);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17555649] cycle (D:8)
	FIFO/*8e00*/(32, 0x213, 0x3433, 0xef03, 0x331f, 0x3223, 0x4224, 0xeb11, 0x2220, 0x212, 0x2211, 0x122, 0x110, 0x3af1, 0x11, 0xfff, 0x1001, 0x212, 0x1200, 0xdb1, 0xfeff, 0x10ff, 0x21, 0xffee, 0xbefe, 0x213, 0x21f2, 0xcff1, 0xdedc, 0xdcda, 0xceed, 0xfedc, 0xbdfe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17565257] cycle (D:8)
	FIFO/*8e40*/(32, 0x213, 0x1fec, 0xfee0, 0x1fe, 0xeef0, 0x10fe, 0xdee0, 0xffff, 0x214, 0xfded, 0x2121, 0xbf0f, 0x3035, 0x3411, 0x336e, 0x4412, 0x214, 0x5555, 0x20e0, 0xeff1, 0xf1f, 0x4545, 0xe5df, 0x412f, 0x214, 0x7744, 0x155, 0x1120, 0x22ff, 0x3576, 0x3fe0, 0x2432);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17574865] cycle (D:8)
	FIFO/*8e80*/(32, 0x213, 0x3223, 0x212, 0x3311, 0xf13, 0x2533, 0xd051, 0x221e, 0x212, 0x1001, 0x2221, 0x1111, 0xd101, 0x102b, 0xf00, 0x100f, 0x233, 0x4213, 0x1950, 0xb0a6, 0xcdde, 0xdddd, 0xafc, 0xcbdb, 0x212, 0xfb, 0xf0f, 0xf00f, 0xeedf, 0xfeee, 0xffee, 0xffff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17584473] cycle (D:8)
	FIFO/*8ec0*/(32, 0x213, 0xffed, 0xccef, 0x111f, 0xeff0, 0xf10f, 0xedce, 0x101f, 0x214, 0xdcde, 0xfed0, 0x3fee, 0x2313, 0x2300, 0x117f, 0x2111, 0x214, 0x5654, 0x3134, 0xf113, 0xfdd, 0x4621, 0x5605, 0xee2e, 0x213, 0x120f, 0x3332, 0x222, 0x10f0, 0x2110, 0x134, 0x2212);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17594081] cycle (D:8)
	FIFO/*8f00*/(32, 0x214, 0x1045, 0x2333, 0x6632, 0x1135, 0x3451, 0x5436, 0x630c, 0x212, 0x11, 0x1101, 0x2111, 0x1112, 0x1bf1, 0xf000, 0xf0, 0x232, 0x1121, 0xd302, 0xfd4f, 0xefdf, 0xdefd, 0xffdf, 0xdefd, 0x213, 0x1990, 0xffe, 0xfff0, 0xaafe, 0xedcc, 0xedde, 0xeded);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17603689] cycle (D:8)
	FIFO/*8f40*/(32, 0x214, 0xccca, 0xcbce, 0xffe9, 0xeddc, 0xf, 0xbace, 0xe0fe, 0x214, 0xcedd, 0xfd0f, 0x12ef, 0xe021, 0xf2f1, 0x326f, 0x101, 0x212, 0x1111, 0x101, 0x23, 0x10f0, 0xff10, 0x4200, 0xf111, 0x213, 0xfef, 0x4212, 0x2223, 0x1111, 0x101f, 0x1212, 0x2322);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17613297] cycle (D:8)
	FIFO/*8f80*/(32, 0x214, 0x1333, 0x3433, 0x5433, 0x2455, 0x5631, 0x6256, 0x42ba, 0x212, 0x1012, 0x1100, 0x1112, 0x1111, 0x2011, 0x1a, 0xff, 0x212, 0xf110, 0x2000, 0xe0ed, 0xf0ef, 0xeff0, 0x100f, 0xef11, 0x212, 0xcef0, 0xfff0, 0x1f0, 0xcf0f, 0xffee, 0xeefe, 0xfffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17622905] cycle (D:8)
	FIFO/*8fc0*/(32, 0x214, 0xbcce, 0xddba, 0xdae, 0xccd0, 0xf0ed, 0xbbae, 0xd0fd, 0x214, 0xebef, 0x2fee, 0xe000, 0xf232, 0x20e, 0xff4d, 0x432f, 0x212, 0xf101, 0x1200, 0x1121, 0x1100, 0xff11, 0x100f, 0x1024, 0x213, 0x0, 0x1f0f, 0x3222, 0xf234, 0x3220, 0xf01, 0x2422);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17632513] cycle (D:8)
	FIFO/*9000*/(32, 0x213, 0x2101, 0x1231, 0x2110, 0x1332, 0x3410, 0x2144, 0xee01, 0x212, 0x112, 0x1101, 0x1121, 0x1101, 0x1111, 0xeb21, 0x1000, 0x232, 0x1202, 0x1111, 0xd5c0, 0xfff0, 0xeeef, 0xeeee, 0xfeee, 0x213, 0xb2cf, 0xccfd, 0x1fdc, 0xae11, 0xfb, 0xacde, 0xeedb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17642121] cycle (D:8)
	FIFO/*9040*/(32, 0x213, 0xddef, 0xfffd, 0xecee, 0xffff, 0xffef, 0xfddf, 0xefff, 0x214, 0xbbcb, 0x1e, 0x1e, 0xf022, 0x241e, 0x1c, 0x632f, 0x213, 0x22, 0xf0, 0x2211, 0x3223, 0x101, 0xeef0, 0x35f, 0x213, 0x2244, 0xef01, 0x210f, 0x2113, 0x4441, 0xf013, 0x3210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17651729] cycle (D:8)
	FIFO/*9080*/(32, 0x213, 0xf012, 0x4323, 0x1223, 0xe0, 0x3322, 0x4222, 0x2103, 0x212, 0x10e1, 0x1011, 0x2211, 0x102, 0x1110, 0x1f11, 0x11fb, 0x212, 0xf002, 0xffff, 0xfc1, 0x10ff, 0xf000, 0xffe, 0xf0f, 0x213, 0xd00f, 0xee3d, 0xeddd, 0xacef, 0x200b, 0xde00, 0xeecc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17661337] cycle (D:8)
	FIFO/*90c0*/(32, 0x213, 0xbddd, 0xdc, 0xff11, 0xfddf, 0xde00, 0xfcbb, 0x1111, 0x214, 0xcabe, 0x9efe, 0xbdd, 0x3451, 0x3221, 0xef0b, 0x2ffe, 0x213, 0x2343, 0x1101, 0x1241, 0x30fe, 0x1343, 0xf0f0, 0x3ff, 0x213, 0x1100, 0x2322, 0x1ff0, 0x2232, 0x1100, 0x2343, 0x1131);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17670945] cycle (D:8)
	FIFO/*9100*/(32, 0x213, 0x1233, 0x2000, 0x3443, 0x101, 0x1222, 0x3111, 0x21f1, 0x212, 0xf121, 0x12, 0x1110, 0x111, 0x2120, 0x21, 0x1a00, 0x212, 0xf001, 0xf0ff, 0x1ec3, 0xfe, 0xf000, 0xfff, 0xf000, 0x212, 0xf0f0, 0xf1b, 0xe0f, 0xeeff, 0xed, 0xff0f, 0xfffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17680553] cycle (D:8)
	FIFO/*9140*/(32, 0x213, 0xbeff, 0xeedc, 0xef0f, 0x2fee, 0xd032, 0xcabc, 0xfffe, 0x214, 0xeccc, 0x90f2, 0x1cdf, 0x21ef, 0x1521, 0x346e, 0xfe2, 0x213, 0xf0ff, 0x3221, 0x3522, 0x3133, 0x221, 0x100e, 0x3fd1, 0x213, 0x1110, 0x1010, 0x1001, 0x112, 0x5342, 0x2223, 0x3210);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17690161] cycle (D:8)
	FIFO/*9180*/(32, 0x213, 0xf144, 0x2210, 0x1235, 0x1210, 0x2212, 0x210, 0x1110, 0x212, 0x2221, 0x11f0, 0x2200, 0x1, 0x2100, 0x122, 0xc101, 0x212, 0xf2c, 0xff, 0xffb1, 0xf0ff, 0x0, 0xfff, 0x0, 0x213, 0xc0cd, 0x3c4a, 0xdeef, 0xdeee, 0xfbaa, 0xfe0f, 0xfedd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17699769] cycle (D:8)
	FIFO/*91c0*/(32, 0x213, 0xe0ff, 0xdeed, 0xefe, 0xfdf, 0x231, 0x9ace, 0xefdc, 0x213, 0xdcde, 0x121f, 0xfff1, 0x2ef0, 0xe110, 0x4433, 0x224, 0x213, 0xfede, 0x121f, 0x5102, 0x2354, 0x1221, 0xf100, 0x2ce2, 0x213, 0x10f, 0x1001, 0x10f1, 0x1012, 0x3331, 0x3444, 0x1342);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17709377] cycle (D:8)
	FIFO/*9200*/(32, 0x213, 0x242, 0x231f, 0x123, 0x1ff0, 0x2121, 0xfd02, 0x2331, 0x213, 0x23, 0x4f11, 0x3222, 0xf124, 0x20ff, 0x1555, 0x2e0f, 0x212, 0xf2ae, 0xf0ff, 0x1dc1, 0xf0f, 0xf, 0x0, 0xf00f, 0x212, 0xb0ef, 0xf00e, 0xff10, 0xf000, 0xeeed, 0xf0ef, 0xffef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17718985] cycle (D:8)
	FIFO/*9240*/(32, 0x213, 0xef1, 0xeee0, 0xfcfe, 0x1d12, 0x3411, 0xcdd1, 0xbbcc, 0x213, 0xcdcb, 0x30fc, 0x332, 0xff, 0x2ef0, 0x6431, 0x3445, 0x213, 0xfeff, 0x3ffd, 0x3010, 0x4575, 0xf23, 0x1311, 0xfde0, 0x213, 0x12eb, 0xff00, 0x1131, 0xff12, 0x540d, 0x6546, 0x4433);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17728593] cycle (D:8)
	FIFO/*9280*/(32, 0x213, 0x1244, 0xf1ef, 0x2131, 0xd002, 0x2010, 0xfce1, 0x21f, 0x213, 0x253, 0x101f, 0x3434, 0xf113, 0xf00, 0x5332, 0xd124, 0x211, 0x1de0, 0xf00f, 0xc00, 0xf00, 0xf0, 0x1100, 0x0, 0x232, 0xbef0, 0xcec2, 0xdddc, 0xddec, 0xcdeb, 0xccbc, 0xbbbb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17738201] cycle (D:8)
	FIFO/*92c0*/(32, 0x213, 0xe0f, 0xff10, 0xecd, 0xde20, 0x430f, 0xf134, 0xccde, 0x213, 0xdedb, 0x2eca, 0x452f, 0xff14, 0x1dc, 0x221f, 0x5443, 0x213, 0x1432, 0xeddf, 0xf, 0x2442, 0x3443, 0x1344, 0xdfe2, 0x213, 0xecdb, 0xfded, 0x2443, 0xff11, 0x41ff, 0x4103, 0x6764);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17747809] cycle (D:8)
	FIFO/*9300*/(32, 0x213, 0x1455, 0xff00, 0xfdf, 0x11e0, 0x210, 0x10ed, 0xfeff, 0x213, 0x21ff, 0xf310, 0x5253, 0xe234, 0xdede, 0x542f, 0x1234, 0x212, 0x9100, 0xeef0, 0x9ffe, 0xf0, 0x0, 0x1100, 0x1, 0x212, 0xc100, 0xeee0, 0x200f, 0x12, 0xffde, 0xdefd, 0xefe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17757417] cycle (D:8)
	FIFO/*9340*/(32, 0x213, 0xf110, 0xf000, 0xfdef, 0xde1f, 0x441e, 0x2145, 0xebff, 0x213, 0xceed, 0xeded, 0x641e, 0xb155, 0x1fee, 0x1f01, 0x3101, 0x213, 0x5523, 0xdee1, 0x20fe, 0x3311, 0x3333, 0x4444, 0xc232, 0x213, 0xefec, 0xbbcb, 0x242e, 0xf022, 0x2fee, 0x1223, 0x6422);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17767025] cycle (D:8)
	FIFO/*9380*/(32, 0x212, 0x3443, 0x11, 0xfff0, 0xfff, 0xef0f, 0x2000, 0xf000, 0x233, 0x1f00, 0xfffe, 0x12d, 0x3433, 0x3432, 0x3322, 0x4411, 0x212, 0x2211, 0xe2b0, 0xefe, 0xf0db, 0xfff, 0x1111, 0x11, 0x213, 0xa200, 0xecda, 0x120e, 0x2233, 0xbdf0, 0xccac, 0xedcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17776633] cycle (D:8)
	FIFO/*93c0*/(32, 0x213, 0x11fe, 0x1433, 0xbd00, 0xf10d, 0x2fde, 0x6344, 0xee06, 0x233, 0xe030, 0xcdde, 0xebca, 0x1fbf, 0x3e0f, 0xf0f0, 0xffef, 0x213, 0x5620, 0x125, 0xfedd, 0x1210, 0x3312, 0x5662, 0xf144, 0x213, 0xd000, 0xaaac, 0xf0d, 0x222, 0xedff, 0x1101, 0x32f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17786241] cycle (D:8)
	FIFO/*9400*/(32, 0x212, 0x4533, 0x1133, 0xff00, 0xffff, 0xfeff, 0x1210, 0x1, 0x213, 0xeedd, 0xefde, 0x32e0, 0x2343, 0xf000, 0xf0fe, 0xf0f, 0x212, 0x2211, 0xb022, 0xf000, 0xfb00, 0xfe0, 0x1121, 0x1f, 0x213, 0xe01, 0xbec9, 0x1fed, 0x3222, 0xfff0, 0xcdcc, 0xcbbc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17795849] cycle (D:8)
	FIFO/*9440*/(32, 0x213, 0x21fe, 0x4442, 0xe001, 0xffe0, 0x1eed, 0x4342, 0xf024, 0x213, 0xe1ff, 0xcccd, 0x2efb, 0x4432, 0xf13, 0xff00, 0xcacd, 0x213, 0x62fe, 0x3226, 0x2001, 0x201, 0x10f, 0x4443, 0x2344, 0x213, 0x222, 0x9acf, 0xdfdb, 0x120f, 0x11, 0xff22, 0xfcee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17805457] cycle (D:8)
	FIFO/*9480*/(32, 0x212, 0x3320, 0x2333, 0x1122, 0xf1f1, 0xecde, 0x211f, 0x112, 0x233, 0x3224, 0xe001, 0xdedf, 0xf0df, 0x3210, 0x2322, 0xf01f, 0x232, 0x1ff0, 0x1101, 0x41f3, 0x1020, 0xfd3c, 0xeff, 0xf, 0x212, 0x1000, 0xede1, 0xfded, 0x110e, 0x111f, 0xef10, 0xdeee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17815065] cycle (D:8)
	FIFO/*94c0*/(32, 0x213, 0xfcca, 0x5311, 0x1434, 0x31, 0xcbdd, 0xe, 0x3433, 0x233, 0x24f1, 0x22, 0xdd0e, 0xcb0a, 0xeee, 0x2202, 0x112, 0x233, 0xcebe, 0xdabe, 0xefcd, 0x2200, 0x2312, 0x4335, 0x5463, 0x213, 0x4441, 0xbf34, 0xdeba, 0xfccb, 0x322f, 0x2442, 0x1000);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17824673] cycle (D:8)
	FIFO/*9500*/(32, 0x212, 0xff, 0x2121, 0x2221, 0x2123, 0xceff, 0xefd, 0x21, 0x233, 0x3131, 0x1250, 0x3125, 0x2a1, 0xfef, 0x4111, 0x4533, 0x213, 0xfee0, 0xedf, 0x3130, 0x27ec, 0x9d5, 0xeffd, 0xef0f, 0x213, 0x221e, 0xb233, 0xdf1e, 0xcbbb, 0xe0fe, 0xf23, 0xf0ef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17834281] cycle (D:8)
	FIFO/*9540*/(32, 0x213, 0xdbef, 0xfeed, 0x2220, 0x1011, 0xe11, 0xee01, 0x61ec, 0x213, 0x2103, 0x1011, 0xdff0, 0xddfd, 0x200f, 0x1321, 0x2111, 0x233, 0xfd02, 0xcbf0, 0xbcda, 0xdeba, 0x3efd, 0x1310, 0x2262, 0x213, 0x2431, 0x1353, 0x20e0, 0xdebd, 0xffec, 0x231f, 0x2001);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17843889] cycle (D:8)
	FIFO/*9580*/(32, 0x213, 0x3222, 0x2133, 0x4012, 0x2124, 0xded0, 0xecb, 0x2322, 0x214, 0xfe21, 0xe112, 0xf473, 0xcbf5, 0x544e, 0x3234, 0x331f, 0x212, 0xf01, 0x1f00, 0xf111, 0xe110, 0xcf30, 0xeeef, 0x100e, 0x212, 0x1100, 0x2211, 0xfdd0, 0xdedd, 0x10f, 0x11, 0xff1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17853497] cycle (D:8)
	FIFO/*95c0*/(32, 0x212, 0xde00, 0xfeec, 0x1110, 0x100f, 0x10, 0xeeff, 0x11ff, 0x233, 0xfdcd, 0x32ff, 0x31f, 0xee21, 0xdfe0, 0xeff, 0x200f, 0x213, 0xad23, 0xbacb, 0xdd, 0x10fe, 0x4220, 0xff14, 0x22fe, 0x213, 0x3552, 0x3554, 0x1133, 0xbbef, 0xdc, 0x1230, 0x12ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17863105] cycle (D:8)
	FIFO/*9600*/(32, 0x213, 0x1201, 0x211e, 0x3024, 0x3224, 0xde02, 0xddbd, 0x133f, 0x213, 0xf22, 0x231, 0x444f, 0xf002, 0x211e, 0x134, 0x12ff, 0x233, 0x5537, 0x5424, 0x442, 0x3434, 0xff55, 0xde16, 0xbebc, 0x212, 0x1121, 0x11f0, 0xd100, 0xdded, 0x110e, 0x1011, 0xfff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17872713] cycle (D:8)
	FIFO/*9640*/(32, 0x213, 0xbbff, 0xec9b, 0x12f, 0x2120, 0xfe13, 0xdcff, 0xfe0d, 0x213, 0x3011, 0x43ff, 0x32e2, 0xf222, 0x10fe, 0x1ff, 0xf00f, 0x213, 0xee00, 0xdedf, 0xfdca, 0xef01, 0x31de, 0x1356, 0x1000, 0x213, 0x2313, 0x4441, 0x5222, 0xf015, 0x1edf, 0xfe, 0x1200);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17882321] cycle (D:8)
	FIFO/*9680*/(32, 0x213, 0x1ffe, 0x3422, 0x3233, 0xf125, 0xad00, 0xecdb, 0x561f, 0x213, 0x244, 0x251f, 0x1210, 0x4001, 0x3103, 0x2001, 0x31f1, 0x232, 0x2331, 0x2323, 0x3223, 0x2222, 0x1323, 0xc33d, 0xceee, 0x232, 0xdedf, 0xeffd, 0xff0e, 0xb1ad, 0xbbdb, 0xbccb, 0xcbdd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17891929] cycle (D:8)
	FIFO/*96c0*/(32, 0x213, 0xce32, 0xdccc, 0xffee, 0x0, 0x411, 0xdd0e, 0x1f10, 0x213, 0xff1, 0xccd, 0x1001, 0x1323, 0x131, 0xded1, 0xff0e, 0x213, 0xf0, 0xf12, 0x2ddf, 0xcfd1, 0x1fdc, 0x32e0, 0xf134, 0x213, 0x5345, 0xf034, 0x1e01, 0x234, 0x10f0, 0x121, 0xf1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17901537] cycle (D:8)
	FIFO/*9700*/(32, 0x213, 0x20ff, 0x1210, 0x4244, 0x2467, 0xcfef, 0xdecd, 0x1fbb, 0x213, 0x2422, 0x4533, 0x4222, 0x2332, 0x0, 0x10, 0x31cf, 0x232, 0x3231, 0x1433, 0x3325, 0x2431, 0xf342, 0x2c35, 0xeee2, 0x212, 0xf0ff, 0xf00f, 0xed, 0xc00, 0xffee, 0xefff, 0xff0f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17911145] cycle (D:8)
	FIFO/*9740*/(32, 0x213, 0xd2eb, 0xedfd, 0x1f, 0xf020, 0x222f, 0xefe1, 0xf0f, 0x213, 0xf332, 0xbdef, 0x3ecd, 0x1e02, 0x3430, 0xbdf1, 0xf0fe, 0x214, 0x1bab, 0x5211, 0x1df3, 0x4f04, 0xfc13, 0x1c9e, 0xf556, 0x213, 0x4354, 0xe253, 0x2ff, 0x431, 0x21fe, 0xe003, 0xfff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17920753] cycle (D:8)
	FIFO/*9780*/(32, 0x213, 0x120f, 0x1152, 0x6331, 0x2437, 0x1d02, 0xf01, 0xdbad, 0x213, 0x5300, 0x3322, 0x4012, 0x2454, 0x2212, 0xeeef, 0x230f, 0x232, 0x5223, 0x4533, 0x4452, 0x4433, 0x2243, 0xd234, 0xde40, 0x212, 0xfffe, 0xffff, 0xedde, 0xcf00, 0xeff0, 0x0, 0xe000);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17930361] cycle (D:8)
	FIFO/*97c0*/(32, 0x213, 0xeefc, 0xfef0, 0xccc, 0xff01, 0x44fc, 0x1014, 0x2ad1, 0x213, 0xe024, 0xcf00, 0xdbbe, 0x43, 0x2300, 0xce13, 0xf1f, 0x213, 0x130f, 0x11, 0x1ebd, 0xce01, 0x101e, 0x1100, 0x242f, 0x213, 0x3332, 0x1114, 0xfdf0, 0x3400, 0x3, 0x111f, 0xe0f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17939969] cycle (D:8)
	FIFO/*9800*/(32, 0x213, 0x320f, 0xf242, 0x1001, 0x2020, 0xe023, 0x1f24, 0xdcce, 0x213, 0x1eff, 0x5444, 0x1032, 0x3565, 0xeff1, 0xf000, 0x4300, 0x232, 0x5223, 0x4424, 0x4433, 0x3342, 0x2343, 0x2215, 0xd11e, 0x213, 0xddcb, 0xffba, 0xdccc, 0xe200, 0xfe3f, 0x1f0, 0xcc01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17949577] cycle (D:8)
	FIFO/*9840*/(32, 0x213, 0x11c, 0xc000, 0xfdf0, 0xffe0, 0x2f0, 0x2000, 0xcce0, 0x233, 0xbcd0, 0xedc1, 0xddef, 0x1edd, 0x10be, 0x22e4, 0x2231, 0x213, 0x352f, 0xe1f0, 0xddce, 0xf00f, 0xff0e, 0xe21f, 0x10fd, 0x233, 0x2eff, 0x4234, 0x5346, 0x2444, 0x1243, 0x4106, 0x2f1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17959185] cycle (D:8)
	FIFO/*9880*/(32, 0x213, 0x1320, 0x352, 0xff1e, 0xebe, 0x1111, 0xffe0, 0xff00, 0x213, 0x101f, 0x4433, 0x3103, 0x2012, 0x112, 0x11fe, 0x120f, 0x233, 0x6443, 0x7353, 0x5565, 0x6756, 0x6756, 0x4566, 0xd1f0, 0x213, 0xffea, 0xdcae, 0xeeed, 0xecd, 0x110c, 0x3631, 0xef01);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17968793] cycle (D:8)
	FIFO/*98c0*/(32, 0x213, 0xf0ff, 0x110, 0xcee0, 0xdde, 0x20f2, 0x1331, 0xffff, 0x213, 0xff2, 0xe002, 0x0, 0xfdf0, 0x3430, 0x4545, 0xef24, 0x213, 0x2dee, 0x204, 0xeeed, 0xf0f, 0xeff0, 0x32c, 0xee0f, 0x233, 0xf0, 0x3113, 0x2343, 0x1233, 0x222, 0x2241, 0x1100);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17978401] cycle (D:8)
	FIFO/*9900*/(32, 0x214, 0x531c, 0xe20e, 0xdde0, 0xd9aa, 0x2eef, 0xe244, 0xde2e, 0x213, 0xef11, 0x3220, 0x135, 0x2f02, 0x1113, 0x1e01, 0x10f0, 0x233, 0x2002, 0x3114, 0x2643, 0x4567, 0x5576, 0x4535, 0x1d03, 0x213, 0xfdcc, 0xcdde, 0x10cc, 0xeede, 0x22fb, 0x4201, 0x44);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17988009] cycle (D:8)
	FIFO/*9940*/(32, 0x233, 0x1ffd, 0x10c0, 0xf010, 0xddef, 0xcddf, 0xef0e, 0x20e0, 0x213, 0x111, 0x1f1, 0x2331, 0xffff, 0x220f, 0x5353, 0x114, 0x214, 0xceec, 0x155e, 0x1fe0, 0xdf2f, 0xbd0e, 0x21e, 0x121d, 0x213, 0x11f1, 0xf141, 0x2121, 0xff02, 0xedee, 0x22f, 0xeff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [17997617] cycle (D:8)
	FIFO/*9980*/(32, 0x213, 0xefd, 0xf201, 0xdcee, 0xdcce, 0x1efb, 0x4223, 0x1102, 0x214, 0xe10c, 0x31ef, 0x4733, 0x1114, 0xee23, 0xdc01, 0xf0e0, 0x213, 0xfff, 0xf1f, 0x3344, 0x1122, 0xf132, 0x0, 0xdeee, 0x213, 0xeded, 0xeddd, 0xffee, 0xff, 0x1fce, 0x2200, 0x1322);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18007225] cycle (D:8)
	FIFO/*99c0*/(32, 0x235, 0x2b1b, 0x2e20, 0x135e, 0xc000, 0x30f1, 0x5602, 0x3426, 0x215, 0xff50, 0x1003, 0x630f, 0xd025, 0x2223, 0x2240, 0x5433, 0x216, 0xff, 0x5500, 0x5452, 0xf1ad, 0xeec9, 0x55ed, 0x2300, 0x213, 0x0, 0x0, 0x0, 0xf010, 0x1000, 0xdc, 0xef0e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18016833] cycle (D:8)
	FIFO/*9a00*/(32, 0x213, 0xedde, 0xefff, 0xbdf1, 0xdbdd, 0xe0f, 0x4112, 0xfe04, 0x214, 0xd20f, 0x2211, 0x465, 0x244, 0xdef2, 0xcadf, 0x20ab, 0x233, 0xcfdb, 0xdecc, 0x110c, 0x323f, 0x4645, 0x4664, 0x3626, 0x213, 0xedef, 0xc9ac, 0xdfee, 0xeccc, 0xf00, 0x120f, 0x2101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18026441] cycle (D:8)
	FIFO/*9a40*/(32, 0x233, 0xeede, 0x10ff, 0x2200, 0x1101, 0x1111, 0x2440, 0x1343, 0x214, 0xf56d, 0x6312, 0x1312, 0xed10, 0x134f, 0x4300, 0x6324, 0x213, 0x2124, 0x2011, 0x2212, 0x10f, 0xed0, 0x30f1, 0x1101, 0x214, 0x1132, 0x13ee, 0xf0dc, 0x21f, 0x1ff, 0xdbaa, 0x11dd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18036049] cycle (D:8)
	FIFO/*9a80*/(32, 0x213, 0xdefd, 0xeeee, 0xde0e, 0xbbcd, 0xf0fb, 0x2200, 0x132, 0x213, 0xf1ef, 0x1231, 0x432, 0x100, 0xff1, 0xfeef, 0xeef0, 0x214, 0x2ebb, 0xeebd, 0x642f, 0x2545, 0x3430, 0x4467, 0xef25, 0x213, 0xef0e, 0xcabe, 0xfefd, 0xebcc, 0xe20f, 0x10e, 0xfe12);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18045657] cycle (D:8)
	FIFO/*9ac0*/(32, 0x213, 0x131, 0x10fe, 0x2223, 0xff01, 0x311f, 0x5411, 0x3, 0x214, 0x1f, 0x77f0, 0x2004, 0xd122, 0x1221, 0x301f, 0x6466, 0x214, 0x3445, 0x1e24, 0x4133, 0xef04, 0x64fc, 0x4ed3, 0x3425, 0x214, 0xedf3, 0xffef, 0x121e, 0xdd, 0xf021, 0xddce, 0xf10d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18055265] cycle (D:8)
	FIFO/*9b00*/(32, 0x213, 0xfdf, 0xccce, 0xfefe, 0xcade, 0xeedc, 0x0, 0x2121, 0x213, 0xf0, 0x320f, 0x2433, 0x212, 0xf00f, 0x0, 0xfee0, 0x214, 0xdaad, 0xdecb, 0x221d, 0x33, 0x6301, 0x4743, 0x2366, 0x213, 0xedf0, 0xddfe, 0xedbb, 0xdefe, 0x10fe, 0xcf, 0xe220);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18064873] cycle (D:8)
	FIFO/*9b40*/(32, 0x213, 0x20, 0xee0, 0x3101, 0xde14, 0xff0, 0x5310, 0xf133, 0x213, 0x112f, 0x3202, 0x12, 0x10ef, 0xe000, 0x22f0, 0x4442, 0x214, 0x3466, 0x32e1, 0x2553, 0xef00, 0x101d, 0x2012, 0x5536, 0x214, 0xcd14, 0x2edd, 0x2edf, 0xe122, 0xeef0, 0xebac, 0x5320);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18074481] cycle (D:8)
	FIFO/*9b80*/(32, 0x213, 0xfff0, 0xdfd0, 0xcedb, 0xceed, 0xdedc, 0xfdf0, 0x3231, 0x214, 0xcf3, 0x1310, 0x1673, 0x1254, 0x1000, 0x5301, 0xf114, 0x213, 0xdde0, 0xeece, 0xfd, 0x11f, 0x1100, 0x3200, 0x2234, 0x213, 0xd031, 0xddef, 0xdeed, 0xeedd, 0xeeff, 0xdeff, 0x30ef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18084089] cycle (D:8)
	FIFO/*9bc0*/(32, 0x214, 0xf365, 0xedfd, 0xfdf1, 0x22, 0xdd9a, 0x22ec, 0x5357, 0x213, 0x3124, 0x3113, 0x113, 0x1012, 0xf00, 0xfddf, 0x4331, 0x213, 0x2222, 0x20, 0x3442, 0x225, 0xf011, 0x10ff, 0x21f0, 0x213, 0x2311, 0xfde0, 0x221f, 0x2123, 0x1f0, 0xbbcd, 0xe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18093697] cycle (D:8)
	FIFO/*9c00*/(32, 0x213, 0x1f11, 0xf1fe, 0xdbef, 0xfede, 0xddef, 0xefed, 0x11f, 0x213, 0xf133, 0x1100, 0x2542, 0x3421, 0xff2, 0x221, 0x200f, 0x233, 0x2222, 0xf1f1, 0xfce, 0xf1ed, 0x2fe, 0xf11e, 0x220, 0x213, 0x132, 0xceff, 0xedd, 0xeeef, 0xf1fd, 0xbdef, 0xe0db);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18103305] cycle (D:8)
	FIFO/*9c40*/(32, 0x214, 0x344f, 0xfde1, 0xebce, 0xff1, 0xbcbd, 0xcebc, 0x367d, 0x213, 0x1320, 0x243, 0x101, 0x3310, 0xf1, 0xffde, 0x210f, 0x213, 0x2011, 0x100, 0x4422, 0x3243, 0x211, 0xff10, 0xf00, 0x233, 0x4326, 0x1333, 0x32f4, 0x3401, 0x361, 0xf035, 0xdc2e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18112913] cycle (D:8)
	FIFO/*9c80*/(32, 0x213, 0x11f0, 0x2fe1, 0xdd00, 0xeb, 0xd01f, 0xdeff, 0x1fff, 0x213, 0x110, 0x23ee, 0x3431, 0x4231, 0x132, 0x3233, 0x220f, 0x213, 0xdef1, 0xede, 0xfef, 0x3221, 0x5321, 0xfee3, 0x3111, 0x213, 0xe021, 0xccde, 0xeddd, 0xf1f0, 0x10fe, 0xef11, 0xfede);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18122521] cycle (D:8)
	FIFO/*9cc0*/(32, 0x213, 0x231f, 0xedf, 0xbcf1, 0xeddc, 0xecef, 0xef0d, 0x222f, 0x213, 0x2210, 0xf431, 0xe00, 0x21f0, 0xe0, 0x1013, 0x2fed, 0x213, 0x1023, 0x1, 0x4632, 0x2f02, 0xee11, 0xf11, 0x42fe, 0x233, 0x3222, 0x3224, 0x3003, 0x2301, 0x1441, 0xe240, 0xeed0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18132129] cycle (D:8)
	FIFO/*9d00*/(32, 0x213, 0xf00, 0xe201, 0xf330, 0xf0d, 0xe021, 0xffee, 0xdfe0, 0x213, 0x1fef, 0x2010, 0x4441, 0x3423, 0x4f22, 0x3202, 0x3301, 0x213, 0x120, 0x2fff, 0x10, 0x2431, 0x32f0, 0x34, 0x2200, 0x213, 0x142, 0xdced, 0xdcde, 0x1ffd, 0xfef0, 0xed1f, 0xe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18141737] cycle (D:8)
	FIFO/*9d40*/(32, 0x213, 0x311e, 0xf32, 0xdd12, 0xdacc, 0xccef, 0xeeec, 0x2fc, 0x213, 0x22ee, 0x2342, 0xf211, 0x1dcd, 0xddf2, 0x20ef, 0x1ff1, 0x213, 0x1222, 0xf242, 0x4410, 0x1100, 0xdf00, 0x1d, 0xf1ee, 0x233, 0x22, 0x21e0, 0xedf1, 0x1fd3, 0x110, 0x2, 0xbd0c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18151345] cycle (D:8)
	FIFO/*9d80*/(32, 0x214, 0xd14f, 0xf30d, 0x1000, 0x10e, 0x53fc, 0xae04, 0xdefd, 0x213, 0xddff, 0x2230, 0x3112, 0x2431, 0x12f0, 0x2132, 0x232, 0x213, 0x11f0, 0xf22, 0x520f, 0x2123, 0x4233, 0x1224, 0x1001, 0x213, 0x2231, 0xbde0, 0xedec, 0xedd, 0xf010, 0x1ee, 0xce2e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18160953] cycle (D:8)
	FIFO/*9dc0*/(32, 0x213, 0xf1dd, 0x1042, 0xe023, 0xdcdc, 0xeded, 0xefef, 0xfeed, 0x213, 0xfcde, 0x2312, 0xff13, 0x1ffe, 0xefd0, 0x11f0, 0x1, 0x213, 0x1111, 0x4220, 0x202, 0x1022, 0xfcf, 0xf0ff, 0xfe, 0x234, 0x2e1a, 0xdcd, 0xcd3, 0xe1ce, 0x31ff, 0xe412, 0xda41);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18170561] cycle (D:8)
	FIFO/*9e00*/(32, 0x214, 0x3ffe, 0x1ec0, 0x2512, 0xf1eb, 0xabaf, 0x21c, 0xdd00, 0x213, 0x1000, 0x330e, 0x242, 0x3233, 0x1f1f, 0x2442, 0x2110, 0x213, 0xf111, 0x31f0, 0x2102, 0x1211, 0x2140, 0x3311, 0x2453, 0x213, 0x2000, 0xe143, 0xeebc, 0xf00f, 0xfe, 0xfff, 0xd101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18180169] cycle (D:8)
	FIFO/*9e40*/(32, 0x213, 0xdcbe, 0xf13f, 0xf022, 0xbbdd, 0xeccd, 0xfffd, 0xd12f, 0x213, 0x1db, 0x1310, 0x110f, 0xcdf, 0xfdd0, 0x2300, 0x1f1, 0x233, 0x1e0f, 0x300e, 0x2114, 0x4534, 0x1213, 0xe1, 0xdcdb, 0x214, 0xf011, 0x2e32, 0x1342, 0x4103, 0x2300, 0xa332, 0xbcfb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18189777] cycle (D:8)
	FIFO/*9e80*/(32, 0x213, 0x10ef, 0x1210, 0x1210, 0xf01, 0xabc0, 0xfeb, 0xd00f, 0x212, 0x100f, 0xf00e, 0x3420, 0x2022, 0x2211, 0x1210, 0xf000, 0x213, 0x112, 0x1f, 0x2232, 0x4224, 0x1213, 0x111f, 0x43, 0x213, 0x2110, 0x2234, 0xedf0, 0xf0e, 0xe00f, 0x330c, 0xd1e0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18199385] cycle (D:8)
	FIFO/*9ec0*/(32, 0x213, 0xdcbe, 0xdf0e, 0x210e, 0xedd1, 0xeded, 0xfdee, 0xeee0, 0x214, 0xc1de, 0x33c, 0xdf1, 0xaad0, 0xcef0, 0x60de, 0xfd3, 0x213, 0x20ff, 0x1112, 0x230f, 0x112, 0xf221, 0xdcbd, 0xedd, 0x213, 0xfe, 0x11, 0x1012, 0x1ff0, 0x2210, 0x1111, 0xceef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18208993] cycle (D:8)
	FIFO/*9f00*/(32, 0x213, 0x3fec, 0x113, 0x3242, 0xff1, 0xcffe, 0xfeec, 0xfeef, 0x213, 0x1ffe, 0x1fdf, 0x3310, 0x4025, 0x3302, 0x3433, 0x1022, 0x213, 0x32f, 0xf0f, 0x4421, 0x132, 0x3221, 0x2421, 0x441, 0x213, 0x1000, 0x2323, 0x12, 0xefef, 0xff0f, 0x440f, 0xedf1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18218601] cycle (D:8)
	FIFO/*9f40*/(32, 0x213, 0xccbd, 0xef0c, 0x100d, 0xcdf3, 0xfec, 0x20ef, 0xef00, 0x214, 0xce1d, 0x2fb, 0xcefe, 0xdaac, 0xcc02, 0xe01, 0xee44, 0x214, 0xfe00, 0xeedf, 0xfcff, 0x1016, 0x4300, 0xfc23, 0xfcf, 0x214, 0xceed, 0xb10c, 0x1231, 0xee2, 0x3fcd, 0xd255, 0xaf2e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18228209] cycle (D:8)
	FIFO/*9f80*/(32, 0x233, 0xd0cf, 0xfdee, 0x131f, 0x2222, 0xf112, 0xce1d, 0xfeb0, 0x213, 0xfdf2, 0xede0, 0x410f, 0x1025, 0x3421, 0x3104, 0x3322, 0x213, 0x11f1, 0x100f, 0x5411, 0x1455, 0x21, 0x4221, 0xf124, 0x214, 0x400, 0x3372, 0x4745, 0xbd02, 0x411f, 0x54ff, 0xe0e3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18237817] cycle (D:8)
	FIFO/*9fc0*/(32, 0x213, 0xcccd, 0xedec, 0x1f1f, 0xe010, 0xfcdd, 0x42ff, 0x1e1, 0x213, 0xe1fe, 0xeddb, 0xfff, 0xe0ff, 0xee21, 0xfdef, 0x222f, 0x213, 0xdf22, 0xce1e, 0xe0fe, 0x111f, 0x1fe0, 0xff01, 0x30fd, 0x214, 0xc0, 0xced0, 0x220c, 0xbcbf, 0xbddb, 0x1331, 0x3640);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18247425] cycle (D:8)
	FIFO/*a000*/(32, 0x213, 0xefed, 0x11, 0x4421, 0xff22, 0xdfef, 0xecec, 0x1ffe, 0x213, 0xeef2, 0xcdf0, 0x1ffe, 0x1113, 0x2134, 0x3103, 0x4421, 0x213, 0x2112, 0x12f1, 0x3210, 0x4443, 0x2100, 0x4201, 0x1332, 0x214, 0x233c, 0x4336, 0x5411, 0xf0f0, 0x531e, 0x2313, 0x23ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18257033] cycle (D:8)
	FIFO/*a040*/(32, 0x233, 0x2344, 0xef02, 0xdfde, 0xeddc, 0xdcfc, 0xfdcf, 0xeee, 0x213, 0x12ff, 0xeeee, 0xe1fe, 0xf0dc, 0xff0e, 0xcded, 0x12ff, 0x214, 0x540, 0xbdcc, 0xc00b, 0xf11b, 0x1e34, 0xce23, 0x3cc0, 0x213, 0x20e1, 0xce11, 0xefd, 0xdd00, 0xcede, 0xff, 0xe110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18266641] cycle (D:8)
	FIFO/*a080*/(32, 0x213, 0xf0e, 0xf010, 0x4441, 0x1f2, 0xf000, 0xcede, 0xd00d, 0x213, 0xfef0, 0xe0e0, 0xfeee, 0xe11, 0x102, 0x3012, 0x3104, 0x213, 0x4324, 0x2e03, 0x2312, 0x3322, 0x2234, 0x21ff, 0x3232, 0x213, 0x20e1, 0x2443, 0x12, 0x11f, 0x2122, 0x2, 0x11fe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18276249] cycle (D:8)
	FIFO/*a0c0*/(32, 0x214, 0xfee1, 0xe0dc, 0x30ec, 0xce04, 0xfd10, 0xeff, 0x3410, 0x213, 0x31f0, 0x11, 0x10e, 0xeeef, 0xfef, 0xdcd0, 0x10ed, 0x214, 0x11df, 0xddbf, 0xcffd, 0xfe, 0x3332, 0xdf10, 0xdf1f, 0x213, 0x11f0, 0xe011, 0xe00f, 0xeeff, 0xfed, 0xefcd, 0xf0fd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18285857] cycle (D:8)
	FIFO/*a100*/(32, 0x214, 0x3e9e, 0xfff2, 0x3463, 0xf122, 0x110, 0xdb, 0xadde, 0x213, 0xeff, 0xfcc0, 0xd0ff, 0xefff, 0x1110, 0x1012, 0x1034, 0x213, 0x5332, 0xf213, 0x1220, 0x2320, 0x3442, 0x1fe2, 0x3200, 0x213, 0x212, 0x343f, 0xf233, 0x210f, 0x3431, 0xff23, 0x1101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18295465] cycle (D:8)
	FIFO/*a140*/(32, 0x214, 0xf02, 0x2f0, 0xfbbb, 0xc122, 0x1feb, 0x1030, 0x4401, 0x214, 0x230d, 0x11, 0x4fe0, 0xeff0, 0xe22f, 0xab0f, 0xbc, 0x213, 0xfeef, 0xd00f, 0xfedd, 0xeeff, 0x11fd, 0xe011, 0x10, 0x213, 0x1000, 0x212, 0xf1f0, 0xcddd, 0xf0fe, 0xeee, 0xeeef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18305073] cycle (D:8)
	FIFO/*a180*/(32, 0x213, 0xfeee, 0xeef0, 0x10e, 0x0, 0x1f0, 0x1f0, 0xcdf1, 0x214, 0xcbec, 0xeccf, 0xd012, 0xb9dc, 0xedef, 0x1f0f, 0xf373, 0x213, 0x4301, 0x334, 0x2011, 0x2111, 0x1114, 0x132, 0x2200, 0x213, 0x1113, 0x41f3, 0x1324, 0x210f, 0x2320, 0xf113, 0x1000);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18314681] cycle (D:8)
	FIFO/*a1c0*/(32, 0x214, 0x30e1, 0x1233, 0x220f, 0xf00f, 0xd102, 0x20, 0x3423, 0x214, 0x1edf, 0x3421, 0x1543, 0xedee, 0xc00f, 0xf0d9, 0x3ede, 0x214, 0xebd4, 0x20fe, 0xeebe, 0xfede, 0xeefc, 0xeed, 0x1100, 0x213, 0x100, 0x1321, 0xf20f, 0xce0f, 0xf0fd, 0xdeee, 0xeeee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18324289] cycle (D:8)
	FIFO/*a200*/(32, 0x214, 0xeefe, 0xdecc, 0x2ffc, 0xf0f4, 0xfdef, 0xdbc, 0xbf11, 0x214, 0xe9ba, 0x1de2, 0x232, 0x9cee, 0xd1da, 0xbbeb, 0x1130, 0x213, 0x2200, 0x2301, 0x211, 0x2121, 0xf144, 0x121, 0x1022, 0x213, 0x3203, 0x2112, 0x4211, 0x322, 0x3222, 0x1102, 0x1ef0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18333897] cycle (D:8)
	FIFO/*a240*/(32, 0x214, 0xfff5, 0x20f1, 0x330e, 0x312, 0x1550, 0x6303, 0x6223, 0x214, 0xde3, 0x3243, 0x5454, 0xefef, 0xf021, 0xcde, 0xc0, 0x214, 0xccef, 0xdddb, 0xeffd, 0xf1e, 0xef11, 0x12fe, 0x22ff, 0x213, 0x20f0, 0x1111, 0x10ff, 0xfff0, 0xe100, 0xefff, 0xcffd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18343505] cycle (D:8)
	FIFO/*a280*/(32, 0x213, 0xef0d, 0xeeff, 0xffcd, 0x100, 0xff0f, 0xefe, 0xceef, 0x214, 0x9dda, 0xf1f, 0xde1f, 0xdfed, 0xddcd, 0xeff, 0x300f, 0x214, 0x2102, 0xe0, 0xe012, 0x4eee, 0x3103, 0xe012, 0x350, 0x214, 0x2364, 0x244, 0x3013, 0x3436, 0x2463, 0xf36, 0x1123);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18353113] cycle (D:8)
	FIFO/*a2c0*/(32, 0x214, 0xf042, 0x1df4, 0x42e0, 0xedc0, 0x5200, 0x3113, 0x3324, 0x214, 0x4ef1, 0x5446, 0x4643, 0x1ebf, 0xfdfe, 0x3122, 0xee1, 0x234, 0x2224, 0x1dd2, 0xbddd, 0xbdbc, 0xdcbd, 0xc1dc, 0xf11d, 0x214, 0xf111, 0x3012, 0xee21, 0x0, 0xdef0, 0xf02e, 0xeecc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18362721] cycle (D:8)
	FIFO/*a300*/(32, 0x214, 0x1fc, 0x211, 0xccfd, 0xfbdd, 0xf0ed, 0xc10d, 0xcdcb, 0x213, 0xeecd, 0xe01, 0xffe0, 0xeeed, 0xdeff, 0xfd, 0x22, 0x214, 0x16, 0x1f2, 0x3531, 0xfe, 0xbfef, 0x20c, 0xdede, 0x213, 0x22f0, 0x1111, 0x2100, 0x143, 0xf121, 0x121, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18372329] cycle (D:8)
	FIFO/*a340*/(32, 0x214, 0x5155, 0x236, 0x3310, 0xcedf, 0x3eed, 0x6533, 0x1f22, 0x214, 0xd1, 0x3330, 0x7554, 0xeef2, 0xdf1f, 0x2570, 0xff12, 0x214, 0xece, 0xbcd0, 0xf, 0x32f1, 0xe122, 0x231e, 0x1254, 0x214, 0x3401, 0x2021, 0x4344, 0x2fd0, 0xf0e2, 0x21d, 0xbbcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18381937] cycle (D:8)
	FIFO/*a380*/(32, 0x234, 0xefd2, 0xf212, 0x212, 0x1fd1, 0xc0e, 0xe1, 0xdccc, 0x213, 0xdccd, 0xeeff, 0x200e, 0xffee, 0xef0f, 0xfd, 0x2, 0x213, 0xfdf0, 0x100, 0x222f, 0x23, 0xe0ff, 0x10ed, 0xefcf, 0x214, 0xecff, 0xce0, 0x52f0, 0x3434, 0x6531, 0x1101, 0x112);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18391545] cycle (D:8)
	FIFO/*a3c0*/(32, 0x214, 0x1134, 0xf033, 0x1013, 0xafdf, 0x1ebc, 0x5103, 0xef46, 0x234, 0x423, 0x1211, 0x6441, 0x4420, 0x1413, 0x3543, 0x6354, 0x234, 0x2351, 0xe11, 0xedd2, 0xcd0, 0xffdb, 0x2db, 0x35ff, 0x214, 0x2144, 0x1022, 0x2434, 0x1233, 0x1ed1, 0xfe10, 0xbc0f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18401153] cycle (D:8)
	FIFO/*a400*/(32, 0x234, 0x2051, 0x2571, 0x5565, 0x2333, 0x30, 0xf100, 0xeee2, 0x214, 0xcbbb, 0xefe0, 0x31dc, 0x1de2, 0xffe, 0x320e, 0x12, 0x215, 0xedcc, 0xcdce, 0x53fe, 0xdf33, 0xcef2, 0xcebb, 0xac21, 0x215, 0x9af1, 0xfdda, 0x30e0, 0x3135, 0xf324, 0x3310, 0x2430);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18410761] cycle (D:8)
	FIFO/*a440*/(32, 0x215, 0xf451, 0x11f1, 0xfef, 0xdaae, 0xcef, 0x2111, 0xe042, 0x236, 0xdbb6, 0xdcce, 0x4ebf, 0xfe2e, 0xd11, 0x1111, 0x4210, 0x214, 0x1f0, 0xff0, 0xf, 0x14d0, 0xf0ff, 0x41ff, 0x3333, 0x213, 0x1320, 0x10f0, 0x3332, 0x3432, 0x1, 0xe001, 0xeefe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18420369] cycle (D:8)
	FIFO/*a480*/(32, 0x213, 0x2111, 0x3323, 0x1022, 0xe11, 0x2200, 0xfef, 0xc001, 0x213, 0xdddb, 0xefd, 0x111f, 0x1211, 0xf200, 0x12ff, 0x1011, 0x214, 0xef0f, 0xfecb, 0x3efc, 0xf133, 0xee11, 0xeead, 0xb00f, 0x213, 0xefef, 0xeecc, 0x1f, 0x1122, 0x2321, 0x21e1, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18429977] cycle (D:8)
	FIFO/*a4c0*/(32, 0x233, 0x2341, 0x1322, 0x1f13, 0xbee0, 0xccd0, 0xfcee, 0xdefd, 0x214, 0xc13f, 0xe9, 0x2331, 0x100, 0xfddf, 0x40df, 0xee14, 0x213, 0xf0f, 0xdef0, 0xfeed, 0x1f1f, 0x21f0, 0x3320, 0x2424, 0x213, 0x1212, 0xf11f, 0x3120, 0x1442, 0x1131, 0xef, 0xdef0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18439585] cycle (D:8)
	FIFO/*a500*/(32, 0x213, 0xf10, 0x2242, 0x101, 0xff33, 0x531f, 0x1fe2, 0x1f0, 0x234, 0x453, 0xdf1e, 0xfdbf, 0x1eee, 0x130f, 0x151d, 0x433, 0x233, 0xe330, 0xe0e, 0xdded, 0xdeef, 0xfffe, 0xdfed, 0xbfef, 0x213, 0xcdfe, 0xcdde, 0xef10, 0x1321, 0x4121, 0xf13, 0x1220);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18449193] cycle (D:8)
	FIFO/*a540*/(32, 0x213, 0xf10f, 0xed1f, 0xffde, 0xddcf, 0xf1fc, 0xf11f, 0x11ff, 0x214, 0x11ff, 0xf1f0, 0x1d0c, 0xee2, 0xedd0, 0x310e, 0xf142, 0x213, 0xcede, 0xeefe, 0xefe, 0xf000, 0xff0, 0x32f1, 0x3532, 0x213, 0x2354, 0x1112, 0x2001, 0x3223, 0x2300, 0xe00e, 0xe0e);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18458801] cycle (D:8)
	FIFO/*a580*/(32, 0x213, 0xd010, 0x3220, 0x23, 0xf132, 0x5210, 0xf3, 0xf11, 0x213, 0xdf11, 0xefff, 0x2fff, 0xe033, 0x4200, 0x2, 0x120, 0x234, 0x6524, 0x20bd, 0xeddb, 0xf1ed, 0xe40e, 0xfee1, 0xa01c, 0x213, 0xdfee, 0xdcde, 0xe0fd, 0x1f00, 0x2112, 0x2334, 0x2111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18468409] cycle (D:8)
	FIFO/*a5c0*/(32, 0x213, 0x232, 0xef00, 0xdbdf, 0xffee, 0xeddd, 0xf00, 0xef, 0x214, 0x3e1d, 0xe101, 0xeccd, 0xf32f, 0xa9, 0x63ff, 0x34f3, 0x214, 0xedce, 0xf0eb, 0xeece, 0x2fe, 0xebae, 0x101f, 0x5563, 0x213, 0x4433, 0x1134, 0x2010, 0x1122, 0x1011, 0xed1, 0x10);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18478017] cycle (D:8)
	FIFO/*a600*/(32, 0x213, 0xfeff, 0x2321, 0xf432, 0x1230, 0x4100, 0x3f02, 0x1003, 0x213, 0x120, 0xdefd, 0xfeef, 0x121, 0x4000, 0x2102, 0xf0f0, 0x614, 0xf2df, 0x2eee, 0xeece, 0x2520, 0x2142, 0xe20e, 0xdd, 0x213, 0xbe11, 0xdcdc, 0xcdef, 0xff0e, 0x201f, 0x2141, 0x1101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18487625] cycle (D:8)
	FIFO/*a640*/(32, 0x213, 0x2234, 0x1132, 0xeeef, 0xffde, 0xfdce, 0xff11, 0x1ffe, 0x214, 0xeaf, 0xddde, 0xcdac, 0xf0f, 0xfecc, 0x1200, 0x121, 0x214, 0xfbb0, 0xe0ef, 0x254d, 0x1124, 0xebd2, 0xc211, 0x330b, 0x213, 0x3221, 0x443, 0xf01, 0x120f, 0xf0, 0xff11, 0x10ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18497233] cycle (D:8)
	FIFO/*a680*/(32, 0x214, 0xfdcf, 0x765f, 0x5456, 0x5226, 0x3f03, 0x3f36, 0xfd33, 0x214, 0x3f2, 0xf1ef, 0xfbec, 0x1032, 0x1cf3, 0x144, 0xb9b0, 0x214, 0x5dba, 0x42d2, 0x5200, 0x4500, 0x2430, 0xeee0, 0x30ef, 0x213, 0xfff0, 0xedde, 0xbff0, 0xefdc, 0x1ff, 0x1032, 0xff0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18506841] cycle (D:8)
	FIFO/*a6c0*/(32, 0x213, 0x231, 0x2331, 0x11, 0x12f0, 0xecc0, 0xff11, 0xff0f, 0x214, 0xcc00, 0xf2c0, 0xdabb, 0xf1dc, 0x1fbb, 0x2, 0x31bc, 0x214, 0xfcf3, 0xef03, 0x123f, 0xff62, 0xfff1, 0x4422, 0x1121, 0x213, 0x1f01, 0x2431, 0xef01, 0xeed, 0x1, 0xe021, 0x11f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18516449] cycle (D:8)
	FIFO/*a700*/(32, 0x213, 0xfeff, 0x32f1, 0x1334, 0x133, 0x11, 0x12, 0x2210, 0x214, 0x23ce, 0x10f0, 0xf1ee, 0xef2e, 0x3032, 0x26, 0xdcce, 0x233, 0xeedf, 0xedc0, 0xdeee, 0xfee, 0x11ee, 0x3022, 0x2403, 0x214, 0xbcef, 0x9dea, 0xc2fb, 0xeaca, 0x341f, 0xf342, 0x2fcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18526057] cycle (D:8)
	FIFO/*a740*/(32, 0x214, 0xf30f, 0x5541, 0x4223, 0xc05, 0xaccb, 0xf12d, 0xf154, 0x213, 0xf010, 0xe0fe, 0xff0f, 0xfccf, 0xfe0, 0x1011, 0x1, 0x234, 0xfded, 0xd1ad, 0xcd2b, 0xf00, 0x1eff, 0xd22f, 0x2164, 0x214, 0xff0e, 0x452f, 0xe255, 0xdace, 0xfe0f, 0xfd34, 0xe1f2);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18535665] cycle (D:8)
	FIFO/*a780*/(32, 0x213, 0xfe01, 0x1000, 0x1333, 0x112, 0x1eee, 0x1134, 0x530e, 0x214, 0x5fb6, 0x2101, 0xabfc, 0xd0ff, 0x6152, 0x1245, 0xedff, 0x213, 0xbbff, 0xff0e, 0x1fe, 0xeed, 0x1102, 0x1201, 0xf11, 0x214, 0xe014, 0xbf1e, 0x2edc, 0xcfac, 0xdffb, 0x462d, 0xfee1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18545273] cycle (D:8)
	FIFO/*a7c0*/(32, 0x214, 0x1101, 0x3323, 0x5f03, 0xf026, 0xefaa, 0x3fab, 0x4322, 0x214, 0xde13, 0xd0e0, 0x110, 0xcbe1, 0x10de, 0x2001, 0x100, 0x214, 0xf1ff, 0x3f02, 0xf102, 0xf21d, 0xd014, 0xf0cd, 0x3422, 0x214, 0x201d, 0x5535, 0xe001, 0xaddb, 0xd0e, 0x3232, 0x3d16);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18554881] cycle (D:8)
	FIFO/*a800*/(32, 0x234, 0x1124, 0xe01e, 0xe2f2, 0x214e, 0xd11, 0x3f15, 0x7322, 0x214, 0x2236, 0x5432, 0xedb1, 0xdfff, 0x2211, 0x2343, 0xfced, 0x213, 0xbe12, 0xeeed, 0xeee, 0xf1ee, 0xf10d, 0x1ff0, 0x1101, 0x214, 0xf262, 0xd234, 0xeeee, 0xbbef, 0xf2ec, 0x2132, 0xe101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18564489] cycle (D:8)
	FIFO/*a840*/(32, 0x214, 0xeab, 0x34fb, 0x2e16, 0x4233, 0xcde0, 0x10ac, 0x4363, 0x214, 0xf012, 0xd021, 0x45fb, 0x11d0, 0x12ed, 0xf041, 0xf1f0, 0x234, 0x2ff2, 0x51d3, 0x111, 0x131, 0xd023, 0xe201, 0xf0d, 0x233, 0x2001, 0x2330, 0x331, 0xf02f, 0xe00f, 0x20f1, 0x111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18574097] cycle (D:8)
	FIFO/*a880*/(32, 0x234, 0x1a04, 0xdfae, 0xef0b, 0x4140, 0x32, 0xfe03, 0xd12, 0x214, 0x6245, 0x6204, 0x2fbf, 0x1125, 0x5231, 0x11f3, 0xbed0, 0x214, 0xdabc, 0xffbb, 0xfdcb, 0xeffe, 0x2fae, 0xfe02, 0xf31f, 0x234, 0xedd2, 0x303e, 0x310d, 0xeff0, 0xec0, 0xcfec, 0xc03c);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18583705] cycle (D:8)
	FIFO/*a8c0*/(32, 0x234, 0xcdcb, 0xccdc, 0x1d0e, 0x30f6, 0xcc52, 0xbbe0, 0xefd, 0x213, 0x1144, 0x130e, 0x11fd, 0x1f00, 0x1f02, 0xf, 0x1fef, 0x234, 0xff1a, 0x3122, 0x3632, 0x2323, 0xf224, 0xe10f, 0xcd0d, 0x233, 0xf02, 0x2122, 0x1230, 0xe1d0, 0xce0e, 0xee0d, 0xfdff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18593313] cycle (D:8)
	FIFO/*a900*/(32, 0x234, 0xa9ff, 0xbe9e, 0xdbfb, 0x1e, 0xf6f2, 0x1c5f, 0x5103, 0x214, 0x6425, 0xfbe2, 0xedb1, 0xf161, 0x1043, 0xd016, 0xef0f, 0x213, 0xfeee, 0xfe00, 0xdf0, 0xf0e0, 0xfe, 0x1edf, 0x121, 0x214, 0x5432, 0xee44, 0xf9b0, 0xaf01, 0x2fce, 0xf133, 0xee1);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18602921] cycle (D:8)
	FIFO/*a940*/(32, 0x234, 0xddea, 0xcdbc, 0x3cd2, 0x2304, 0xc540, 0xe1e0, 0xdeec, 0x214, 0x4642, 0x4323, 0x5fe2, 0x3441, 0x1211, 0xdd0e, 0xcabb, 0x214, 0x330c, 0x2531, 0x324, 0x33fd, 0x41f, 0xcbd1, 0x1121, 0x233, 0x211, 0x231, 0xe22e, 0xef0f, 0xfefd, 0xcfed, 0xdcf0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18612529] cycle (D:8)
	FIFO/*a980*/(32, 0x214, 0xaeda, 0xf1e, 0x1031, 0x1332, 0x3563, 0xed00, 0x3130, 0x213, 0x2423, 0xff00, 0x10ef, 0xfe01, 0x122f, 0xefe0, 0xf00f, 0x214, 0xcac, 0x1ff0, 0x1de2, 0x1fe0, 0xf22, 0xebbd, 0xd155, 0x214, 0x4431, 0xc153, 0xbedd, 0xe41e, 0x21eb, 0xdf04, 0xbdee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18622137] cycle (D:8)
	FIFO/*a9c0*/(32, 0x214, 0xfcc, 0x1020, 0x5252, 0x1426, 0x1cdf, 0xf0f, 0x1fdf, 0x213, 0x4200, 0x21f2, 0x2f02, 0x2322, 0x1210, 0xdee0, 0xf0e, 0x214, 0x5ec1, 0x3633, 0x31d, 0x41f0, 0x24f1, 0xcd00, 0xe31d, 0x233, 0x31, 0x112, 0xff00, 0xeeff, 0xcefe, 0xef0, 0xc0ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18631745] cycle (D:8)
	FIFO/*aa00*/(32, 0x214, 0xddd9, 0x2111, 0x1ccd, 0xf0f0, 0x56fc, 0x1f15, 0x7df2, 0x233, 0x4212, 0x2342, 0x2113, 0x32, 0x1221, 0x1002, 0xf011, 0x214, 0x11ec, 0xde00, 0xebab, 0xaee0, 0x112e, 0xec00, 0x251e, 0x214, 0x33ff, 0x26, 0xcadf, 0x33cc, 0xee0, 0x12fd, 0xd0f0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18641353] cycle (D:8)
	FIFO/*aa40*/(32, 0x214, 0x10eb, 0xc032, 0xdf, 0x2efe, 0xbf13, 0x2013, 0xffde, 0x213, 0x1e00, 0x2223, 0xf23, 0x3333, 0xf111, 0xeff0, 0x100f, 0x214, 0x1f13, 0x3213, 0x21f2, 0x3121, 0x5543, 0xacd1, 0xbeea, 0x213, 0x1fe, 0x10d, 0xfecf, 0x2110, 0x31, 0x2100, 0xcf23);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18650961] cycle (D:8)
	FIFO/*aa80*/(32, 0x234, 0x1f43, 0xf000, 0x3c03, 0xeede, 0xffd0, 0xeffe, 0xded0, 0x213, 0x1242, 0xff02, 0x1111, 0x22fe, 0x1ff1, 0x213, 0xf100, 0x213, 0x221f, 0xe001, 0xbdce, 0xffed, 0xf0f0, 0xd10e, 0xfed, 0x233, 0xebcb, 0xdf0, 0xe2, 0xefef, 0xccfe, 0xedb1, 0xcebd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18660569] cycle (D:8)
	FIFO/*aac0*/(32, 0x213, 0x110, 0x131, 0xfe0e, 0xedcd, 0x11f0, 0xeeef, 0x1, 0x214, 0x2020, 0x5775, 0x4114, 0x3f12, 0x2625, 0xe0dd, 0x31e, 0x213, 0x22f0, 0x1012, 0x222, 0x3101, 0x4312, 0xf002, 0xcddd, 0x233, 0xf020, 0xefdf, 0xdcee, 0xedbc, 0xefcd, 0x1310, 0x3342);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18670177] cycle (D:8)
	FIFO/*ab00*/(32, 0x213, 0xf0f, 0x2211, 0xe001, 0xfcee, 0x1102, 0xf231, 0xfffe, 0x213, 0x2112, 0xf011, 0x210f, 0xf0f1, 0x221f, 0x2443, 0xe023, 0x213, 0x2def, 0x203, 0xcdde, 0xfeed, 0xfff, 0xe12d, 0xddee, 0x213, 0x121e, 0x24, 0xdf0f, 0xdfef, 0xf00f, 0x111f, 0xedde);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18679785] cycle (D:8)
	FIFO/*ab40*/(32, 0x213, 0x10fd, 0xf00f, 0xeef0, 0xecdd, 0xedf, 0xe011, 0xf0fe, 0x213, 0xff12, 0x4220, 0x25, 0x1f02, 0x1113, 0xff11, 0x10f, 0x214, 0xdabf, 0x4564, 0x2766, 0xf454, 0x6531, 0xff25, 0xcaef, 0x213, 0xeee, 0xdfe0, 0x10ed, 0xdedf, 0x4420, 0x4312, 0x233);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18689393] cycle (D:8)
	FIFO/*ab80*/(32, 0x213, 0x20e0, 0x1113, 0x133, 0xdcde, 0x121f, 0x1331, 0x1eef, 0x213, 0x2110, 0x1101, 0x3321, 0xfe2f, 0xf, 0x4333, 0x13, 0x214, 0xcffc, 0x1350, 0xfde0, 0xcefc, 0xbcdc, 0xe20e, 0xe0eb, 0x214, 0x10ee, 0xc060, 0xee00, 0xdbbf, 0xbcab, 0xd11e, 0xdccd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18699001] cycle (D:8)
	FIFO/*abc0*/(32, 0x213, 0xfeed, 0xf000, 0xdcdd, 0xcdcd, 0xfdcc, 0x3113, 0x1ff1, 0x214, 0xff0c, 0x41df, 0x3633, 0x3225, 0xf023, 0xdd12, 0xefde, 0x213, 0xfee, 0x2010, 0x3554, 0x2222, 0x43, 0x1221, 0xffef, 0x213, 0xe00f, 0xdeed, 0xeffe, 0xfff, 0x32ef, 0x4312, 0x2433);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18708609] cycle (D:8)
	FIFO/*ac00*/(32, 0x213, 0x1001, 0x2232, 0x1210, 0xeff0, 0x311f, 0x4324, 0xedf2, 0x214, 0x51, 0x33f2, 0x5423, 0xf246, 0x1114, 0x3221, 0x1201, 0x214, 0x110f, 0x4632, 0x1231, 0xcd, 0xdccd, 0x43cb, 0x13ef, 0x213, 0xf00f, 0xf1ff, 0xffed, 0xddf0, 0xeef0, 0xefdc, 0xeddc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18718217] cycle (D:8)
	FIFO/*ac40*/(32, 0x213, 0xeecd, 0xf0ff, 0xcbef, 0xccdc, 0xedf0, 0x3ef1, 0xfe02, 0x214, 0xe1ee, 0x10ff, 0xf453, 0xf254, 0xedf2, 0xeeef, 0x1fad, 0x213, 0xfed, 0x11fe, 0x6631, 0x1034, 0x3322, 0x2311, 0xf2, 0x213, 0xf100, 0xcbbf, 0xefff, 0xddc, 0x421, 0x3421, 0x2101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18727825] cycle (D:8)
	FIFO/*ac80*/(32, 0x213, 0x1123, 0x5211, 0x1223, 0xfff0, 0x2120, 0x3530, 0xef13, 0x213, 0x24f, 0x4222, 0x2113, 0x1f11, 0x120, 0x1200, 0x1001, 0x214, 0x4325, 0x5232, 0x1323, 0x20b, 0xfbd1, 0x6fbe, 0x31f2, 0x213, 0xf010, 0x1fe, 0xdedd, 0xef0f, 0xfee, 0xeccc, 0xdebe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18737433] cycle (D:8)
	FIFO/*acc0*/(32, 0x213, 0xdfdb, 0xdfee, 0xcdfe, 0xbabc, 0xeffc, 0xef, 0xff21, 0x213, 0xe0ed, 0x1030, 0x420, 0x2f, 0xe00, 0xfffe, 0xdef1, 0x213, 0x1fde, 0x1fee, 0x4310, 0x1312, 0x222f, 0x3343, 0xf124, 0x213, 0xffff, 0xdce0, 0xeefe, 0xfcdd, 0x1321, 0x2311, 0xe13);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18747041] cycle (D:8)
	FIFO/*ad00*/(32, 0x213, 0x243, 0x311f, 0x2333, 0xf01, 0x321f, 0x6511, 0x114, 0x213, 0x111f, 0x5510, 0x3113, 0x212, 0x1211, 0x11, 0x2123, 0x214, 0x3434, 0x3024, 0x3145, 0xefe2, 0x530d, 0x3eb3, 0x3225, 0x214, 0xcff4, 0xcfdc, 0xfffc, 0xfebc, 0xceee, 0x9bbb, 0x9deb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18756649] cycle (D:8)
	FIFO/*ad40*/(32, 0x213, 0xfebc, 0xeedc, 0xdeee, 0xaacc, 0xedcc, 0xefff, 0x1e01, 0x213, 0xeed, 0x210f, 0x2412, 0xe202, 0xff0f, 0xf0, 0xeeef, 0x213, 0xfecf, 0xffee, 0x111f, 0x22, 0x31f1, 0x3421, 0x2244, 0x214, 0xcd00, 0xbccd, 0xcd9b, 0xccc9, 0x52fe, 0x43f1, 0xf553);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18766257] cycle (D:8)
	FIFO/*ad80*/(32, 0x213, 0x1220, 0x31f1, 0x4103, 0xef13, 0x1ff0, 0x5421, 0x133, 0x213, 0x3220, 0x4312, 0x1113, 0x1100, 0xf101, 0x3201, 0x3553, 0x214, 0x4335, 0x46f1, 0x4644, 0xc012, 0x110c, 0x3033, 0x4535, 0x213, 0xdf12, 0xede, 0xffe, 0xef01, 0xeeff, 0xecbd, 0x1000);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18775865] cycle (D:8)
	FIFO/*adc0*/(32, 0x213, 0xeddd, 0xefde, 0xbdec, 0xbdeb, 0xcddc, 0xedff, 0x10, 0x213, 0xfbef, 0x11ff, 0xf132, 0x121, 0xe00, 0x11f1, 0xf102, 0x213, 0xecef, 0xeddd, 0xf0ed, 0x221, 0x100f, 0x3201, 0x2324, 0x214, 0xb163, 0xcbbd, 0xc0fa, 0xcdad, 0xecee, 0xfcf0, 0x6211);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18785473] cycle (D:8)
	FIFO/*ae00*/(32, 0x233, 0xf0e, 0x2011, 0x2113, 0x2123, 0x200, 0x10f, 0x4122, 0x213, 0x4134, 0x3324, 0x1233, 0x1212, 0xf010, 0x1edf, 0x3343, 0x213, 0x1222, 0x1021, 0x3533, 0x1325, 0x11, 0x111f, 0x30e1, 0x213, 0x2321, 0xeec0, 0x111e, 0x222, 0xffe0, 0xabbd, 0xfffe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18795081] cycle (D:8)
	FIFO/*ae40*/(32, 0x213, 0xfee1, 0xf0ee, 0xcdef, 0xfddd, 0xdede, 0xeeed, 0xf00f, 0x214, 0xbe02, 0x10ec, 0x674, 0x5510, 0x1df3, 0xe240, 0x40eb, 0x213, 0xeee0, 0xfddd, 0x1fce, 0x3311, 0x1ff, 0xfff, 0x1231, 0x213, 0x1133, 0xcfee, 0xeee, 0xfff0, 0xf1fe, 0xcde0, 0xe00d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18804689] cycle (D:8)
	FIFO/*ae80*/(32, 0x213, 0x2321, 0x10f1, 0xff00, 0xf01, 0xefef, 0xe0ff, 0x234f, 0x213, 0x2231, 0x2343, 0x2111, 0x2421, 0x1f1, 0xffe, 0x2210, 0x213, 0x1101, 0x1101, 0x4422, 0x2333, 0x1222, 0x10, 0x1010, 0x213, 0x1012, 0xf0f0, 0xffef, 0x2211, 0xd132, 0xadfe, 0xedeb);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18814297] cycle (D:8)
	FIFO/*aec0*/(32, 0x213, 0xef, 0x2eef, 0xdef0, 0xdc, 0xef00, 0xeeff, 0xfeee, 0x214, 0xfff, 0x21a9, 0x4632, 0x433e, 0xf352, 0x1324, 0x21fb, 0x233, 0x12, 0xff0, 0xeecd, 0xfeee, 0x22f0, 0x2001, 0x3013, 0x214, 0xc024, 0xa9ab, 0xf9bc, 0x1100, 0x40fd, 0xbe13, 0xdcd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18823905] cycle (D:8)
	FIFO/*af00*/(32, 0x214, 0x552e, 0x2fe0, 0xacf3, 0xdcbb, 0xcaef, 0xbffb, 0x343e, 0x213, 0x3211, 0x1432, 0x1110, 0x3101, 0xf0, 0x1012, 0x20ff, 0x213, 0x2013, 0x1012, 0x3532, 0x2f02, 0xf011, 0x12, 0x420f, 0x213, 0xf12, 0x1f11, 0xfef1, 0x2200, 0x332, 0xbeec, 0xeccd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18833513] cycle (D:8)
	FIFO/*af40*/(32, 0x214, 0xdee, 0xc312, 0xd46e, 0xfdfb, 0xdf31, 0xdfd, 0x9cbe, 0x214, 0x2ccf, 0xfff, 0x5341, 0x4414, 0x4e23, 0x2104, 0x33f0, 0x214, 0x321, 0xcdf, 0xe00f, 0x3530, 0x4301, 0xff46, 0x3311, 0x214, 0xd053, 0x9bcb, 0xaacd, 0xb, 0xedd1, 0xbe20, 0xfeed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18843121] cycle (D:8)
	FIFO/*af80*/(32, 0x213, 0x2100, 0x33, 0xee12, 0xfbdd, 0xedf0, 0xdfed, 0x2ed, 0x214, 0x42ed, 0x5665, 0xf532, 0x3ece, 0xdc14, 0x40ee, 0x14, 0x213, 0x1111, 0x232, 0x4311, 0x1101, 0xf011, 0x111e, 0xf2ef, 0x233, 0x1253, 0x3213, 0x2f14, 0x2203, 0x2323, 0x323, 0xee1f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18852729] cycle (D:8)
	FIFO/*afc0*/(32, 0x214, 0xd11c, 0xf31d, 0xfffe, 0x11fd, 0x420e, 0xdf03, 0xbddd, 0x214, 0xb9fd, 0x1151, 0x3002, 0x2751, 0x32ff, 0x252, 0x230, 0x214, 0x1ee, 0xe22, 0x62fd, 0x2f24, 0x6356, 0x1225, 0x2e13, 0x213, 0x2021, 0xbdf0, 0xeefe, 0xede, 0xf100, 0xf1ee, 0xce1f);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18862337] cycle (D:8)
	FIFO/*b000*/(32, 0x214, 0xd9, 0x1062, 0xd036, 0xcb9b, 0xdcec, 0xdfdf, 0xecbb, 0x214, 0xfabd, 0x6314, 0x1f25, 0x3ffe, 0xefef, 0x32f0, 0x13, 0x213, 0x11, 0x4211, 0xf112, 0x2122, 0x1fef, 0x1f1, 0x10ff, 0x214, 0x310d, 0xed04, 0xe13, 0x10e0, 0x6322, 0xc236, 0xb9fc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18871945] cycle (D:8)
	FIFO/*b040*/(32, 0x214, 0x1eee, 0x1fe1, 0x202, 0x10ea, 0xacd0, 0x20d, 0xdd1f, 0x214, 0x11f0, 0x44ed, 0xe243, 0x4552, 0x2f11, 0x3755, 0x3110, 0x213, 0x0, 0x30f0, 0x10f1, 0x100, 0x1130, 0x2111, 0x2342, 0x213, 0x2000, 0xe033, 0xfedd, 0xf00f, 0x1fff, 0xffff, 0xe010);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18881553] cycle (D:8)
	FIFO/*b080*/(32, 0x213, 0xdddd, 0xf02f, 0xf011, 0xccee, 0xfdde, 0xe0fe, 0xd11f, 0x214, 0x1d9, 0x3531, 0x12fe, 0x1bdf, 0xfcd0, 0x4400, 0xe2f2, 0x233, 0xf10, 0x2000, 0x3024, 0x3532, 0x2223, 0x1102, 0xfef, 0x214, 0x110, 0x2f33, 0x1333, 0x3011, 0x2100, 0xd332, 0xcc0d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18891161] cycle (D:8)
	FIFO/*b0c0*/(32, 0x213, 0x1f0, 0x1210, 0x1111, 0xf00, 0xcce0, 0xffc, 0xf0ff, 0x213, 0x100e, 0xfc, 0x3520, 0x3113, 0x3322, 0x2311, 0xf000, 0x214, 0x123, 0x1120, 0x1133, 0x6115, 0x2312, 0xf00f, 0xf154, 0x213, 0x1110, 0x2134, 0xef0, 0xf0e, 0xe00f, 0x32fd, 0xd1ff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18900769] cycle (D:8)
	FIFO/*b100*/(32, 0x213, 0xedce, 0xdffe, 0x100d, 0xedd1, 0xeeee, 0xfeef, 0xfdef, 0x214, 0xd1fb, 0x132d, 0x1d01, 0xcbd0, 0xee12, 0x41be, 0xeed3, 0x214, 0x400d, 0x233, 0x33f0, 0x1203, 0x552, 0xdaac, 0x1cab, 0x214, 0x1ee, 0x223, 0x3f13, 0x1ff0, 0x5310, 0x2211, 0x9ddf);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18910377] cycle (D:8)
	FIFO/*b140*/(32, 0x214, 0x50da, 0x145, 0x5365, 0x1e03, 0xafee, 0xdeea, 0xecdd, 0x213, 0xff, 0xfdf, 0x2110, 0x2014, 0x4302, 0x3322, 0x1022, 0x214, 0x264f, 0x2f12, 0x5532, 0xef42, 0x5322, 0x3532, 0xf651, 0x214, 0x211f, 0x5534, 0x1f34, 0xeedd, 0xfe0e, 0x76fe, 0xcde3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18919985] cycle (D:8)
	FIFO/*b180*/(32, 0x213, 0xcccd, 0xfffd, 0xfd, 0xbc02, 0xf0dc, 0x10ff, 0xdff0, 0x214, 0xde1d, 0x1fc, 0xbeff, 0xebbb, 0xec23, 0xfd02, 0xee34, 0x214, 0xff00, 0xefdf, 0xcbef, 0xff4, 0x5400, 0xfe35, 0x1fd1, 0x214, 0xdefc, 0xd21c, 0x2132, 0xde2, 0x2ecc, 0xe155, 0xcf20);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18929593] cycle (D:8)
	FIFO/*b1c0*/(32, 0x233, 0xe0ef, 0xfe0e, 0x2311, 0x2233, 0x305, 0xff2e, 0xf0d0, 0x213, 0xfdf2, 0xeee0, 0x310e, 0x14, 0x3311, 0x3113, 0x3322, 0x213, 0x22f1, 0x2110, 0x5321, 0x245, 0x11, 0x3212, 0xf023, 0x214, 0x30d, 0x3362, 0x4765, 0xcc03, 0x4000, 0x54ef, 0xf0e3);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18939201] cycle (D:8)
	FIFO/*b200*/(32, 0x213, 0xcdce, 0xfdec, 0xf01f, 0xd101, 0xfccd, 0x42fd, 0xf0e1, 0x213, 0xe0fe, 0xdddb, 0xff0f, 0xff00, 0xfe21, 0xeeef, 0x2310, 0x213, 0xcf23, 0xde0f, 0xeffd, 0xf, 0x1fe0, 0x1, 0x31fd, 0x214, 0x1fce, 0xdfe0, 0x231c, 0xbcc0, 0xbcdc, 0x1221, 0x3731);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18948809] cycle (D:8)
	FIFO/*b240*/(32, 0x233, 0xd0fd, 0xefe1, 0x1301, 0x3231, 0xf213, 0xfee1, 0xfddd, 0x213, 0xed01, 0xcee1, 0x1ffe, 0x2013, 0x2123, 0x31f3, 0x4421, 0x213, 0x3122, 0x1301, 0x3212, 0x3453, 0x2101, 0x4101, 0x322, 0x214, 0x131b, 0x4336, 0x6513, 0x100, 0x531e, 0x2302, 0x23ee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18958417] cycle (D:8)
	FIFO/*b280*/(32, 0x213, 0xdff0, 0xbcce, 0x11fd, 0xf0f1, 0xefff, 0x1fe1, 0x11, 0x213, 0x11fe, 0xddde, 0xe1fe, 0xf0dc, 0xe00f, 0xcdee, 0x12ff, 0x214, 0x552, 0xbdba, 0xbffb, 0xe10b, 0x1e33, 0xce24, 0x2cdf, 0x213, 0x2ee1, 0xce12, 0xffee, 0xde00, 0xddee, 0xf0fe, 0xf112);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18968025] cycle (D:8)
	FIFO/*b2c0*/(32, 0x213, 0x1ffe, 0xe100, 0x4531, 0x1002, 0xf01, 0xddde, 0xe00d, 0x213, 0xfef0, 0xffe0, 0xfefd, 0xe11, 0x2, 0x3012, 0x3114, 0x213, 0x6325, 0x1003, 0x3323, 0x3331, 0x2345, 0x12ff, 0x2232, 0x213, 0x10e2, 0x3453, 0xf112, 0x210, 0x3024, 0xf012, 0x11ee);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18977633] cycle (D:8)
	FIFO/*b300*/(32, 0x214, 0xed0, 0xe0db, 0x41dc, 0xcd24, 0xfc00, 0xdef, 0x4410, 0x213, 0x30ff, 0xf001, 0xf1fe, 0xfdfe, 0xffef, 0xcbe0, 0x2fed, 0x214, 0x21cf, 0xccaf, 0xcffb, 0xfffc, 0x3342, 0xdf21, 0xcf1f, 0x213, 0x20e0, 0xe010, 0xd00f, 0xeeee, 0xffed, 0xeecd, 0xf00d);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18987241] cycle (D:8)
	FIFO/*b340*/(32, 0x213, 0x1fcf, 0xff2, 0x1241, 0x11, 0xf101, 0xee, 0xeeff, 0x213, 0xfffe, 0xfcc0, 0xdf00, 0xfdff, 0x100, 0x1f22, 0x1045, 0x213, 0x5542, 0x224, 0x1230, 0x2420, 0x5444, 0xe1, 0x3200, 0x213, 0x213, 0x443f, 0x244, 0x310f, 0x3442, 0xf24, 0x1100);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [18996849] cycle (D:8)
	FIFO/*b380*/(32, 0x214, 0xdf1, 0x12ff, 0xebac, 0xc133, 0xdb, 0x1021, 0x4412, 0x214, 0x23fd, 0xff00, 0x3edf, 0xeff0, 0xd23e, 0xba1f, 0xbb, 0x213, 0xfdef, 0xd10e, 0xeedc, 0xeeef, 0x11ed, 0xf011, 0xf011, 0x213, 0x10f0, 0x121, 0xf00f, 0xcbcd, 0xf0fd, 0xeed, 0xfdef);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19006457] cycle (D:8)
	FIFO/*b3c0*/(32, 0x213, 0xffed, 0xdfe0, 0x10e, 0x0, 0xf0, 0x1f0, 0xcee1, 0x213, 0xfdee, 0xffdf, 0xf012, 0xdced, 0xfeff, 0xf0f, 0xf142, 0x213, 0x5311, 0x1355, 0x3111, 0x3211, 0x1024, 0x133, 0x2101, 0x213, 0x2114, 0x4102, 0x2335, 0x3200, 0x3420, 0xf023, 0x1100);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19016065] cycle (D:8)
	FIFO/*b400*/(32, 0x214, 0x3ed0, 0x1224, 0x320f, 0x1e, 0xe013, 0x1020, 0x3534, 0x213, 0xfe0, 0x1201, 0x1222, 0xfefe, 0xd00f, 0xed, 0x3fef, 0x214, 0xdad3, 0x3ffc, 0xdeae, 0xeedd, 0xddfc, 0xfedd, 0x2202, 0x213, 0x0, 0x1330, 0xf20e, 0xbdff, 0xe0fc, 0xeded, 0xdedd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19025673] cycle (D:8)
	FIFO/*b440*/(32, 0x214, 0xeefe, 0xdccc, 0x3dfd, 0xe0f4, 0xece0, 0xcbb, 0x9f11, 0x213, 0xfcdd, 0xef2, 0x122, 0xceef, 0xe0ed, 0xddfd, 0x1010, 0x213, 0x3200, 0x3211, 0x1312, 0x3231, 0xf145, 0x121, 0x2022, 0x213, 0x3213, 0x2112, 0x5312, 0x1332, 0x3332, 0x2103, 0x1ee0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19035281] cycle (D:8)
	FIFO/*b480*/(32, 0x214, 0xfef5, 0x20f0, 0x340c, 0x1422, 0x2560, 0x6413, 0x6334, 0x214, 0xfed4, 0x2344, 0x4553, 0xdfdf, 0xff31, 0xdde, 0x10c0, 0x214, 0xbbfe, 0xcdcb, 0xfffd, 0xf1d, 0xef11, 0x120e, 0x320f, 0x213, 0x1f00, 0x1102, 0xef, 0xfef0, 0xe10f, 0xeefe, 0xcfed);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19044889] cycle (D:8)
	FIFO/*b4c0*/(32, 0x213, 0xef0d, 0xee0e, 0xfecd, 0xf, 0xff0f, 0xfffd, 0xcdd0, 0x213, 0xcffc, 0x0, 0xef00, 0xeffe, 0xedef, 0xfff0, 0x10f0, 0x214, 0x2203, 0x10e0, 0xe113, 0x5fff, 0x41f5, 0xe012, 0x35f, 0x213, 0x1232, 0x132, 0x2012, 0x2224, 0x1342, 0x24, 0x111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19054497] cycle (D:8)
	FIFO/*b500*/(32, 0x214, 0xff43, 0x1cf4, 0x42e0, 0xcb1, 0x7200, 0x4123, 0x3435, 0x213, 0x3e01, 0x3233, 0x2322, 0xfdf, 0xfff, 0x2211, 0xfe1, 0x234, 0x3236, 0xdd3, 0x9ced, 0xacbc, 0xeabc, 0xd0ea, 0xe22c, 0x214, 0xf222, 0x2012, 0xdd11, 0xff0f, 0xdde0, 0xe02d, 0xecbc);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19064105] cycle (D:8)
	FIFO/*b540*/(32, 0x214, 0x2ec, 0x2211, 0xacfd, 0xeacc, 0xdb, 0xb10c, 0xccba, 0x213, 0xfdcc, 0xe10, 0xfeff, 0xedec, 0xedef, 0x1ffc, 0x22, 0x214, 0xf25, 0x12f1, 0x4731, 0x10f, 0xafff, 0x20b, 0xcddd, 0x213, 0x220f, 0x2102, 0x220f, 0x253, 0xf222, 0x131, 0x1110);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19073713] cycle (D:8)
	FIFO/*b580*/(32, 0x214, 0x5156, 0x137, 0x4310, 0xcede, 0x2fdd, 0x7634, 0x2f23, 0x213, 0x1ff0, 0x2210, 0x3332, 0xef01, 0xe000, 0x2241, 0xf011, 0x214, 0xece, 0xbcdf, 0xf, 0x2200, 0xe123, 0x331d, 0x2263, 0x214, 0x4401, 0x2021, 0x3343, 0x2fdf, 0xefe2, 0x21d, 0xb9cd);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19083321] cycle (D:8)
	FIFO/*b5c0*/(32, 0x234, 0xdec1, 0x1f2, 0x110, 0x1def, 0xfb0c, 0xefe0, 0xdbad, 0x213, 0xdccd, 0xdef0, 0x200e, 0xefde, 0xeff0, 0xfc, 0x2, 0x213, 0xfcf0, 0xf200, 0x2310, 0x1024, 0xe0ff, 0x1ec, 0xeecf, 0x213, 0xfeff, 0xdf0, 0x3100, 0x2222, 0x3321, 0x1101, 0x1011);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19092929] cycle (D:8)
	FIFO/*b600*/(32, 0x213, 0x112, 0xf022, 0x1011, 0xc0ef, 0xfde, 0x3102, 0xe033, 0x233, 0x222, 0x1110, 0x3320, 0x3120, 0x1212, 0x1432, 0x4334, 0x214, 0xffc, 0xcadf, 0xeef0, 0x1ef1, 0x21ed, 0x63ef, 0x5523, 0x213, 0x1033, 0x21, 0x1223, 0x1112, 0x1ff0, 0xff1f, 0xcef0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19102537] cycle (D:8)
	FIFO/*b640*/(32, 0x233, 0x31, 0x2341, 0x3342, 0x1122, 0x10, 0xf1ff, 0xdfe1, 0x213, 0xddcd, 0xefe1, 0x20ed, 0xee2, 0xf0fe, 0x210e, 0xf012, 0x214, 0xedde, 0xcede, 0x43fe, 0xef24, 0xdd02, 0xcdcb, 0xab21, 0x213, 0xdc00, 0xffed, 0x20e0, 0x1113, 0x122, 0x1210, 0x1320);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19112145] cycle (D:8)
	FIFO/*b680*/(32, 0x213, 0x231, 0x1000, 0xe0, 0xedce, 0xfefe, 0x1011, 0xf032, 0x234, 0xdcd3, 0xddcf, 0x4dcf, 0xee1e, 0xfff2, 0x2130, 0x5411, 0x214, 0x23ee, 0xcdde, 0xfffd, 0x431, 0xff, 0x42fd, 0x3433, 0x213, 0x2321, 0x1f0f, 0x3332, 0x3442, 0x10, 0xe001, 0xedfe);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19121753] cycle (D:8)
	FIFO/*b6c0*/(32, 0x213, 0x3102, 0x3323, 0x1f23, 0xfe02, 0x2200, 0xeef, 0xc011, 0x213, 0xdddb, 0xefd, 0x21f, 0x1121, 0xf2f1, 0x210e, 0x1001, 0x214, 0xeff0, 0xfecb, 0x3fec, 0xf233, 0xee11, 0xee9e, 0xb00f, 0x213, 0xeefe, 0xedcd, 0x1f, 0x1123, 0x2421, 0x20e1, 0x1101);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19131361] cycle (D:8)
	FIFO/*b700*/(32, 0x213, 0x1321, 0xfef0, 0xee0f, 0xbddf, 0xff0f, 0x1022, 0xe000, 0x214, 0xb13f, 0x10d9, 0x2421, 0x10f, 0xfddf, 0x50df, 0xef04, 0x213, 0xf00f, 0xdef0, 0xeeed, 0x0, 0x2000, 0x3321, 0x2334, 0x213, 0x222, 0xf110, 0x3120, 0x2442, 0x1121, 0xfe0, 0xdef0);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19140969] cycle (D:8)
	FIFO/*b740*/(32, 0x213, 0xf10, 0x2342, 0x1001, 0xff32, 0x531f, 0x1ee2, 0x0, 0x234, 0xf534, 0xfd2e, 0xdaf, 0x1eee, 0x3200, 0x251c, 0x342, 0x233, 0xe330, 0xff0d, 0xdedd, 0xcfee, 0xfe0e, 0xeefd, 0xa0ee, 0x213, 0xcdfe, 0xcdde, 0xff10, 0x1230, 0x4212, 0xf004, 0x1211);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19150577] cycle (D:8)
	FIFO/*b780*/(32, 0x213, 0xf10f, 0xee0f, 0xffce, 0xddcf, 0xf1fc, 0x11f, 0x1ff, 0x214, 0x11f0, 0xe1f0, 0xefd, 0xee2, 0xddd0, 0x41ff, 0xf232, 0x213, 0xcede, 0xeefe, 0xfffd, 0xf01, 0xff0, 0x4100, 0x3532, 0x213, 0x2354, 0x2013, 0x1001, 0x3124, 0x1400, 0xef1e, 0xfff);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19160185] cycle (D:8)
	FIFO/*b7c0*/(32, 0x213, 0xe01f, 0x3220, 0xf023, 0xf042, 0x4211, 0x3, 0x1f10, 0x213, 0xef10, 0xffef, 0x1fff, 0xff34, 0x4200, 0x2, 0x120, 0x234, 0x6524, 0x10bd, 0xeecc, 0xf1fc, 0xf31e, 0xfee1, 0xa01c, 0x213, 0xdfee, 0xdcde, 0xff0d, 0x1f0f, 0x3013, 0x2334, 0x2111);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19169793] cycle (D:8)
	FIFO/*b800*/(32, 0x213, 0x232, 0xe0f0, 0xdbee, 0xeee, 0xfddc, 0xf0, 0xfef, 0x214, 0x3e0f, 0xe101, 0xeccd, 0xf42e, 0x1fa9, 0x72ff, 0x3402, 0x214, 0xecce, 0xf0ec, 0xdfbe, 0x12ef, 0xfbad, 0x110f, 0x5563, 0x213, 0x4433, 0x1134, 0x2010, 0x1122, 0x1011, 0xed1, 0x10);
	WRSPU(0x1aa, 0xc091, 2, "SPU CONTROL REG (SPUCNT)(-1)"); // CPU [19179401] cycle (D:8)
	FIFO/*b840*/(32, 0x213, 0xfeff, 0x2321, 0xf432, 0x1230, 0x4100, 0x3f02, 0x11f3, 0x313, 0x120, 0xdefd, 0xfeef, 0x121, 0x4000, 0x2102, 0xf0f0);
}